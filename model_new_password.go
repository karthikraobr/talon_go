/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewPassword struct for NewPassword
type NewPassword struct {
	// The new password for your account.
	Password string `json:"password"`
	ResetToken string `json:"resetToken"`
}

// NewNewPassword instantiates a new NewPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewPassword(password string, resetToken string) *NewPassword {
	this := NewPassword{}
	this.Password = password
	this.ResetToken = resetToken
	return &this
}

// NewNewPasswordWithDefaults instantiates a new NewPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewPasswordWithDefaults() *NewPassword {
	this := NewPassword{}
	return &this
}

// GetPassword returns the Password field value
func (o *NewPassword) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *NewPassword) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *NewPassword) SetPassword(v string) {
	o.Password = v
}

// GetResetToken returns the ResetToken field value
func (o *NewPassword) GetResetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResetToken
}

// GetResetTokenOk returns a tuple with the ResetToken field value
// and a boolean to check if the value has been set.
func (o *NewPassword) GetResetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResetToken, true
}

// SetResetToken sets field value
func (o *NewPassword) SetResetToken(v string) {
	o.ResetToken = v
}

func (o NewPassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["resetToken"] = o.ResetToken
	}
	return json.Marshal(toSerialize)
}

type NullableNewPassword struct {
	value *NewPassword
	isSet bool
}

func (v NullableNewPassword) Get() *NewPassword {
	return v.value
}

func (v *NullableNewPassword) Set(val *NewPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableNewPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableNewPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewPassword(val *NewPassword) *NullableNewPassword {
	return &NullableNewPassword{value: val, isSet: true}
}

func (v NullableNewPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


