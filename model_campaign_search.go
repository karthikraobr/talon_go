/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CampaignSearch struct for CampaignSearch
type CampaignSearch struct {
	// Properties to match against a campaign. All provided attributes will be exactly matched against campaign attributes.
	Attributes map[string]interface{} `json:"attributes"`
}

// NewCampaignSearch instantiates a new CampaignSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignSearch(attributes map[string]interface{}) *CampaignSearch {
	this := CampaignSearch{}
	this.Attributes = attributes
	return &this
}

// NewCampaignSearchWithDefaults instantiates a new CampaignSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignSearchWithDefaults() *CampaignSearch {
	this := CampaignSearch{}
	return &this
}

// GetAttributes returns the Attributes field value
func (o *CampaignSearch) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *CampaignSearch) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *CampaignSearch) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o CampaignSearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableCampaignSearch struct {
	value *CampaignSearch
	isSet bool
}

func (v NullableCampaignSearch) Get() *CampaignSearch {
	return v.value
}

func (v *NullableCampaignSearch) Set(val *CampaignSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignSearch(val *CampaignSearch) *NullableCampaignSearch {
	return &NullableCampaignSearch{value: val, isSet: true}
}

func (v NullableCampaignSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


