/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewWebhook 
type NewWebhook struct {
	// The IDs of the applications that are related to this entity.
	ApplicationIds []int32 `json:"applicationIds"`
	// Friendly title for this webhook.
	Title string `json:"title"`
	// API method for this webhook.
	Verb string `json:"verb"`
	// API url (supports templating using parameters) for this webhook.
	Url string `json:"url"`
	// List of API HTTP headers for this webhook.
	Headers []string `json:"headers"`
	// API payload (supports templating using parameters) for this webhook.
	Payload *string `json:"payload,omitempty"`
	// Array of template argument definitions.
	Params []TemplateArgDef `json:"params"`
	// Enables or disables webhook from showing in rule builder.
	Enabled bool `json:"enabled"`
}

// NewNewWebhook instantiates a new NewWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewWebhook(applicationIds []int32, title string, verb string, url string, headers []string, params []TemplateArgDef, enabled bool) *NewWebhook {
	this := NewWebhook{}
	this.ApplicationIds = applicationIds
	this.Title = title
	this.Verb = verb
	this.Url = url
	this.Headers = headers
	this.Params = params
	this.Enabled = enabled
	return &this
}

// NewNewWebhookWithDefaults instantiates a new NewWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewWebhookWithDefaults() *NewWebhook {
	this := NewWebhook{}
	return &this
}

// GetApplicationIds returns the ApplicationIds field value
func (o *NewWebhook) GetApplicationIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ApplicationIds
}

// GetApplicationIdsOk returns a tuple with the ApplicationIds field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetApplicationIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationIds, true
}

// SetApplicationIds sets field value
func (o *NewWebhook) SetApplicationIds(v []int32) {
	o.ApplicationIds = v
}

// GetTitle returns the Title field value
func (o *NewWebhook) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NewWebhook) SetTitle(v string) {
	o.Title = v
}

// GetVerb returns the Verb field value
func (o *NewWebhook) GetVerb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Verb
}

// GetVerbOk returns a tuple with the Verb field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetVerbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verb, true
}

// SetVerb sets field value
func (o *NewWebhook) SetVerb(v string) {
	o.Verb = v
}

// GetUrl returns the Url field value
func (o *NewWebhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NewWebhook) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *NewWebhook) GetHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetHeadersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *NewWebhook) SetHeaders(v []string) {
	o.Headers = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NewWebhook) GetPayload() string {
	if o == nil || o.Payload == nil {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetPayloadOk() (*string, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NewWebhook) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *NewWebhook) SetPayload(v string) {
	o.Payload = &v
}

// GetParams returns the Params field value
func (o *NewWebhook) GetParams() []TemplateArgDef {
	if o == nil {
		var ret []TemplateArgDef
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetParamsOk() ([]TemplateArgDef, bool) {
	if o == nil {
		return nil, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *NewWebhook) SetParams(v []TemplateArgDef) {
	o.Params = v
}

// GetEnabled returns the Enabled field value
func (o *NewWebhook) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *NewWebhook) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *NewWebhook) SetEnabled(v bool) {
	o.Enabled = v
}

func (o NewWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["applicationIds"] = o.ApplicationIds
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["verb"] = o.Verb
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["headers"] = o.Headers
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if true {
		toSerialize["params"] = o.Params
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableNewWebhook struct {
	value *NewWebhook
	isSet bool
}

func (v NullableNewWebhook) Get() *NewWebhook {
	return v.value
}

func (v *NullableNewWebhook) Set(val *NewWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableNewWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableNewWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewWebhook(val *NewWebhook) *NullableNewWebhook {
	return &NullableNewWebhook{value: val, isSet: true}
}

func (v NullableNewWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


