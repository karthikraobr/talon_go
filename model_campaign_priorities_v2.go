/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CampaignPrioritiesV2 struct for CampaignPrioritiesV2
type CampaignPrioritiesV2 struct {
	Exclusive []CampaignSetIDs `json:"exclusive,omitempty"`
	Stackable []CampaignSetIDs `json:"stackable,omitempty"`
	Universal []CampaignSetIDs `json:"universal,omitempty"`
}

// NewCampaignPrioritiesV2 instantiates a new CampaignPrioritiesV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignPrioritiesV2() *CampaignPrioritiesV2 {
	this := CampaignPrioritiesV2{}
	return &this
}

// NewCampaignPrioritiesV2WithDefaults instantiates a new CampaignPrioritiesV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignPrioritiesV2WithDefaults() *CampaignPrioritiesV2 {
	this := CampaignPrioritiesV2{}
	return &this
}

// GetExclusive returns the Exclusive field value if set, zero value otherwise.
func (o *CampaignPrioritiesV2) GetExclusive() []CampaignSetIDs {
	if o == nil || o.Exclusive == nil {
		var ret []CampaignSetIDs
		return ret
	}
	return o.Exclusive
}

// GetExclusiveOk returns a tuple with the Exclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignPrioritiesV2) GetExclusiveOk() ([]CampaignSetIDs, bool) {
	if o == nil || o.Exclusive == nil {
		return nil, false
	}
	return o.Exclusive, true
}

// HasExclusive returns a boolean if a field has been set.
func (o *CampaignPrioritiesV2) HasExclusive() bool {
	if o != nil && o.Exclusive != nil {
		return true
	}

	return false
}

// SetExclusive gets a reference to the given []CampaignSetIDs and assigns it to the Exclusive field.
func (o *CampaignPrioritiesV2) SetExclusive(v []CampaignSetIDs) {
	o.Exclusive = v
}

// GetStackable returns the Stackable field value if set, zero value otherwise.
func (o *CampaignPrioritiesV2) GetStackable() []CampaignSetIDs {
	if o == nil || o.Stackable == nil {
		var ret []CampaignSetIDs
		return ret
	}
	return o.Stackable
}

// GetStackableOk returns a tuple with the Stackable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignPrioritiesV2) GetStackableOk() ([]CampaignSetIDs, bool) {
	if o == nil || o.Stackable == nil {
		return nil, false
	}
	return o.Stackable, true
}

// HasStackable returns a boolean if a field has been set.
func (o *CampaignPrioritiesV2) HasStackable() bool {
	if o != nil && o.Stackable != nil {
		return true
	}

	return false
}

// SetStackable gets a reference to the given []CampaignSetIDs and assigns it to the Stackable field.
func (o *CampaignPrioritiesV2) SetStackable(v []CampaignSetIDs) {
	o.Stackable = v
}

// GetUniversal returns the Universal field value if set, zero value otherwise.
func (o *CampaignPrioritiesV2) GetUniversal() []CampaignSetIDs {
	if o == nil || o.Universal == nil {
		var ret []CampaignSetIDs
		return ret
	}
	return o.Universal
}

// GetUniversalOk returns a tuple with the Universal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignPrioritiesV2) GetUniversalOk() ([]CampaignSetIDs, bool) {
	if o == nil || o.Universal == nil {
		return nil, false
	}
	return o.Universal, true
}

// HasUniversal returns a boolean if a field has been set.
func (o *CampaignPrioritiesV2) HasUniversal() bool {
	if o != nil && o.Universal != nil {
		return true
	}

	return false
}

// SetUniversal gets a reference to the given []CampaignSetIDs and assigns it to the Universal field.
func (o *CampaignPrioritiesV2) SetUniversal(v []CampaignSetIDs) {
	o.Universal = v
}

func (o CampaignPrioritiesV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Exclusive != nil {
		toSerialize["exclusive"] = o.Exclusive
	}
	if o.Stackable != nil {
		toSerialize["stackable"] = o.Stackable
	}
	if o.Universal != nil {
		toSerialize["universal"] = o.Universal
	}
	return json.Marshal(toSerialize)
}

type NullableCampaignPrioritiesV2 struct {
	value *CampaignPrioritiesV2
	isSet bool
}

func (v NullableCampaignPrioritiesV2) Get() *CampaignPrioritiesV2 {
	return v.value
}

func (v *NullableCampaignPrioritiesV2) Set(val *CampaignPrioritiesV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignPrioritiesV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignPrioritiesV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignPrioritiesV2(val *CampaignPrioritiesV2) *NullableCampaignPrioritiesV2 {
	return &NullableCampaignPrioritiesV2{value: val, isSet: true}
}

func (v NullableCampaignPrioritiesV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignPrioritiesV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


