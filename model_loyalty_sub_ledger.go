/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// LoyaltySubLedger Ledger of Balance in Loyalty Program for a Customer.
type LoyaltySubLedger struct {
	// **DEPRECATED** Use `totalActivePoints` property instead. Total amount of currently active and available points in the customer's balance. 
	Total float32 `json:"total"`
	// Total amount of currently active and available points in the customer's balance.
	TotalActivePoints float32 `json:"totalActivePoints"`
	// Total amount of pending points, which are not active yet but will become active in the future.
	TotalPendingPoints float32 `json:"totalPendingPoints"`
	// Total amount of points already spent by this customer.
	TotalSpentPoints float32 `json:"totalSpentPoints"`
	// Total amount of points, that expired without ever being spent.
	TotalExpiredPoints float32 `json:"totalExpiredPoints"`
	// List of all events that have happened such as additions, subtractions and expiries.
	Transactions []LoyaltyLedgerEntry `json:"transactions,omitempty"`
	// List of all points that will expire.
	ExpiringPoints []LoyaltyLedgerEntry `json:"expiringPoints,omitempty"`
	// List of all currently active points.
	ActivePoints []LoyaltyLedgerEntry `json:"activePoints,omitempty"`
	// List of all points pending activation.
	PendingPoints []LoyaltyLedgerEntry `json:"pendingPoints,omitempty"`
	// List of expired points.
	ExpiredPoints []LoyaltyLedgerEntry `json:"expiredPoints,omitempty"`
	CurrentTier *Tier `json:"currentTier,omitempty"`
}

// NewLoyaltySubLedger instantiates a new LoyaltySubLedger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltySubLedger(total float32, totalActivePoints float32, totalPendingPoints float32, totalSpentPoints float32, totalExpiredPoints float32) *LoyaltySubLedger {
	this := LoyaltySubLedger{}
	this.Total = total
	this.TotalActivePoints = totalActivePoints
	this.TotalPendingPoints = totalPendingPoints
	this.TotalSpentPoints = totalSpentPoints
	this.TotalExpiredPoints = totalExpiredPoints
	return &this
}

// NewLoyaltySubLedgerWithDefaults instantiates a new LoyaltySubLedger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltySubLedgerWithDefaults() *LoyaltySubLedger {
	this := LoyaltySubLedger{}
	return &this
}

// GetTotal returns the Total field value
func (o *LoyaltySubLedger) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *LoyaltySubLedger) SetTotal(v float32) {
	o.Total = v
}

// GetTotalActivePoints returns the TotalActivePoints field value
func (o *LoyaltySubLedger) GetTotalActivePoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalActivePoints
}

// GetTotalActivePointsOk returns a tuple with the TotalActivePoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTotalActivePointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalActivePoints, true
}

// SetTotalActivePoints sets field value
func (o *LoyaltySubLedger) SetTotalActivePoints(v float32) {
	o.TotalActivePoints = v
}

// GetTotalPendingPoints returns the TotalPendingPoints field value
func (o *LoyaltySubLedger) GetTotalPendingPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPendingPoints
}

// GetTotalPendingPointsOk returns a tuple with the TotalPendingPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTotalPendingPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPendingPoints, true
}

// SetTotalPendingPoints sets field value
func (o *LoyaltySubLedger) SetTotalPendingPoints(v float32) {
	o.TotalPendingPoints = v
}

// GetTotalSpentPoints returns the TotalSpentPoints field value
func (o *LoyaltySubLedger) GetTotalSpentPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalSpentPoints
}

// GetTotalSpentPointsOk returns a tuple with the TotalSpentPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTotalSpentPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSpentPoints, true
}

// SetTotalSpentPoints sets field value
func (o *LoyaltySubLedger) SetTotalSpentPoints(v float32) {
	o.TotalSpentPoints = v
}

// GetTotalExpiredPoints returns the TotalExpiredPoints field value
func (o *LoyaltySubLedger) GetTotalExpiredPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalExpiredPoints
}

// GetTotalExpiredPointsOk returns a tuple with the TotalExpiredPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTotalExpiredPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalExpiredPoints, true
}

// SetTotalExpiredPoints sets field value
func (o *LoyaltySubLedger) SetTotalExpiredPoints(v float32) {
	o.TotalExpiredPoints = v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetTransactions() []LoyaltyLedgerEntry {
	if o == nil || o.Transactions == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetTransactionsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.Transactions == nil {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasTransactions() bool {
	if o != nil && o.Transactions != nil {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []LoyaltyLedgerEntry and assigns it to the Transactions field.
func (o *LoyaltySubLedger) SetTransactions(v []LoyaltyLedgerEntry) {
	o.Transactions = v
}

// GetExpiringPoints returns the ExpiringPoints field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetExpiringPoints() []LoyaltyLedgerEntry {
	if o == nil || o.ExpiringPoints == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return o.ExpiringPoints
}

// GetExpiringPointsOk returns a tuple with the ExpiringPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetExpiringPointsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.ExpiringPoints == nil {
		return nil, false
	}
	return o.ExpiringPoints, true
}

// HasExpiringPoints returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasExpiringPoints() bool {
	if o != nil && o.ExpiringPoints != nil {
		return true
	}

	return false
}

// SetExpiringPoints gets a reference to the given []LoyaltyLedgerEntry and assigns it to the ExpiringPoints field.
func (o *LoyaltySubLedger) SetExpiringPoints(v []LoyaltyLedgerEntry) {
	o.ExpiringPoints = v
}

// GetActivePoints returns the ActivePoints field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetActivePoints() []LoyaltyLedgerEntry {
	if o == nil || o.ActivePoints == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return o.ActivePoints
}

// GetActivePointsOk returns a tuple with the ActivePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetActivePointsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.ActivePoints == nil {
		return nil, false
	}
	return o.ActivePoints, true
}

// HasActivePoints returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasActivePoints() bool {
	if o != nil && o.ActivePoints != nil {
		return true
	}

	return false
}

// SetActivePoints gets a reference to the given []LoyaltyLedgerEntry and assigns it to the ActivePoints field.
func (o *LoyaltySubLedger) SetActivePoints(v []LoyaltyLedgerEntry) {
	o.ActivePoints = v
}

// GetPendingPoints returns the PendingPoints field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetPendingPoints() []LoyaltyLedgerEntry {
	if o == nil || o.PendingPoints == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return o.PendingPoints
}

// GetPendingPointsOk returns a tuple with the PendingPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetPendingPointsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.PendingPoints == nil {
		return nil, false
	}
	return o.PendingPoints, true
}

// HasPendingPoints returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasPendingPoints() bool {
	if o != nil && o.PendingPoints != nil {
		return true
	}

	return false
}

// SetPendingPoints gets a reference to the given []LoyaltyLedgerEntry and assigns it to the PendingPoints field.
func (o *LoyaltySubLedger) SetPendingPoints(v []LoyaltyLedgerEntry) {
	o.PendingPoints = v
}

// GetExpiredPoints returns the ExpiredPoints field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetExpiredPoints() []LoyaltyLedgerEntry {
	if o == nil || o.ExpiredPoints == nil {
		var ret []LoyaltyLedgerEntry
		return ret
	}
	return o.ExpiredPoints
}

// GetExpiredPointsOk returns a tuple with the ExpiredPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetExpiredPointsOk() ([]LoyaltyLedgerEntry, bool) {
	if o == nil || o.ExpiredPoints == nil {
		return nil, false
	}
	return o.ExpiredPoints, true
}

// HasExpiredPoints returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasExpiredPoints() bool {
	if o != nil && o.ExpiredPoints != nil {
		return true
	}

	return false
}

// SetExpiredPoints gets a reference to the given []LoyaltyLedgerEntry and assigns it to the ExpiredPoints field.
func (o *LoyaltySubLedger) SetExpiredPoints(v []LoyaltyLedgerEntry) {
	o.ExpiredPoints = v
}

// GetCurrentTier returns the CurrentTier field value if set, zero value otherwise.
func (o *LoyaltySubLedger) GetCurrentTier() Tier {
	if o == nil || o.CurrentTier == nil {
		var ret Tier
		return ret
	}
	return *o.CurrentTier
}

// GetCurrentTierOk returns a tuple with the CurrentTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltySubLedger) GetCurrentTierOk() (*Tier, bool) {
	if o == nil || o.CurrentTier == nil {
		return nil, false
	}
	return o.CurrentTier, true
}

// HasCurrentTier returns a boolean if a field has been set.
func (o *LoyaltySubLedger) HasCurrentTier() bool {
	if o != nil && o.CurrentTier != nil {
		return true
	}

	return false
}

// SetCurrentTier gets a reference to the given Tier and assigns it to the CurrentTier field.
func (o *LoyaltySubLedger) SetCurrentTier(v Tier) {
	o.CurrentTier = &v
}

func (o LoyaltySubLedger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["totalActivePoints"] = o.TotalActivePoints
	}
	if true {
		toSerialize["totalPendingPoints"] = o.TotalPendingPoints
	}
	if true {
		toSerialize["totalSpentPoints"] = o.TotalSpentPoints
	}
	if true {
		toSerialize["totalExpiredPoints"] = o.TotalExpiredPoints
	}
	if o.Transactions != nil {
		toSerialize["transactions"] = o.Transactions
	}
	if o.ExpiringPoints != nil {
		toSerialize["expiringPoints"] = o.ExpiringPoints
	}
	if o.ActivePoints != nil {
		toSerialize["activePoints"] = o.ActivePoints
	}
	if o.PendingPoints != nil {
		toSerialize["pendingPoints"] = o.PendingPoints
	}
	if o.ExpiredPoints != nil {
		toSerialize["expiredPoints"] = o.ExpiredPoints
	}
	if o.CurrentTier != nil {
		toSerialize["currentTier"] = o.CurrentTier
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltySubLedger struct {
	value *LoyaltySubLedger
	isSet bool
}

func (v NullableLoyaltySubLedger) Get() *LoyaltySubLedger {
	return v.value
}

func (v *NullableLoyaltySubLedger) Set(val *LoyaltySubLedger) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltySubLedger) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltySubLedger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltySubLedger(val *LoyaltySubLedger) *NullableLoyaltySubLedger {
	return &NullableLoyaltySubLedger{value: val, isSet: true}
}

func (v NullableLoyaltySubLedger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltySubLedger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


