/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// Giveaway 
type Giveaway struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The code value of this giveaway.
	Code string `json:"code"`
	// The ID of the pool to return giveaway codes from.
	PoolId int32 `json:"poolId"`
	// Timestamp at which point the giveaway becomes valid.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Timestamp at which point the giveaway becomes invalid.
	EndDate *time.Time `json:"endDate,omitempty"`
	// Arbitrary properties associated with this giveaway.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Indicates whether this giveaway code was given before.
	Used *bool `json:"used,omitempty"`
	// The ID of the Import which created this giveaway.
	ImportId *int32 `json:"importId,omitempty"`
}

// NewGiveaway instantiates a new Giveaway object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiveaway(id int32, created time.Time, code string, poolId int32) *Giveaway {
	this := Giveaway{}
	this.Id = id
	this.Created = created
	this.Code = code
	this.PoolId = poolId
	return &this
}

// NewGiveawayWithDefaults instantiates a new Giveaway object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiveawayWithDefaults() *Giveaway {
	this := Giveaway{}
	return &this
}

// GetId returns the Id field value
func (o *Giveaway) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Giveaway) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Giveaway) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Giveaway) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Giveaway) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Giveaway) SetCreated(v time.Time) {
	o.Created = v
}

// GetCode returns the Code field value
func (o *Giveaway) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Giveaway) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Giveaway) SetCode(v string) {
	o.Code = v
}

// GetPoolId returns the PoolId field value
func (o *Giveaway) GetPoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *Giveaway) GetPoolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *Giveaway) SetPoolId(v int32) {
	o.PoolId = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Giveaway) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Giveaway) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Giveaway) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Giveaway) GetEndDate() time.Time {
	if o == nil || o.EndDate == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetEndDateOk() (*time.Time, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Giveaway) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Giveaway) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Giveaway) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Giveaway) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *Giveaway) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *Giveaway) GetUsed() bool {
	if o == nil || o.Used == nil {
		var ret bool
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetUsedOk() (*bool, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *Giveaway) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given bool and assigns it to the Used field.
func (o *Giveaway) SetUsed(v bool) {
	o.Used = &v
}

// GetImportId returns the ImportId field value if set, zero value otherwise.
func (o *Giveaway) GetImportId() int32 {
	if o == nil || o.ImportId == nil {
		var ret int32
		return ret
	}
	return *o.ImportId
}

// GetImportIdOk returns a tuple with the ImportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Giveaway) GetImportIdOk() (*int32, bool) {
	if o == nil || o.ImportId == nil {
		return nil, false
	}
	return o.ImportId, true
}

// HasImportId returns a boolean if a field has been set.
func (o *Giveaway) HasImportId() bool {
	if o != nil && o.ImportId != nil {
		return true
	}

	return false
}

// SetImportId gets a reference to the given int32 and assigns it to the ImportId field.
func (o *Giveaway) SetImportId(v int32) {
	o.ImportId = &v
}

func (o Giveaway) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["poolId"] = o.PoolId
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	if o.ImportId != nil {
		toSerialize["importId"] = o.ImportId
	}
	return json.Marshal(toSerialize)
}

type NullableGiveaway struct {
	value *Giveaway
	isSet bool
}

func (v NullableGiveaway) Get() *Giveaway {
	return v.value
}

func (v *NullableGiveaway) Set(val *Giveaway) {
	v.value = val
	v.isSet = true
}

func (v NullableGiveaway) IsSet() bool {
	return v.isSet
}

func (v *NullableGiveaway) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiveaway(val *Giveaway) *NullableGiveaway {
	return &NullableGiveaway{value: val, isSet: true}
}

func (v NullableGiveaway) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiveaway) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


