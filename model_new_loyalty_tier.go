/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewLoyaltyTier A tier in a loyalty program.
type NewLoyaltyTier struct {
	// The name of the tier
	Name string `json:"name"`
	// The minimum amount of points required to be eligible for the tier.
	MinPoints float32 `json:"minPoints"`
}

// NewNewLoyaltyTier instantiates a new NewLoyaltyTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewLoyaltyTier(name string, minPoints float32) *NewLoyaltyTier {
	this := NewLoyaltyTier{}
	this.Name = name
	this.MinPoints = minPoints
	return &this
}

// NewNewLoyaltyTierWithDefaults instantiates a new NewLoyaltyTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewLoyaltyTierWithDefaults() *NewLoyaltyTier {
	this := NewLoyaltyTier{}
	return &this
}

// GetName returns the Name field value
func (o *NewLoyaltyTier) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyTier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewLoyaltyTier) SetName(v string) {
	o.Name = v
}

// GetMinPoints returns the MinPoints field value
func (o *NewLoyaltyTier) GetMinPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinPoints
}

// GetMinPointsOk returns a tuple with the MinPoints field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyTier) GetMinPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinPoints, true
}

// SetMinPoints sets field value
func (o *NewLoyaltyTier) SetMinPoints(v float32) {
	o.MinPoints = v
}

func (o NewLoyaltyTier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["minPoints"] = o.MinPoints
	}
	return json.Marshal(toSerialize)
}

type NullableNewLoyaltyTier struct {
	value *NewLoyaltyTier
	isSet bool
}

func (v NullableNewLoyaltyTier) Get() *NewLoyaltyTier {
	return v.value
}

func (v *NullableNewLoyaltyTier) Set(val *NewLoyaltyTier) {
	v.value = val
	v.isSet = true
}

func (v NullableNewLoyaltyTier) IsSet() bool {
	return v.isSet
}

func (v *NullableNewLoyaltyTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewLoyaltyTier(val *NewLoyaltyTier) *NullableNewLoyaltyTier {
	return &NullableNewLoyaltyTier{value: val, isSet: true}
}

func (v NullableNewLoyaltyTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewLoyaltyTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


