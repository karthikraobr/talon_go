/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// SamlLoginEndpoint struct for SamlLoginEndpoint
type SamlLoginEndpoint struct {
	// ID of the SAML service.
	Name string `json:"name"`
	// Single Sign-On URL.
	LoginURL string `json:"loginURL"`
}

// NewSamlLoginEndpoint instantiates a new SamlLoginEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlLoginEndpoint(name string, loginURL string) *SamlLoginEndpoint {
	this := SamlLoginEndpoint{}
	this.Name = name
	this.LoginURL = loginURL
	return &this
}

// NewSamlLoginEndpointWithDefaults instantiates a new SamlLoginEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlLoginEndpointWithDefaults() *SamlLoginEndpoint {
	this := SamlLoginEndpoint{}
	return &this
}

// GetName returns the Name field value
func (o *SamlLoginEndpoint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SamlLoginEndpoint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SamlLoginEndpoint) SetName(v string) {
	o.Name = v
}

// GetLoginURL returns the LoginURL field value
func (o *SamlLoginEndpoint) GetLoginURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoginURL
}

// GetLoginURLOk returns a tuple with the LoginURL field value
// and a boolean to check if the value has been set.
func (o *SamlLoginEndpoint) GetLoginURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoginURL, true
}

// SetLoginURL sets field value
func (o *SamlLoginEndpoint) SetLoginURL(v string) {
	o.LoginURL = v
}

func (o SamlLoginEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["loginURL"] = o.LoginURL
	}
	return json.Marshal(toSerialize)
}

type NullableSamlLoginEndpoint struct {
	value *SamlLoginEndpoint
	isSet bool
}

func (v NullableSamlLoginEndpoint) Get() *SamlLoginEndpoint {
	return v.value
}

func (v *NullableSamlLoginEndpoint) Set(val *SamlLoginEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlLoginEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlLoginEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlLoginEndpoint(val *SamlLoginEndpoint) *NullableSamlLoginEndpoint {
	return &NullableSamlLoginEndpoint{value: val, isSet: true}
}

func (v NullableSamlLoginEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlLoginEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


