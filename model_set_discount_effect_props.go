/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// SetDiscountEffectProps The properties specific to the \"setDiscount\" effect. This gets triggered whenever a validated rule contained a \"set discount\" effect. This is a discount that should be applied on the scope of defined with it.
type SetDiscountEffectProps struct {
	// The name/description of this discount.
	Name string `json:"name"`
	// The total monetary value of the discount.
	Value float32 `json:"value"`
	// The scope which the discount was applied on, can be one of (cartItems,additionalCosts,sessionTotal).
	Scope *string `json:"scope,omitempty"`
	// The original value of the discount.
	DesiredValue *float32 `json:"desiredValue,omitempty"`
}

// NewSetDiscountEffectProps instantiates a new SetDiscountEffectProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetDiscountEffectProps(name string, value float32) *SetDiscountEffectProps {
	this := SetDiscountEffectProps{}
	this.Name = name
	this.Value = value
	return &this
}

// NewSetDiscountEffectPropsWithDefaults instantiates a new SetDiscountEffectProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetDiscountEffectPropsWithDefaults() *SetDiscountEffectProps {
	this := SetDiscountEffectProps{}
	return &this
}

// GetName returns the Name field value
func (o *SetDiscountEffectProps) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SetDiscountEffectProps) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SetDiscountEffectProps) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *SetDiscountEffectProps) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SetDiscountEffectProps) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SetDiscountEffectProps) SetValue(v float32) {
	o.Value = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SetDiscountEffectProps) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountEffectProps) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SetDiscountEffectProps) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SetDiscountEffectProps) SetScope(v string) {
	o.Scope = &v
}

// GetDesiredValue returns the DesiredValue field value if set, zero value otherwise.
func (o *SetDiscountEffectProps) GetDesiredValue() float32 {
	if o == nil || o.DesiredValue == nil {
		var ret float32
		return ret
	}
	return *o.DesiredValue
}

// GetDesiredValueOk returns a tuple with the DesiredValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountEffectProps) GetDesiredValueOk() (*float32, bool) {
	if o == nil || o.DesiredValue == nil {
		return nil, false
	}
	return o.DesiredValue, true
}

// HasDesiredValue returns a boolean if a field has been set.
func (o *SetDiscountEffectProps) HasDesiredValue() bool {
	if o != nil && o.DesiredValue != nil {
		return true
	}

	return false
}

// SetDesiredValue gets a reference to the given float32 and assigns it to the DesiredValue field.
func (o *SetDiscountEffectProps) SetDesiredValue(v float32) {
	o.DesiredValue = &v
}

func (o SetDiscountEffectProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.DesiredValue != nil {
		toSerialize["desiredValue"] = o.DesiredValue
	}
	return json.Marshal(toSerialize)
}

type NullableSetDiscountEffectProps struct {
	value *SetDiscountEffectProps
	isSet bool
}

func (v NullableSetDiscountEffectProps) Get() *SetDiscountEffectProps {
	return v.value
}

func (v *NullableSetDiscountEffectProps) Set(val *SetDiscountEffectProps) {
	v.value = val
	v.isSet = true
}

func (v NullableSetDiscountEffectProps) IsSet() bool {
	return v.isSet
}

func (v *NullableSetDiscountEffectProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetDiscountEffectProps(val *SetDiscountEffectProps) *NullableSetDiscountEffectProps {
	return &NullableSetDiscountEffectProps{value: val, isSet: true}
}

func (v NullableSetDiscountEffectProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetDiscountEffectProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


