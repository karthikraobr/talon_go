/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// SetDiscountPerItemEffectProps The properties specific to the `setDiscountPerItem` effect, triggered whenever a validated rule contained a \"set per item discount\" effect. This is a discount that will be applied either on a specific item, on a specific item + additional cost or on all additional costs per item. This depends on the chosen scope. 
type SetDiscountPerItemEffectProps struct {
	// The name of the discount. Contains a hashtag character indicating the index of the position of the item the discount applies to. It is identical to the value of the `position` property. 
	Name string `json:"name"`
	// The total monetary value of the discount.
	Value float32 `json:"value"`
	// The index of the item in the cart items list on which this discount should be applied.
	Position float32 `json:"position"`
	// Only used when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled. Indicates which item the discount applies to for cart items with `quantity` > 1. 
	SubPosition *float32 `json:"subPosition,omitempty"`
	// The original value of the discount.
	DesiredValue *float32 `json:"desiredValue,omitempty"`
	// The scope of the discount: - `additionalCosts`: The discount applies to all the additional costs of the item. - `itemTotal`: The discount applies to the price of the item + the additional costs of the item. - `price`: The discount applies to the price of the item. 
	Scope *string `json:"scope,omitempty"`
	// The total discount given if this effect is a result of a prorated discount.
	TotalDiscount *float32 `json:"totalDiscount,omitempty"`
	// The original total discount to give if this effect is a result of a prorated discount.
	DesiredTotalDiscount *float32 `json:"desiredTotalDiscount,omitempty"`
	// The position of the bundle in a list of item bundles created from the same bundle definition.
	BundleIndex *int32 `json:"bundleIndex,omitempty"`
	// The name of the bundle binding.
	BundleName *string `json:"bundleName,omitempty"`
}

// NewSetDiscountPerItemEffectProps instantiates a new SetDiscountPerItemEffectProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetDiscountPerItemEffectProps(name string, value float32, position float32) *SetDiscountPerItemEffectProps {
	this := SetDiscountPerItemEffectProps{}
	this.Name = name
	this.Value = value
	this.Position = position
	return &this
}

// NewSetDiscountPerItemEffectPropsWithDefaults instantiates a new SetDiscountPerItemEffectProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetDiscountPerItemEffectPropsWithDefaults() *SetDiscountPerItemEffectProps {
	this := SetDiscountPerItemEffectProps{}
	return &this
}

// GetName returns the Name field value
func (o *SetDiscountPerItemEffectProps) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SetDiscountPerItemEffectProps) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *SetDiscountPerItemEffectProps) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SetDiscountPerItemEffectProps) SetValue(v float32) {
	o.Value = v
}

// GetPosition returns the Position field value
func (o *SetDiscountPerItemEffectProps) GetPosition() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetPositionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *SetDiscountPerItemEffectProps) SetPosition(v float32) {
	o.Position = v
}

// GetSubPosition returns the SubPosition field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetSubPosition() float32 {
	if o == nil || o.SubPosition == nil {
		var ret float32
		return ret
	}
	return *o.SubPosition
}

// GetSubPositionOk returns a tuple with the SubPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetSubPositionOk() (*float32, bool) {
	if o == nil || o.SubPosition == nil {
		return nil, false
	}
	return o.SubPosition, true
}

// HasSubPosition returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasSubPosition() bool {
	if o != nil && o.SubPosition != nil {
		return true
	}

	return false
}

// SetSubPosition gets a reference to the given float32 and assigns it to the SubPosition field.
func (o *SetDiscountPerItemEffectProps) SetSubPosition(v float32) {
	o.SubPosition = &v
}

// GetDesiredValue returns the DesiredValue field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetDesiredValue() float32 {
	if o == nil || o.DesiredValue == nil {
		var ret float32
		return ret
	}
	return *o.DesiredValue
}

// GetDesiredValueOk returns a tuple with the DesiredValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetDesiredValueOk() (*float32, bool) {
	if o == nil || o.DesiredValue == nil {
		return nil, false
	}
	return o.DesiredValue, true
}

// HasDesiredValue returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasDesiredValue() bool {
	if o != nil && o.DesiredValue != nil {
		return true
	}

	return false
}

// SetDesiredValue gets a reference to the given float32 and assigns it to the DesiredValue field.
func (o *SetDiscountPerItemEffectProps) SetDesiredValue(v float32) {
	o.DesiredValue = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SetDiscountPerItemEffectProps) SetScope(v string) {
	o.Scope = &v
}

// GetTotalDiscount returns the TotalDiscount field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetTotalDiscount() float32 {
	if o == nil || o.TotalDiscount == nil {
		var ret float32
		return ret
	}
	return *o.TotalDiscount
}

// GetTotalDiscountOk returns a tuple with the TotalDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetTotalDiscountOk() (*float32, bool) {
	if o == nil || o.TotalDiscount == nil {
		return nil, false
	}
	return o.TotalDiscount, true
}

// HasTotalDiscount returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasTotalDiscount() bool {
	if o != nil && o.TotalDiscount != nil {
		return true
	}

	return false
}

// SetTotalDiscount gets a reference to the given float32 and assigns it to the TotalDiscount field.
func (o *SetDiscountPerItemEffectProps) SetTotalDiscount(v float32) {
	o.TotalDiscount = &v
}

// GetDesiredTotalDiscount returns the DesiredTotalDiscount field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetDesiredTotalDiscount() float32 {
	if o == nil || o.DesiredTotalDiscount == nil {
		var ret float32
		return ret
	}
	return *o.DesiredTotalDiscount
}

// GetDesiredTotalDiscountOk returns a tuple with the DesiredTotalDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetDesiredTotalDiscountOk() (*float32, bool) {
	if o == nil || o.DesiredTotalDiscount == nil {
		return nil, false
	}
	return o.DesiredTotalDiscount, true
}

// HasDesiredTotalDiscount returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasDesiredTotalDiscount() bool {
	if o != nil && o.DesiredTotalDiscount != nil {
		return true
	}

	return false
}

// SetDesiredTotalDiscount gets a reference to the given float32 and assigns it to the DesiredTotalDiscount field.
func (o *SetDiscountPerItemEffectProps) SetDesiredTotalDiscount(v float32) {
	o.DesiredTotalDiscount = &v
}

// GetBundleIndex returns the BundleIndex field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetBundleIndex() int32 {
	if o == nil || o.BundleIndex == nil {
		var ret int32
		return ret
	}
	return *o.BundleIndex
}

// GetBundleIndexOk returns a tuple with the BundleIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetBundleIndexOk() (*int32, bool) {
	if o == nil || o.BundleIndex == nil {
		return nil, false
	}
	return o.BundleIndex, true
}

// HasBundleIndex returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasBundleIndex() bool {
	if o != nil && o.BundleIndex != nil {
		return true
	}

	return false
}

// SetBundleIndex gets a reference to the given int32 and assigns it to the BundleIndex field.
func (o *SetDiscountPerItemEffectProps) SetBundleIndex(v int32) {
	o.BundleIndex = &v
}

// GetBundleName returns the BundleName field value if set, zero value otherwise.
func (o *SetDiscountPerItemEffectProps) GetBundleName() string {
	if o == nil || o.BundleName == nil {
		var ret string
		return ret
	}
	return *o.BundleName
}

// GetBundleNameOk returns a tuple with the BundleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetDiscountPerItemEffectProps) GetBundleNameOk() (*string, bool) {
	if o == nil || o.BundleName == nil {
		return nil, false
	}
	return o.BundleName, true
}

// HasBundleName returns a boolean if a field has been set.
func (o *SetDiscountPerItemEffectProps) HasBundleName() bool {
	if o != nil && o.BundleName != nil {
		return true
	}

	return false
}

// SetBundleName gets a reference to the given string and assigns it to the BundleName field.
func (o *SetDiscountPerItemEffectProps) SetBundleName(v string) {
	o.BundleName = &v
}

func (o SetDiscountPerItemEffectProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["position"] = o.Position
	}
	if o.SubPosition != nil {
		toSerialize["subPosition"] = o.SubPosition
	}
	if o.DesiredValue != nil {
		toSerialize["desiredValue"] = o.DesiredValue
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.TotalDiscount != nil {
		toSerialize["totalDiscount"] = o.TotalDiscount
	}
	if o.DesiredTotalDiscount != nil {
		toSerialize["desiredTotalDiscount"] = o.DesiredTotalDiscount
	}
	if o.BundleIndex != nil {
		toSerialize["bundleIndex"] = o.BundleIndex
	}
	if o.BundleName != nil {
		toSerialize["bundleName"] = o.BundleName
	}
	return json.Marshal(toSerialize)
}

type NullableSetDiscountPerItemEffectProps struct {
	value *SetDiscountPerItemEffectProps
	isSet bool
}

func (v NullableSetDiscountPerItemEffectProps) Get() *SetDiscountPerItemEffectProps {
	return v.value
}

func (v *NullableSetDiscountPerItemEffectProps) Set(val *SetDiscountPerItemEffectProps) {
	v.value = val
	v.isSet = true
}

func (v NullableSetDiscountPerItemEffectProps) IsSet() bool {
	return v.isSet
}

func (v *NullableSetDiscountPerItemEffectProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetDiscountPerItemEffectProps(val *SetDiscountPerItemEffectProps) *NullableSetDiscountPerItemEffectProps {
	return &NullableSetDiscountPerItemEffectProps{value: val, isSet: true}
}

func (v NullableSetDiscountPerItemEffectProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetDiscountPerItemEffectProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


