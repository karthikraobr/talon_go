/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewNotificationWebhook struct for NewNotificationWebhook
type NewNotificationWebhook struct {
	// API url for this notification webhook.
	Url string `json:"url"`
	// List of API HTTP headers for this notification webhook.
	Headers []string `json:"headers"`
}

// NewNewNotificationWebhook instantiates a new NewNotificationWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewNotificationWebhook(url string, headers []string) *NewNotificationWebhook {
	this := NewNotificationWebhook{}
	this.Url = url
	this.Headers = headers
	return &this
}

// NewNewNotificationWebhookWithDefaults instantiates a new NewNotificationWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewNotificationWebhookWithDefaults() *NewNotificationWebhook {
	this := NewNotificationWebhook{}
	return &this
}

// GetUrl returns the Url field value
func (o *NewNotificationWebhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NewNotificationWebhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NewNotificationWebhook) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *NewNotificationWebhook) GetHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *NewNotificationWebhook) GetHeadersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *NewNotificationWebhook) SetHeaders(v []string) {
	o.Headers = v
}

func (o NewNotificationWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["headers"] = o.Headers
	}
	return json.Marshal(toSerialize)
}

type NullableNewNotificationWebhook struct {
	value *NewNotificationWebhook
	isSet bool
}

func (v NullableNewNotificationWebhook) Get() *NewNotificationWebhook {
	return v.value
}

func (v *NullableNewNotificationWebhook) Set(val *NewNotificationWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableNewNotificationWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableNewNotificationWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewNotificationWebhook(val *NewNotificationWebhook) *NullableNewNotificationWebhook {
	return &NullableNewNotificationWebhook{value: val, isSet: true}
}

func (v NullableNewNotificationWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewNotificationWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


