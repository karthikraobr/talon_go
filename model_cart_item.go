/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CartItem struct for CartItem
type CartItem struct {
	// Name of item.
	Name string `json:"name"`
	// Stock keeping unit of item.
	Sku string `json:"sku"`
	// Quantity of item. **Important:** If you enabled [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items), the quantity is always one and the same cart item might receive multiple per-item discounts. Ensure you can process multiple discounts on one cart item correctly. 
	Quantity int32 `json:"quantity"`
	// Number of returned items, calculated internally based on returns of this item.
	ReturnedQuantity *int32 `json:"returnedQuantity,omitempty"`
	// Remaining quantity of the item, calculated internally based on returns of this item.
	RemainingQuantity *int32 `json:"remainingQuantity,omitempty"`
	// Price of item.
	Price float32 `json:"price"`
	// Type, group or model of the item.
	Category *string `json:"category,omitempty"`
	// Weight of item in grams.
	Weight *float32 `json:"weight,omitempty"`
	// Height of item in mm.
	Height *float32 `json:"height,omitempty"`
	// Width of item in mm.
	Width *float32 `json:"width,omitempty"`
	// Length of item in mm.
	Length *float32 `json:"length,omitempty"`
	// Position of the Cart Item in the Cart (calculated internally).
	Position *float32 `json:"position,omitempty"`
	// Use this property to set a value for the attributes of your choice. [Attributes](https://docs.talon.one/docs/dev/concepts/attributes) represent any information to attach to this cart item.  Custom _cart item_ attributes must be created in the Campaign Manager before you set them with this property. 
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Use this property to set a value for the additional costs of this item, such as a shipping cost. They must be created in the Campaign Manager before you set them with this property. See [Managing additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs/). 
	AdditionalCosts *map[string]AdditionalCost `json:"additionalCosts,omitempty"`
}

// NewCartItem instantiates a new CartItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartItem(name string, sku string, quantity int32, price float32) *CartItem {
	this := CartItem{}
	this.Name = name
	this.Sku = sku
	this.Quantity = quantity
	this.Price = price
	return &this
}

// NewCartItemWithDefaults instantiates a new CartItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartItemWithDefaults() *CartItem {
	this := CartItem{}
	return &this
}

// GetName returns the Name field value
func (o *CartItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CartItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CartItem) SetName(v string) {
	o.Name = v
}

// GetSku returns the Sku field value
func (o *CartItem) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *CartItem) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *CartItem) SetSku(v string) {
	o.Sku = v
}

// GetQuantity returns the Quantity field value
func (o *CartItem) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *CartItem) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *CartItem) SetQuantity(v int32) {
	o.Quantity = v
}

// GetReturnedQuantity returns the ReturnedQuantity field value if set, zero value otherwise.
func (o *CartItem) GetReturnedQuantity() int32 {
	if o == nil || o.ReturnedQuantity == nil {
		var ret int32
		return ret
	}
	return *o.ReturnedQuantity
}

// GetReturnedQuantityOk returns a tuple with the ReturnedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetReturnedQuantityOk() (*int32, bool) {
	if o == nil || o.ReturnedQuantity == nil {
		return nil, false
	}
	return o.ReturnedQuantity, true
}

// HasReturnedQuantity returns a boolean if a field has been set.
func (o *CartItem) HasReturnedQuantity() bool {
	if o != nil && o.ReturnedQuantity != nil {
		return true
	}

	return false
}

// SetReturnedQuantity gets a reference to the given int32 and assigns it to the ReturnedQuantity field.
func (o *CartItem) SetReturnedQuantity(v int32) {
	o.ReturnedQuantity = &v
}

// GetRemainingQuantity returns the RemainingQuantity field value if set, zero value otherwise.
func (o *CartItem) GetRemainingQuantity() int32 {
	if o == nil || o.RemainingQuantity == nil {
		var ret int32
		return ret
	}
	return *o.RemainingQuantity
}

// GetRemainingQuantityOk returns a tuple with the RemainingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetRemainingQuantityOk() (*int32, bool) {
	if o == nil || o.RemainingQuantity == nil {
		return nil, false
	}
	return o.RemainingQuantity, true
}

// HasRemainingQuantity returns a boolean if a field has been set.
func (o *CartItem) HasRemainingQuantity() bool {
	if o != nil && o.RemainingQuantity != nil {
		return true
	}

	return false
}

// SetRemainingQuantity gets a reference to the given int32 and assigns it to the RemainingQuantity field.
func (o *CartItem) SetRemainingQuantity(v int32) {
	o.RemainingQuantity = &v
}

// GetPrice returns the Price field value
func (o *CartItem) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *CartItem) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *CartItem) SetPrice(v float32) {
	o.Price = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CartItem) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CartItem) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *CartItem) SetCategory(v string) {
	o.Category = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *CartItem) GetWeight() float32 {
	if o == nil || o.Weight == nil {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetWeightOk() (*float32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *CartItem) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *CartItem) SetWeight(v float32) {
	o.Weight = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *CartItem) GetHeight() float32 {
	if o == nil || o.Height == nil {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetHeightOk() (*float32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *CartItem) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *CartItem) SetHeight(v float32) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *CartItem) GetWidth() float32 {
	if o == nil || o.Width == nil {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetWidthOk() (*float32, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *CartItem) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *CartItem) SetWidth(v float32) {
	o.Width = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *CartItem) GetLength() float32 {
	if o == nil || o.Length == nil {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetLengthOk() (*float32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *CartItem) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *CartItem) SetLength(v float32) {
	o.Length = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CartItem) GetPosition() float32 {
	if o == nil || o.Position == nil {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetPositionOk() (*float32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CartItem) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *CartItem) SetPosition(v float32) {
	o.Position = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CartItem) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CartItem) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *CartItem) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetAdditionalCosts returns the AdditionalCosts field value if set, zero value otherwise.
func (o *CartItem) GetAdditionalCosts() map[string]AdditionalCost {
	if o == nil || o.AdditionalCosts == nil {
		var ret map[string]AdditionalCost
		return ret
	}
	return *o.AdditionalCosts
}

// GetAdditionalCostsOk returns a tuple with the AdditionalCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetAdditionalCostsOk() (*map[string]AdditionalCost, bool) {
	if o == nil || o.AdditionalCosts == nil {
		return nil, false
	}
	return o.AdditionalCosts, true
}

// HasAdditionalCosts returns a boolean if a field has been set.
func (o *CartItem) HasAdditionalCosts() bool {
	if o != nil && o.AdditionalCosts != nil {
		return true
	}

	return false
}

// SetAdditionalCosts gets a reference to the given map[string]AdditionalCost and assigns it to the AdditionalCosts field.
func (o *CartItem) SetAdditionalCosts(v map[string]AdditionalCost) {
	o.AdditionalCosts = &v
}

func (o CartItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["sku"] = o.Sku
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	if o.ReturnedQuantity != nil {
		toSerialize["returnedQuantity"] = o.ReturnedQuantity
	}
	if o.RemainingQuantity != nil {
		toSerialize["remainingQuantity"] = o.RemainingQuantity
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	if o.Length != nil {
		toSerialize["length"] = o.Length
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.AdditionalCosts != nil {
		toSerialize["additionalCosts"] = o.AdditionalCosts
	}
	return json.Marshal(toSerialize)
}

type NullableCartItem struct {
	value *CartItem
	isSet bool
}

func (v NullableCartItem) Get() *CartItem {
	return v.value
}

func (v *NullableCartItem) Set(val *CartItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCartItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCartItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartItem(val *CartItem) *NullableCartItem {
	return &NullableCartItem{value: val, isSet: true}
}

func (v NullableCartItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


