/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// AcceptReferralEffectProps The properties specific to the \"acceptReferral\" effect. TThis gets triggered whenever the referral code is valid and all other conditions in the rules of its campaign are met.
type AcceptReferralEffectProps struct {
	// The referral code that was accepted.
	Value string `json:"value"`
}

// NewAcceptReferralEffectProps instantiates a new AcceptReferralEffectProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptReferralEffectProps(value string) *AcceptReferralEffectProps {
	this := AcceptReferralEffectProps{}
	this.Value = value
	return &this
}

// NewAcceptReferralEffectPropsWithDefaults instantiates a new AcceptReferralEffectProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptReferralEffectPropsWithDefaults() *AcceptReferralEffectProps {
	this := AcceptReferralEffectProps{}
	return &this
}

// GetValue returns the Value field value
func (o *AcceptReferralEffectProps) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AcceptReferralEffectProps) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AcceptReferralEffectProps) SetValue(v string) {
	o.Value = v
}

func (o AcceptReferralEffectProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAcceptReferralEffectProps struct {
	value *AcceptReferralEffectProps
	isSet bool
}

func (v NullableAcceptReferralEffectProps) Get() *AcceptReferralEffectProps {
	return v.value
}

func (v *NullableAcceptReferralEffectProps) Set(val *AcceptReferralEffectProps) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptReferralEffectProps) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptReferralEffectProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptReferralEffectProps(val *AcceptReferralEffectProps) *NullableAcceptReferralEffectProps {
	return &NullableAcceptReferralEffectProps{value: val, isSet: true}
}

func (v NullableAcceptReferralEffectProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptReferralEffectProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


