/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// AudienceAnalytics The audiences and their members count.
type AudienceAnalytics struct {
	// The ID of the audience.
	AudienceId *int32 `json:"audienceId,omitempty"`
	// The count of members under a single audience.
	MembersCount *int32 `json:"membersCount,omitempty"`
}

// NewAudienceAnalytics instantiates a new AudienceAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceAnalytics() *AudienceAnalytics {
	this := AudienceAnalytics{}
	return &this
}

// NewAudienceAnalyticsWithDefaults instantiates a new AudienceAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceAnalyticsWithDefaults() *AudienceAnalytics {
	this := AudienceAnalytics{}
	return &this
}

// GetAudienceId returns the AudienceId field value if set, zero value otherwise.
func (o *AudienceAnalytics) GetAudienceId() int32 {
	if o == nil || o.AudienceId == nil {
		var ret int32
		return ret
	}
	return *o.AudienceId
}

// GetAudienceIdOk returns a tuple with the AudienceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceAnalytics) GetAudienceIdOk() (*int32, bool) {
	if o == nil || o.AudienceId == nil {
		return nil, false
	}
	return o.AudienceId, true
}

// HasAudienceId returns a boolean if a field has been set.
func (o *AudienceAnalytics) HasAudienceId() bool {
	if o != nil && o.AudienceId != nil {
		return true
	}

	return false
}

// SetAudienceId gets a reference to the given int32 and assigns it to the AudienceId field.
func (o *AudienceAnalytics) SetAudienceId(v int32) {
	o.AudienceId = &v
}

// GetMembersCount returns the MembersCount field value if set, zero value otherwise.
func (o *AudienceAnalytics) GetMembersCount() int32 {
	if o == nil || o.MembersCount == nil {
		var ret int32
		return ret
	}
	return *o.MembersCount
}

// GetMembersCountOk returns a tuple with the MembersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceAnalytics) GetMembersCountOk() (*int32, bool) {
	if o == nil || o.MembersCount == nil {
		return nil, false
	}
	return o.MembersCount, true
}

// HasMembersCount returns a boolean if a field has been set.
func (o *AudienceAnalytics) HasMembersCount() bool {
	if o != nil && o.MembersCount != nil {
		return true
	}

	return false
}

// SetMembersCount gets a reference to the given int32 and assigns it to the MembersCount field.
func (o *AudienceAnalytics) SetMembersCount(v int32) {
	o.MembersCount = &v
}

func (o AudienceAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AudienceId != nil {
		toSerialize["audienceId"] = o.AudienceId
	}
	if o.MembersCount != nil {
		toSerialize["membersCount"] = o.MembersCount
	}
	return json.Marshal(toSerialize)
}

type NullableAudienceAnalytics struct {
	value *AudienceAnalytics
	isSet bool
}

func (v NullableAudienceAnalytics) Get() *AudienceAnalytics {
	return v.value
}

func (v *NullableAudienceAnalytics) Set(val *AudienceAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceAnalytics(val *AudienceAnalytics) *NullableAudienceAnalytics {
	return &NullableAudienceAnalytics{value: val, isSet: true}
}

func (v NullableAudienceAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


