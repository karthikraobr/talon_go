/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// LoyaltyPoints Points to add or deduct.
type LoyaltyPoints struct {
	// Amount of loyalty points.
	Points float32 `json:"points"`
	// Allows to specify a name for the addition or deduction.
	Name *string `json:"name,omitempty"`
	// Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package).
	ValidityDuration *string `json:"validityDuration,omitempty"`
	// Indicates the amount of time before the points are considered valid. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package).
	PendingDuration *string `json:"pendingDuration,omitempty"`
	// This specifies if we are adding loyalty points to the main ledger or a subledger.
	SubLedgerID *string `json:"subLedgerID,omitempty"`
}

// NewLoyaltyPoints instantiates a new LoyaltyPoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyPoints(points float32) *LoyaltyPoints {
	this := LoyaltyPoints{}
	this.Points = points
	return &this
}

// NewLoyaltyPointsWithDefaults instantiates a new LoyaltyPoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyPointsWithDefaults() *LoyaltyPoints {
	this := LoyaltyPoints{}
	return &this
}

// GetPoints returns the Points field value
func (o *LoyaltyPoints) GetPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Points, true
}

// SetPoints sets field value
func (o *LoyaltyPoints) SetPoints(v float32) {
	o.Points = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LoyaltyPoints) SetName(v string) {
	o.Name = &v
}

// GetValidityDuration returns the ValidityDuration field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetValidityDuration() string {
	if o == nil || o.ValidityDuration == nil {
		var ret string
		return ret
	}
	return *o.ValidityDuration
}

// GetValidityDurationOk returns a tuple with the ValidityDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetValidityDurationOk() (*string, bool) {
	if o == nil || o.ValidityDuration == nil {
		return nil, false
	}
	return o.ValidityDuration, true
}

// HasValidityDuration returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasValidityDuration() bool {
	if o != nil && o.ValidityDuration != nil {
		return true
	}

	return false
}

// SetValidityDuration gets a reference to the given string and assigns it to the ValidityDuration field.
func (o *LoyaltyPoints) SetValidityDuration(v string) {
	o.ValidityDuration = &v
}

// GetPendingDuration returns the PendingDuration field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetPendingDuration() string {
	if o == nil || o.PendingDuration == nil {
		var ret string
		return ret
	}
	return *o.PendingDuration
}

// GetPendingDurationOk returns a tuple with the PendingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetPendingDurationOk() (*string, bool) {
	if o == nil || o.PendingDuration == nil {
		return nil, false
	}
	return o.PendingDuration, true
}

// HasPendingDuration returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasPendingDuration() bool {
	if o != nil && o.PendingDuration != nil {
		return true
	}

	return false
}

// SetPendingDuration gets a reference to the given string and assigns it to the PendingDuration field.
func (o *LoyaltyPoints) SetPendingDuration(v string) {
	o.PendingDuration = &v
}

// GetSubLedgerID returns the SubLedgerID field value if set, zero value otherwise.
func (o *LoyaltyPoints) GetSubLedgerID() string {
	if o == nil || o.SubLedgerID == nil {
		var ret string
		return ret
	}
	return *o.SubLedgerID
}

// GetSubLedgerIDOk returns a tuple with the SubLedgerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyPoints) GetSubLedgerIDOk() (*string, bool) {
	if o == nil || o.SubLedgerID == nil {
		return nil, false
	}
	return o.SubLedgerID, true
}

// HasSubLedgerID returns a boolean if a field has been set.
func (o *LoyaltyPoints) HasSubLedgerID() bool {
	if o != nil && o.SubLedgerID != nil {
		return true
	}

	return false
}

// SetSubLedgerID gets a reference to the given string and assigns it to the SubLedgerID field.
func (o *LoyaltyPoints) SetSubLedgerID(v string) {
	o.SubLedgerID = &v
}

func (o LoyaltyPoints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["points"] = o.Points
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ValidityDuration != nil {
		toSerialize["validityDuration"] = o.ValidityDuration
	}
	if o.PendingDuration != nil {
		toSerialize["pendingDuration"] = o.PendingDuration
	}
	if o.SubLedgerID != nil {
		toSerialize["subLedgerID"] = o.SubLedgerID
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyPoints struct {
	value *LoyaltyPoints
	isSet bool
}

func (v NullableLoyaltyPoints) Get() *LoyaltyPoints {
	return v.value
}

func (v *NullableLoyaltyPoints) Set(val *LoyaltyPoints) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyPoints) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyPoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyPoints(val *LoyaltyPoints) *NullableLoyaltyPoints {
	return &NullableLoyaltyPoints{value: val, isSet: true}
}

func (v NullableLoyaltyPoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyPoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


