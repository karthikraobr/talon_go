/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// ApplicationEntity struct for ApplicationEntity
type ApplicationEntity struct {
	// The ID of the application that owns this entity.
	ApplicationId int32 `json:"applicationId"`
}

// NewApplicationEntity instantiates a new ApplicationEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationEntity(applicationId int32) *ApplicationEntity {
	this := ApplicationEntity{}
	this.ApplicationId = applicationId
	return &this
}

// NewApplicationEntityWithDefaults instantiates a new ApplicationEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationEntityWithDefaults() *ApplicationEntity {
	this := ApplicationEntity{}
	return &this
}

// GetApplicationId returns the ApplicationId field value
func (o *ApplicationEntity) GetApplicationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *ApplicationEntity) GetApplicationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *ApplicationEntity) SetApplicationId(v int32) {
	o.ApplicationId = v
}

func (o ApplicationEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["applicationId"] = o.ApplicationId
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationEntity struct {
	value *ApplicationEntity
	isSet bool
}

func (v NullableApplicationEntity) Get() *ApplicationEntity {
	return v.value
}

func (v *NullableApplicationEntity) Set(val *ApplicationEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationEntity(val *ApplicationEntity) *NullableApplicationEntity {
	return &NullableApplicationEntity{value: val, isSet: true}
}

func (v NullableApplicationEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


