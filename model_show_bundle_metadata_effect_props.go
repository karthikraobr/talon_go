/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// ShowBundleMetadataEffectProps The properties specific to the \"ShowBundleMetadata\" effect. This effect contains information that allows you to associate the discounts from a rule in a bundle campaign with specific cart items. This way you can distinguish from \"normal\" discounts that were not the result of a product bundle.
type ShowBundleMetadataEffectProps struct {
	// Description of the product bundle.
	Description string `json:"description"`
	// The cart item attributes that determined which items are being bundled together.
	BundleAttributes []string `json:"bundleAttributes"`
	// The indices in the cart items array of the bundled items.
	ItemsIndices []float32 `json:"itemsIndices"`
}

// NewShowBundleMetadataEffectProps instantiates a new ShowBundleMetadataEffectProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShowBundleMetadataEffectProps(description string, bundleAttributes []string, itemsIndices []float32) *ShowBundleMetadataEffectProps {
	this := ShowBundleMetadataEffectProps{}
	this.Description = description
	this.BundleAttributes = bundleAttributes
	this.ItemsIndices = itemsIndices
	return &this
}

// NewShowBundleMetadataEffectPropsWithDefaults instantiates a new ShowBundleMetadataEffectProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShowBundleMetadataEffectPropsWithDefaults() *ShowBundleMetadataEffectProps {
	this := ShowBundleMetadataEffectProps{}
	return &this
}

// GetDescription returns the Description field value
func (o *ShowBundleMetadataEffectProps) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ShowBundleMetadataEffectProps) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ShowBundleMetadataEffectProps) SetDescription(v string) {
	o.Description = v
}

// GetBundleAttributes returns the BundleAttributes field value
func (o *ShowBundleMetadataEffectProps) GetBundleAttributes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BundleAttributes
}

// GetBundleAttributesOk returns a tuple with the BundleAttributes field value
// and a boolean to check if the value has been set.
func (o *ShowBundleMetadataEffectProps) GetBundleAttributesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BundleAttributes, true
}

// SetBundleAttributes sets field value
func (o *ShowBundleMetadataEffectProps) SetBundleAttributes(v []string) {
	o.BundleAttributes = v
}

// GetItemsIndices returns the ItemsIndices field value
func (o *ShowBundleMetadataEffectProps) GetItemsIndices() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.ItemsIndices
}

// GetItemsIndicesOk returns a tuple with the ItemsIndices field value
// and a boolean to check if the value has been set.
func (o *ShowBundleMetadataEffectProps) GetItemsIndicesOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemsIndices, true
}

// SetItemsIndices sets field value
func (o *ShowBundleMetadataEffectProps) SetItemsIndices(v []float32) {
	o.ItemsIndices = v
}

func (o ShowBundleMetadataEffectProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["bundleAttributes"] = o.BundleAttributes
	}
	if true {
		toSerialize["itemsIndices"] = o.ItemsIndices
	}
	return json.Marshal(toSerialize)
}

type NullableShowBundleMetadataEffectProps struct {
	value *ShowBundleMetadataEffectProps
	isSet bool
}

func (v NullableShowBundleMetadataEffectProps) Get() *ShowBundleMetadataEffectProps {
	return v.value
}

func (v *NullableShowBundleMetadataEffectProps) Set(val *ShowBundleMetadataEffectProps) {
	v.value = val
	v.isSet = true
}

func (v NullableShowBundleMetadataEffectProps) IsSet() bool {
	return v.isSet
}

func (v *NullableShowBundleMetadataEffectProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShowBundleMetadataEffectProps(val *ShowBundleMetadataEffectProps) *NullableShowBundleMetadataEffectProps {
	return &NullableShowBundleMetadataEffectProps{value: val, isSet: true}
}

func (v NullableShowBundleMetadataEffectProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShowBundleMetadataEffectProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


