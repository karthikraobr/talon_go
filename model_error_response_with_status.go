/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// ErrorResponseWithStatus struct for ErrorResponseWithStatus
type ErrorResponseWithStatus struct {
	Message *string `json:"message,omitempty"`
	// An array of individual problems encountered during the request.
	Errors []APIError `json:"errors,omitempty"`
	// The error code
	StatusCode *int32 `json:"StatusCode,omitempty"`
}

// NewErrorResponseWithStatus instantiates a new ErrorResponseWithStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponseWithStatus() *ErrorResponseWithStatus {
	this := ErrorResponseWithStatus{}
	return &this
}

// NewErrorResponseWithStatusWithDefaults instantiates a new ErrorResponseWithStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseWithStatusWithDefaults() *ErrorResponseWithStatus {
	this := ErrorResponseWithStatus{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorResponseWithStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseWithStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorResponseWithStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorResponseWithStatus) SetMessage(v string) {
	o.Message = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ErrorResponseWithStatus) GetErrors() []APIError {
	if o == nil || o.Errors == nil {
		var ret []APIError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseWithStatus) GetErrorsOk() ([]APIError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ErrorResponseWithStatus) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []APIError and assigns it to the Errors field.
func (o *ErrorResponseWithStatus) SetErrors(v []APIError) {
	o.Errors = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ErrorResponseWithStatus) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponseWithStatus) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ErrorResponseWithStatus) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *ErrorResponseWithStatus) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o ErrorResponseWithStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.StatusCode != nil {
		toSerialize["StatusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableErrorResponseWithStatus struct {
	value *ErrorResponseWithStatus
	isSet bool
}

func (v NullableErrorResponseWithStatus) Get() *ErrorResponseWithStatus {
	return v.value
}

func (v *NullableErrorResponseWithStatus) Set(val *ErrorResponseWithStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseWithStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseWithStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseWithStatus(val *ErrorResponseWithStatus) *NullableErrorResponseWithStatus {
	return &NullableErrorResponseWithStatus{value: val, isSet: true}
}

func (v NullableErrorResponseWithStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseWithStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


