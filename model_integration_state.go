/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// IntegrationState Contains all state that might interest application integration plugins. This is the response type returned by all of the Integration API operations. 
type IntegrationState struct {
	Session CustomerSession `json:"session"`
	Profile CustomerProfile `json:"profile"`
	Event Event `json:"event"`
	Loyalty *Loyalty `json:"loyalty,omitempty"`
	Coupon *Coupon `json:"coupon,omitempty"`
}

// NewIntegrationState instantiates a new IntegrationState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationState(session CustomerSession, profile CustomerProfile, event Event) *IntegrationState {
	this := IntegrationState{}
	this.Session = session
	this.Profile = profile
	this.Event = event
	return &this
}

// NewIntegrationStateWithDefaults instantiates a new IntegrationState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationStateWithDefaults() *IntegrationState {
	this := IntegrationState{}
	return &this
}

// GetSession returns the Session field value
func (o *IntegrationState) GetSession() CustomerSession {
	if o == nil {
		var ret CustomerSession
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *IntegrationState) GetSessionOk() (*CustomerSession, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *IntegrationState) SetSession(v CustomerSession) {
	o.Session = v
}

// GetProfile returns the Profile field value
func (o *IntegrationState) GetProfile() CustomerProfile {
	if o == nil {
		var ret CustomerProfile
		return ret
	}

	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value
// and a boolean to check if the value has been set.
func (o *IntegrationState) GetProfileOk() (*CustomerProfile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Profile, true
}

// SetProfile sets field value
func (o *IntegrationState) SetProfile(v CustomerProfile) {
	o.Profile = v
}

// GetEvent returns the Event field value
func (o *IntegrationState) GetEvent() Event {
	if o == nil {
		var ret Event
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *IntegrationState) GetEventOk() (*Event, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *IntegrationState) SetEvent(v Event) {
	o.Event = v
}

// GetLoyalty returns the Loyalty field value if set, zero value otherwise.
func (o *IntegrationState) GetLoyalty() Loyalty {
	if o == nil || o.Loyalty == nil {
		var ret Loyalty
		return ret
	}
	return *o.Loyalty
}

// GetLoyaltyOk returns a tuple with the Loyalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationState) GetLoyaltyOk() (*Loyalty, bool) {
	if o == nil || o.Loyalty == nil {
		return nil, false
	}
	return o.Loyalty, true
}

// HasLoyalty returns a boolean if a field has been set.
func (o *IntegrationState) HasLoyalty() bool {
	if o != nil && o.Loyalty != nil {
		return true
	}

	return false
}

// SetLoyalty gets a reference to the given Loyalty and assigns it to the Loyalty field.
func (o *IntegrationState) SetLoyalty(v Loyalty) {
	o.Loyalty = &v
}

// GetCoupon returns the Coupon field value if set, zero value otherwise.
func (o *IntegrationState) GetCoupon() Coupon {
	if o == nil || o.Coupon == nil {
		var ret Coupon
		return ret
	}
	return *o.Coupon
}

// GetCouponOk returns a tuple with the Coupon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationState) GetCouponOk() (*Coupon, bool) {
	if o == nil || o.Coupon == nil {
		return nil, false
	}
	return o.Coupon, true
}

// HasCoupon returns a boolean if a field has been set.
func (o *IntegrationState) HasCoupon() bool {
	if o != nil && o.Coupon != nil {
		return true
	}

	return false
}

// SetCoupon gets a reference to the given Coupon and assigns it to the Coupon field.
func (o *IntegrationState) SetCoupon(v Coupon) {
	o.Coupon = &v
}

func (o IntegrationState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["session"] = o.Session
	}
	if true {
		toSerialize["profile"] = o.Profile
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if o.Loyalty != nil {
		toSerialize["loyalty"] = o.Loyalty
	}
	if o.Coupon != nil {
		toSerialize["coupon"] = o.Coupon
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationState struct {
	value *IntegrationState
	isSet bool
}

func (v NullableIntegrationState) Get() *IntegrationState {
	return v.value
}

func (v *NullableIntegrationState) Set(val *IntegrationState) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationState) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationState(val *IntegrationState) *NullableIntegrationState {
	return &NullableIntegrationState{value: val, isSet: true}
}

func (v NullableIntegrationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


