/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewInviteEmail struct for NewInviteEmail
type NewInviteEmail struct {
	Email string `json:"email"`
	Token string `json:"token"`
}

// NewNewInviteEmail instantiates a new NewInviteEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewInviteEmail(email string, token string) *NewInviteEmail {
	this := NewInviteEmail{}
	this.Email = email
	this.Token = token
	return &this
}

// NewNewInviteEmailWithDefaults instantiates a new NewInviteEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewInviteEmailWithDefaults() *NewInviteEmail {
	this := NewInviteEmail{}
	return &this
}

// GetEmail returns the Email field value
func (o *NewInviteEmail) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *NewInviteEmail) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *NewInviteEmail) SetEmail(v string) {
	o.Email = v
}

// GetToken returns the Token field value
func (o *NewInviteEmail) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *NewInviteEmail) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *NewInviteEmail) SetToken(v string) {
	o.Token = v
}

func (o NewInviteEmail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableNewInviteEmail struct {
	value *NewInviteEmail
	isSet bool
}

func (v NullableNewInviteEmail) Get() *NewInviteEmail {
	return v.value
}

func (v *NullableNewInviteEmail) Set(val *NewInviteEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableNewInviteEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableNewInviteEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewInviteEmail(val *NewInviteEmail) *NullableNewInviteEmail {
	return &NullableNewInviteEmail{value: val, isSet: true}
}

func (v NullableNewInviteEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewInviteEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


