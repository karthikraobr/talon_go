/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// LoyaltyProjection Group of all loyalty points expected in the future.
type LoyaltyProjection struct {
	Projections []LoyaltyProjectionData `json:"projections,omitempty"`
	// Sum of points to be expired by the projection date set in the query parameter.
	TotalExpiringPoints float32 `json:"totalExpiringPoints"`
	// Sum of points to be active by the projection date set in the query parameter.
	TotalActivatingPoints float32 `json:"totalActivatingPoints"`
}

// NewLoyaltyProjection instantiates a new LoyaltyProjection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyProjection(totalExpiringPoints float32, totalActivatingPoints float32) *LoyaltyProjection {
	this := LoyaltyProjection{}
	this.TotalExpiringPoints = totalExpiringPoints
	this.TotalActivatingPoints = totalActivatingPoints
	return &this
}

// NewLoyaltyProjectionWithDefaults instantiates a new LoyaltyProjection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyProjectionWithDefaults() *LoyaltyProjection {
	this := LoyaltyProjection{}
	return &this
}

// GetProjections returns the Projections field value if set, zero value otherwise.
func (o *LoyaltyProjection) GetProjections() []LoyaltyProjectionData {
	if o == nil || o.Projections == nil {
		var ret []LoyaltyProjectionData
		return ret
	}
	return o.Projections
}

// GetProjectionsOk returns a tuple with the Projections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProjection) GetProjectionsOk() ([]LoyaltyProjectionData, bool) {
	if o == nil || o.Projections == nil {
		return nil, false
	}
	return o.Projections, true
}

// HasProjections returns a boolean if a field has been set.
func (o *LoyaltyProjection) HasProjections() bool {
	if o != nil && o.Projections != nil {
		return true
	}

	return false
}

// SetProjections gets a reference to the given []LoyaltyProjectionData and assigns it to the Projections field.
func (o *LoyaltyProjection) SetProjections(v []LoyaltyProjectionData) {
	o.Projections = v
}

// GetTotalExpiringPoints returns the TotalExpiringPoints field value
func (o *LoyaltyProjection) GetTotalExpiringPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalExpiringPoints
}

// GetTotalExpiringPointsOk returns a tuple with the TotalExpiringPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProjection) GetTotalExpiringPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalExpiringPoints, true
}

// SetTotalExpiringPoints sets field value
func (o *LoyaltyProjection) SetTotalExpiringPoints(v float32) {
	o.TotalExpiringPoints = v
}

// GetTotalActivatingPoints returns the TotalActivatingPoints field value
func (o *LoyaltyProjection) GetTotalActivatingPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalActivatingPoints
}

// GetTotalActivatingPointsOk returns a tuple with the TotalActivatingPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProjection) GetTotalActivatingPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalActivatingPoints, true
}

// SetTotalActivatingPoints sets field value
func (o *LoyaltyProjection) SetTotalActivatingPoints(v float32) {
	o.TotalActivatingPoints = v
}

func (o LoyaltyProjection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projections != nil {
		toSerialize["projections"] = o.Projections
	}
	if true {
		toSerialize["totalExpiringPoints"] = o.TotalExpiringPoints
	}
	if true {
		toSerialize["totalActivatingPoints"] = o.TotalActivatingPoints
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyProjection struct {
	value *LoyaltyProjection
	isSet bool
}

func (v NullableLoyaltyProjection) Get() *LoyaltyProjection {
	return v.value
}

func (v *NullableLoyaltyProjection) Set(val *LoyaltyProjection) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyProjection) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyProjection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyProjection(val *LoyaltyProjection) *NullableLoyaltyProjection {
	return &NullableLoyaltyProjection{value: val, isSet: true}
}

func (v NullableLoyaltyProjection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyProjection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


