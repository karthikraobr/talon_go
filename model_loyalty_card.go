/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// LoyaltyCard 
type LoyaltyCard struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The ID of the loyalty program that owns this entity.
	ProgramID int32 `json:"programID"`
	// Status of the loyalty card. Can be one of: ['active', 'disabled'] 
	Status string `json:"status"`
	// The alphanumeric identifier of the loyalty card.
	Identifier string `json:"identifier"`
	// The max amount of user profiles a card can be shared with. 0 means unlimited. 
	UsersPerCardLimit int32 `json:"usersPerCardLimit"`
	// Integration IDs of the customers associated with the card.
	Profiles []LoyaltyCardProfileRegistration `json:"profiles,omitempty"`
	Ledger *LedgerInfo `json:"ledger,omitempty"`
	// Displays point balances of the card in the subledgers of the loyalty program.
	Subledgers *map[string]LedgerInfo `json:"subledgers,omitempty"`
	// Timestamp of the most recent update of the loyalty card.
	Modified *time.Time `json:"modified,omitempty"`
}

// NewLoyaltyCard instantiates a new LoyaltyCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyCard(id int32, created time.Time, programID int32, status string, identifier string, usersPerCardLimit int32) *LoyaltyCard {
	this := LoyaltyCard{}
	this.Id = id
	this.Created = created
	this.ProgramID = programID
	this.Status = status
	this.Identifier = identifier
	this.UsersPerCardLimit = usersPerCardLimit
	return &this
}

// NewLoyaltyCardWithDefaults instantiates a new LoyaltyCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyCardWithDefaults() *LoyaltyCard {
	this := LoyaltyCard{}
	return &this
}

// GetId returns the Id field value
func (o *LoyaltyCard) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LoyaltyCard) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *LoyaltyCard) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *LoyaltyCard) SetCreated(v time.Time) {
	o.Created = v
}

// GetProgramID returns the ProgramID field value
func (o *LoyaltyCard) GetProgramID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgramID
}

// GetProgramIDOk returns a tuple with the ProgramID field value
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetProgramIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramID, true
}

// SetProgramID sets field value
func (o *LoyaltyCard) SetProgramID(v int32) {
	o.ProgramID = v
}

// GetStatus returns the Status field value
func (o *LoyaltyCard) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *LoyaltyCard) SetStatus(v string) {
	o.Status = v
}

// GetIdentifier returns the Identifier field value
func (o *LoyaltyCard) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *LoyaltyCard) SetIdentifier(v string) {
	o.Identifier = v
}

// GetUsersPerCardLimit returns the UsersPerCardLimit field value
func (o *LoyaltyCard) GetUsersPerCardLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsersPerCardLimit
}

// GetUsersPerCardLimitOk returns a tuple with the UsersPerCardLimit field value
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetUsersPerCardLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsersPerCardLimit, true
}

// SetUsersPerCardLimit sets field value
func (o *LoyaltyCard) SetUsersPerCardLimit(v int32) {
	o.UsersPerCardLimit = v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *LoyaltyCard) GetProfiles() []LoyaltyCardProfileRegistration {
	if o == nil || o.Profiles == nil {
		var ret []LoyaltyCardProfileRegistration
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetProfilesOk() ([]LoyaltyCardProfileRegistration, bool) {
	if o == nil || o.Profiles == nil {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *LoyaltyCard) HasProfiles() bool {
	if o != nil && o.Profiles != nil {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []LoyaltyCardProfileRegistration and assigns it to the Profiles field.
func (o *LoyaltyCard) SetProfiles(v []LoyaltyCardProfileRegistration) {
	o.Profiles = v
}

// GetLedger returns the Ledger field value if set, zero value otherwise.
func (o *LoyaltyCard) GetLedger() LedgerInfo {
	if o == nil || o.Ledger == nil {
		var ret LedgerInfo
		return ret
	}
	return *o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetLedgerOk() (*LedgerInfo, bool) {
	if o == nil || o.Ledger == nil {
		return nil, false
	}
	return o.Ledger, true
}

// HasLedger returns a boolean if a field has been set.
func (o *LoyaltyCard) HasLedger() bool {
	if o != nil && o.Ledger != nil {
		return true
	}

	return false
}

// SetLedger gets a reference to the given LedgerInfo and assigns it to the Ledger field.
func (o *LoyaltyCard) SetLedger(v LedgerInfo) {
	o.Ledger = &v
}

// GetSubledgers returns the Subledgers field value if set, zero value otherwise.
func (o *LoyaltyCard) GetSubledgers() map[string]LedgerInfo {
	if o == nil || o.Subledgers == nil {
		var ret map[string]LedgerInfo
		return ret
	}
	return *o.Subledgers
}

// GetSubledgersOk returns a tuple with the Subledgers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetSubledgersOk() (*map[string]LedgerInfo, bool) {
	if o == nil || o.Subledgers == nil {
		return nil, false
	}
	return o.Subledgers, true
}

// HasSubledgers returns a boolean if a field has been set.
func (o *LoyaltyCard) HasSubledgers() bool {
	if o != nil && o.Subledgers != nil {
		return true
	}

	return false
}

// SetSubledgers gets a reference to the given map[string]LedgerInfo and assigns it to the Subledgers field.
func (o *LoyaltyCard) SetSubledgers(v map[string]LedgerInfo) {
	o.Subledgers = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *LoyaltyCard) GetModified() time.Time {
	if o == nil || o.Modified == nil {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyCard) GetModifiedOk() (*time.Time, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *LoyaltyCard) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *LoyaltyCard) SetModified(v time.Time) {
	o.Modified = &v
}

func (o LoyaltyCard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["programID"] = o.ProgramID
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["usersPerCardLimit"] = o.UsersPerCardLimit
	}
	if o.Profiles != nil {
		toSerialize["profiles"] = o.Profiles
	}
	if o.Ledger != nil {
		toSerialize["ledger"] = o.Ledger
	}
	if o.Subledgers != nil {
		toSerialize["subledgers"] = o.Subledgers
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyCard struct {
	value *LoyaltyCard
	isSet bool
}

func (v NullableLoyaltyCard) Get() *LoyaltyCard {
	return v.value
}

func (v *NullableLoyaltyCard) Set(val *LoyaltyCard) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyCard) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyCard(val *LoyaltyCard) *NullableLoyaltyCard {
	return &NullableLoyaltyCard{value: val, isSet: true}
}

func (v NullableLoyaltyCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


