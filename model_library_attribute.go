/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// LibraryAttribute 
type LibraryAttribute struct {
	// The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.
	Entity string `json:"entity"`
	// The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload. 
	Name string `json:"name"`
	// The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.
	Title string `json:"title"`
	// The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.
	Type string `json:"type"`
	// A description of the attribute.
	Description string `json:"description"`
	// The presets that indicate to which industry the attribute applies to.
	Presets []string `json:"presets"`
	// Short suggestions that are used to group attributes.
	Suggestions []string `json:"suggestions"`
}

// NewLibraryAttribute instantiates a new LibraryAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLibraryAttribute(entity string, name string, title string, type_ string, description string, presets []string, suggestions []string) *LibraryAttribute {
	this := LibraryAttribute{}
	this.Entity = entity
	this.Name = name
	this.Title = title
	this.Type = type_
	this.Description = description
	this.Presets = presets
	this.Suggestions = suggestions
	return &this
}

// NewLibraryAttributeWithDefaults instantiates a new LibraryAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLibraryAttributeWithDefaults() *LibraryAttribute {
	this := LibraryAttribute{}
	return &this
}

// GetEntity returns the Entity field value
func (o *LibraryAttribute) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *LibraryAttribute) SetEntity(v string) {
	o.Entity = v
}

// GetName returns the Name field value
func (o *LibraryAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LibraryAttribute) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *LibraryAttribute) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *LibraryAttribute) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *LibraryAttribute) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LibraryAttribute) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *LibraryAttribute) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LibraryAttribute) SetDescription(v string) {
	o.Description = v
}

// GetPresets returns the Presets field value
func (o *LibraryAttribute) GetPresets() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Presets
}

// GetPresetsOk returns a tuple with the Presets field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetPresetsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Presets, true
}

// SetPresets sets field value
func (o *LibraryAttribute) SetPresets(v []string) {
	o.Presets = v
}

// GetSuggestions returns the Suggestions field value
func (o *LibraryAttribute) GetSuggestions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value
// and a boolean to check if the value has been set.
func (o *LibraryAttribute) GetSuggestionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suggestions, true
}

// SetSuggestions sets field value
func (o *LibraryAttribute) SetSuggestions(v []string) {
	o.Suggestions = v
}

func (o LibraryAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entity"] = o.Entity
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["presets"] = o.Presets
	}
	if true {
		toSerialize["suggestions"] = o.Suggestions
	}
	return json.Marshal(toSerialize)
}

type NullableLibraryAttribute struct {
	value *LibraryAttribute
	isSet bool
}

func (v NullableLibraryAttribute) Get() *LibraryAttribute {
	return v.value
}

func (v *NullableLibraryAttribute) Set(val *LibraryAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableLibraryAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableLibraryAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLibraryAttribute(val *LibraryAttribute) *NullableLibraryAttribute {
	return &NullableLibraryAttribute{value: val, isSet: true}
}

func (v NullableLibraryAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLibraryAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


