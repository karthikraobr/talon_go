/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// CatalogItem 
type CatalogItem struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The stock keeping unit of the item.
	Sku string `json:"sku"`
	// Price of the item.
	Price *float32 `json:"price,omitempty"`
	// The ID of the catalog the item belongs to.
	Catalogid int32 `json:"catalogid"`
	// The version of the catalog item.
	Version int32 `json:"version"`
	Attributes []ItemAttribute `json:"attributes,omitempty"`
}

// NewCatalogItem instantiates a new CatalogItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItem(id int32, created time.Time, sku string, catalogid int32, version int32) *CatalogItem {
	this := CatalogItem{}
	this.Id = id
	this.Created = created
	this.Sku = sku
	this.Catalogid = catalogid
	this.Version = version
	return &this
}

// NewCatalogItemWithDefaults instantiates a new CatalogItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItemWithDefaults() *CatalogItem {
	this := CatalogItem{}
	return &this
}

// GetId returns the Id field value
func (o *CatalogItem) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CatalogItem) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *CatalogItem) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CatalogItem) SetCreated(v time.Time) {
	o.Created = v
}

// GetSku returns the Sku field value
func (o *CatalogItem) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *CatalogItem) SetSku(v string) {
	o.Sku = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CatalogItem) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CatalogItem) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *CatalogItem) SetPrice(v float32) {
	o.Price = &v
}

// GetCatalogid returns the Catalogid field value
func (o *CatalogItem) GetCatalogid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Catalogid
}

// GetCatalogidOk returns a tuple with the Catalogid field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetCatalogidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Catalogid, true
}

// SetCatalogid sets field value
func (o *CatalogItem) SetCatalogid(v int32) {
	o.Catalogid = v
}

// GetVersion returns the Version field value
func (o *CatalogItem) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CatalogItem) SetVersion(v int32) {
	o.Version = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *CatalogItem) GetAttributes() []ItemAttribute {
	if o == nil || o.Attributes == nil {
		var ret []ItemAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItem) GetAttributesOk() ([]ItemAttribute, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *CatalogItem) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttribute and assigns it to the Attributes field.
func (o *CatalogItem) SetAttributes(v []ItemAttribute) {
	o.Attributes = v
}

func (o CatalogItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["sku"] = o.Sku
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["catalogid"] = o.Catalogid
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogItem struct {
	value *CatalogItem
	isSet bool
}

func (v NullableCatalogItem) Get() *CatalogItem {
	return v.value
}

func (v *NullableCatalogItem) Set(val *CatalogItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItem(val *CatalogItem) *NullableCatalogItem {
	return &NullableCatalogItem{value: val, isSet: true}
}

func (v NullableCatalogItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


