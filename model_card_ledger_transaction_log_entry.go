/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// CardLedgerTransactionLogEntry Loyalty ledger transaction log entry.
type CardLedgerTransactionLogEntry struct {
	// The exact moment the loyalty ledger transaction happened.
	Created time.Time `json:"created"`
	// ID of the loyalty program.
	ProgramId int32 `json:"programId"`
	// Identifier of the loyalty card.
	CardIdentifier string `json:"cardIdentifier"`
	// ID of the customer session.
	SessionId string `json:"sessionId"`
	// Type of transaction. Possible values are:   - `addition`: Points were added.   - `subtraction`: Points were subtracted. 
	Type string `json:"type"`
	// Name or reason of the loyalty ledger transaction.
	Name string `json:"name"`
	// Start date of the loyalty ledger entry. Possible values are:   - `immediate`: Points ere active immediately.   - `timestamp value`: Points are become active from certain date. 
	StartDate string `json:"startDate"`
	// Expiry date of the loyalty ledger entry. Possible values are:   - `unlimited`: Points have no expiration date.   - `timestamp value`: Points have certain expiration date. 
	ExpiryDate string `json:"expiryDate"`
	// ID of the subledger.
	SubledgerId string `json:"subledgerId"`
	// Amount of loyalty points of the loyalty ledger transaction.
	Amount float32 `json:"amount"`
	// ID of the loyalty ledger transaction.
	Id int32 `json:"id"`
}

// NewCardLedgerTransactionLogEntry instantiates a new CardLedgerTransactionLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardLedgerTransactionLogEntry(created time.Time, programId int32, cardIdentifier string, sessionId string, type_ string, name string, startDate string, expiryDate string, subledgerId string, amount float32, id int32) *CardLedgerTransactionLogEntry {
	this := CardLedgerTransactionLogEntry{}
	this.Created = created
	this.ProgramId = programId
	this.CardIdentifier = cardIdentifier
	this.SessionId = sessionId
	this.Type = type_
	this.Name = name
	this.StartDate = startDate
	this.ExpiryDate = expiryDate
	this.SubledgerId = subledgerId
	this.Amount = amount
	this.Id = id
	return &this
}

// NewCardLedgerTransactionLogEntryWithDefaults instantiates a new CardLedgerTransactionLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardLedgerTransactionLogEntryWithDefaults() *CardLedgerTransactionLogEntry {
	this := CardLedgerTransactionLogEntry{}
	return &this
}

// GetCreated returns the Created field value
func (o *CardLedgerTransactionLogEntry) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CardLedgerTransactionLogEntry) SetCreated(v time.Time) {
	o.Created = v
}

// GetProgramId returns the ProgramId field value
func (o *CardLedgerTransactionLogEntry) GetProgramId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetProgramIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *CardLedgerTransactionLogEntry) SetProgramId(v int32) {
	o.ProgramId = v
}

// GetCardIdentifier returns the CardIdentifier field value
func (o *CardLedgerTransactionLogEntry) GetCardIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CardIdentifier
}

// GetCardIdentifierOk returns a tuple with the CardIdentifier field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetCardIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardIdentifier, true
}

// SetCardIdentifier sets field value
func (o *CardLedgerTransactionLogEntry) SetCardIdentifier(v string) {
	o.CardIdentifier = v
}

// GetSessionId returns the SessionId field value
func (o *CardLedgerTransactionLogEntry) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *CardLedgerTransactionLogEntry) SetSessionId(v string) {
	o.SessionId = v
}

// GetType returns the Type field value
func (o *CardLedgerTransactionLogEntry) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CardLedgerTransactionLogEntry) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *CardLedgerTransactionLogEntry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CardLedgerTransactionLogEntry) SetName(v string) {
	o.Name = v
}

// GetStartDate returns the StartDate field value
func (o *CardLedgerTransactionLogEntry) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *CardLedgerTransactionLogEntry) SetStartDate(v string) {
	o.StartDate = v
}

// GetExpiryDate returns the ExpiryDate field value
func (o *CardLedgerTransactionLogEntry) GetExpiryDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetExpiryDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiryDate, true
}

// SetExpiryDate sets field value
func (o *CardLedgerTransactionLogEntry) SetExpiryDate(v string) {
	o.ExpiryDate = v
}

// GetSubledgerId returns the SubledgerId field value
func (o *CardLedgerTransactionLogEntry) GetSubledgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubledgerId
}

// GetSubledgerIdOk returns a tuple with the SubledgerId field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetSubledgerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubledgerId, true
}

// SetSubledgerId sets field value
func (o *CardLedgerTransactionLogEntry) SetSubledgerId(v string) {
	o.SubledgerId = v
}

// GetAmount returns the Amount field value
func (o *CardLedgerTransactionLogEntry) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CardLedgerTransactionLogEntry) SetAmount(v float32) {
	o.Amount = v
}

// GetId returns the Id field value
func (o *CardLedgerTransactionLogEntry) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CardLedgerTransactionLogEntry) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CardLedgerTransactionLogEntry) SetId(v int32) {
	o.Id = v
}

func (o CardLedgerTransactionLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["programId"] = o.ProgramId
	}
	if true {
		toSerialize["cardIdentifier"] = o.CardIdentifier
	}
	if true {
		toSerialize["sessionId"] = o.SessionId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["startDate"] = o.StartDate
	}
	if true {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if true {
		toSerialize["subledgerId"] = o.SubledgerId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableCardLedgerTransactionLogEntry struct {
	value *CardLedgerTransactionLogEntry
	isSet bool
}

func (v NullableCardLedgerTransactionLogEntry) Get() *CardLedgerTransactionLogEntry {
	return v.value
}

func (v *NullableCardLedgerTransactionLogEntry) Set(val *CardLedgerTransactionLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableCardLedgerTransactionLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableCardLedgerTransactionLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardLedgerTransactionLogEntry(val *CardLedgerTransactionLogEntry) *NullableCardLedgerTransactionLogEntry {
	return &NullableCardLedgerTransactionLogEntry{value: val, isSet: true}
}

func (v NullableCardLedgerTransactionLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardLedgerTransactionLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


