/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// Loyalty Customer specific information about loyalty points.
type Loyalty struct {
	// Displays information about the balances of the loyalty cards.
	Cards []LoyaltyCard `json:"cards,omitempty"`
	// Displays information about point balances in profile-based programs.
	Programs map[string]LoyaltyProgramLedgers `json:"programs"`
}

// NewLoyalty instantiates a new Loyalty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyalty(programs map[string]LoyaltyProgramLedgers) *Loyalty {
	this := Loyalty{}
	this.Programs = programs
	return &this
}

// NewLoyaltyWithDefaults instantiates a new Loyalty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyWithDefaults() *Loyalty {
	this := Loyalty{}
	return &this
}

// GetCards returns the Cards field value if set, zero value otherwise.
func (o *Loyalty) GetCards() []LoyaltyCard {
	if o == nil || o.Cards == nil {
		var ret []LoyaltyCard
		return ret
	}
	return o.Cards
}

// GetCardsOk returns a tuple with the Cards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Loyalty) GetCardsOk() ([]LoyaltyCard, bool) {
	if o == nil || o.Cards == nil {
		return nil, false
	}
	return o.Cards, true
}

// HasCards returns a boolean if a field has been set.
func (o *Loyalty) HasCards() bool {
	if o != nil && o.Cards != nil {
		return true
	}

	return false
}

// SetCards gets a reference to the given []LoyaltyCard and assigns it to the Cards field.
func (o *Loyalty) SetCards(v []LoyaltyCard) {
	o.Cards = v
}

// GetPrograms returns the Programs field value
func (o *Loyalty) GetPrograms() map[string]LoyaltyProgramLedgers {
	if o == nil {
		var ret map[string]LoyaltyProgramLedgers
		return ret
	}

	return o.Programs
}

// GetProgramsOk returns a tuple with the Programs field value
// and a boolean to check if the value has been set.
func (o *Loyalty) GetProgramsOk() (*map[string]LoyaltyProgramLedgers, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Programs, true
}

// SetPrograms sets field value
func (o *Loyalty) SetPrograms(v map[string]LoyaltyProgramLedgers) {
	o.Programs = v
}

func (o Loyalty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cards != nil {
		toSerialize["cards"] = o.Cards
	}
	if true {
		toSerialize["programs"] = o.Programs
	}
	return json.Marshal(toSerialize)
}

type NullableLoyalty struct {
	value *Loyalty
	isSet bool
}

func (v NullableLoyalty) Get() *Loyalty {
	return v.value
}

func (v *NullableLoyalty) Set(val *Loyalty) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyalty) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyalty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyalty(val *Loyalty) *NullableLoyalty {
	return &NullableLoyalty{value: val, isSet: true}
}

func (v NullableLoyalty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyalty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


