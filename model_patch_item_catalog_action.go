/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// PatchItemCatalogAction The specific properties of the \"PATCH\" catalog sync action.
type PatchItemCatalogAction struct {
	// The unique SKU of the item to patch.
	Sku string `json:"sku"`
	// Price of the item.
	Price *float32 `json:"price,omitempty"`
	// The attributes of the item to patch.
	Attributes map[string]interface{} `json:"attributes"`
	// Indicates whether to create an item if the SKU does not exist.
	CreateIfNotExists *bool `json:"createIfNotExists,omitempty"`
}

// NewPatchItemCatalogAction instantiates a new PatchItemCatalogAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchItemCatalogAction(sku string, attributes map[string]interface{}) *PatchItemCatalogAction {
	this := PatchItemCatalogAction{}
	this.Sku = sku
	this.Attributes = attributes
	var createIfNotExists bool = false
	this.CreateIfNotExists = &createIfNotExists
	return &this
}

// NewPatchItemCatalogActionWithDefaults instantiates a new PatchItemCatalogAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchItemCatalogActionWithDefaults() *PatchItemCatalogAction {
	this := PatchItemCatalogAction{}
	var createIfNotExists bool = false
	this.CreateIfNotExists = &createIfNotExists
	return &this
}

// GetSku returns the Sku field value
func (o *PatchItemCatalogAction) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *PatchItemCatalogAction) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *PatchItemCatalogAction) SetSku(v string) {
	o.Sku = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PatchItemCatalogAction) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchItemCatalogAction) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PatchItemCatalogAction) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *PatchItemCatalogAction) SetPrice(v float32) {
	o.Price = &v
}

// GetAttributes returns the Attributes field value
func (o *PatchItemCatalogAction) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *PatchItemCatalogAction) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *PatchItemCatalogAction) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetCreateIfNotExists returns the CreateIfNotExists field value if set, zero value otherwise.
func (o *PatchItemCatalogAction) GetCreateIfNotExists() bool {
	if o == nil || o.CreateIfNotExists == nil {
		var ret bool
		return ret
	}
	return *o.CreateIfNotExists
}

// GetCreateIfNotExistsOk returns a tuple with the CreateIfNotExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchItemCatalogAction) GetCreateIfNotExistsOk() (*bool, bool) {
	if o == nil || o.CreateIfNotExists == nil {
		return nil, false
	}
	return o.CreateIfNotExists, true
}

// HasCreateIfNotExists returns a boolean if a field has been set.
func (o *PatchItemCatalogAction) HasCreateIfNotExists() bool {
	if o != nil && o.CreateIfNotExists != nil {
		return true
	}

	return false
}

// SetCreateIfNotExists gets a reference to the given bool and assigns it to the CreateIfNotExists field.
func (o *PatchItemCatalogAction) SetCreateIfNotExists(v bool) {
	o.CreateIfNotExists = &v
}

func (o PatchItemCatalogAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sku"] = o.Sku
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if o.CreateIfNotExists != nil {
		toSerialize["createIfNotExists"] = o.CreateIfNotExists
	}
	return json.Marshal(toSerialize)
}

type NullablePatchItemCatalogAction struct {
	value *PatchItemCatalogAction
	isSet bool
}

func (v NullablePatchItemCatalogAction) Get() *PatchItemCatalogAction {
	return v.value
}

func (v *NullablePatchItemCatalogAction) Set(val *PatchItemCatalogAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchItemCatalogAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchItemCatalogAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchItemCatalogAction(val *PatchItemCatalogAction) *NullablePatchItemCatalogAction {
	return &NullablePatchItemCatalogAction{value: val, isSet: true}
}

func (v NullablePatchItemCatalogAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchItemCatalogAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


