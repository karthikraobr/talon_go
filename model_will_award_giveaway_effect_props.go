/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// WillAwardGiveawayEffectProps The properties specific to the \"awardGiveaway\" effect when the session is not closed yet. This effect replaces \"awardGiveaway\" only when updating a session with any state other than \"closed\". This is to ensure no giveaway codes are leaked when they are still not guaranteed to be awarded.
type WillAwardGiveawayEffectProps struct {
	// The ID of the giveaways pool the code will be taken from.
	PoolId int32 `json:"poolId"`
	// The name of the giveaways pool the code will be taken from.
	PoolName string `json:"poolName"`
	// The integration ID of the profile that will be awarded the giveaway.
	RecipientIntegrationId string `json:"recipientIntegrationId"`
}

// NewWillAwardGiveawayEffectProps instantiates a new WillAwardGiveawayEffectProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWillAwardGiveawayEffectProps(poolId int32, poolName string, recipientIntegrationId string) *WillAwardGiveawayEffectProps {
	this := WillAwardGiveawayEffectProps{}
	this.PoolId = poolId
	this.PoolName = poolName
	this.RecipientIntegrationId = recipientIntegrationId
	return &this
}

// NewWillAwardGiveawayEffectPropsWithDefaults instantiates a new WillAwardGiveawayEffectProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWillAwardGiveawayEffectPropsWithDefaults() *WillAwardGiveawayEffectProps {
	this := WillAwardGiveawayEffectProps{}
	return &this
}

// GetPoolId returns the PoolId field value
func (o *WillAwardGiveawayEffectProps) GetPoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *WillAwardGiveawayEffectProps) GetPoolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *WillAwardGiveawayEffectProps) SetPoolId(v int32) {
	o.PoolId = v
}

// GetPoolName returns the PoolName field value
func (o *WillAwardGiveawayEffectProps) GetPoolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value
// and a boolean to check if the value has been set.
func (o *WillAwardGiveawayEffectProps) GetPoolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolName, true
}

// SetPoolName sets field value
func (o *WillAwardGiveawayEffectProps) SetPoolName(v string) {
	o.PoolName = v
}

// GetRecipientIntegrationId returns the RecipientIntegrationId field value
func (o *WillAwardGiveawayEffectProps) GetRecipientIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientIntegrationId
}

// GetRecipientIntegrationIdOk returns a tuple with the RecipientIntegrationId field value
// and a boolean to check if the value has been set.
func (o *WillAwardGiveawayEffectProps) GetRecipientIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientIntegrationId, true
}

// SetRecipientIntegrationId sets field value
func (o *WillAwardGiveawayEffectProps) SetRecipientIntegrationId(v string) {
	o.RecipientIntegrationId = v
}

func (o WillAwardGiveawayEffectProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["poolId"] = o.PoolId
	}
	if true {
		toSerialize["poolName"] = o.PoolName
	}
	if true {
		toSerialize["recipientIntegrationId"] = o.RecipientIntegrationId
	}
	return json.Marshal(toSerialize)
}

type NullableWillAwardGiveawayEffectProps struct {
	value *WillAwardGiveawayEffectProps
	isSet bool
}

func (v NullableWillAwardGiveawayEffectProps) Get() *WillAwardGiveawayEffectProps {
	return v.value
}

func (v *NullableWillAwardGiveawayEffectProps) Set(val *WillAwardGiveawayEffectProps) {
	v.value = val
	v.isSet = true
}

func (v NullableWillAwardGiveawayEffectProps) IsSet() bool {
	return v.isSet
}

func (v *NullableWillAwardGiveawayEffectProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWillAwardGiveawayEffectProps(val *WillAwardGiveawayEffectProps) *NullableWillAwardGiveawayEffectProps {
	return &NullableWillAwardGiveawayEffectProps{value: val, isSet: true}
}

func (v NullableWillAwardGiveawayEffectProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWillAwardGiveawayEffectProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


