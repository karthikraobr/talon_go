{
    "openapi": "3.0.1",
    "info": {
      "title": "Integration API reference docs",
      "description": "Use the Integration API to push data to and retrieve data from Talon.One in real time.\nFor more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)\n\nFor example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion\nrules. You can also create custom events to track specific actions that do not fit into the session data model.\n\nEnsure you [authenticate](#section/Authentication) to make requests to the API.\n\n<div class=\"redoc-section\">\n  <p class=\"title\">Are you looking for a different API?</p>\n\n  If you need the API to:\n\n  - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).\n  - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).\n\n</div>\n\n# Authentication\n\n<SecurityDefinitions />\n",
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "https://goflink.europe-west1.talon.one/"
      }
    ],
    "tags": [
      {
        "name": "Audiences",
        "description": "Represents an arbitrary group of customer profiles. Audiences can be synced from Customer Data Platforms such as mParticle or created from scratch.\n"
      },
      {
        "name": "Catalogs",
        "description": "Represents a catalog of cart items with unique SKUs. Cart item catalogs allow you to synchronize your entire inventory with Talon.One.\nSee the [documentation](https://docs.talon.one/docs/product/account/dev-tools/managing-cart-item-catalogs).\n"
      },
      {
        "name": "Coupons",
        "description": "Coupons are unique codes belonging to a particular campaign. They don't define any behavior on their own, instead the campaign ruleset can include rules that validate coupons and carry out particular effects.\n"
      },
      {
        "name": "Customer profiles",
        "description": "Represents the customer's information. For instance, their contact information.\n"
      },
      {
        "name": "Customer sessions",
        "description": "Represents the data related to a customer session. Typically, a customer session is the value and content of the customer's cart.\n\nSessions can be anonymous or linked to a customer profile and they have a life cycle from `open` to `closed`.\nIn general, a session is closed when the customer completes the checkout step.\n\nSessions are a key concept of Talon.One, we strongly recommend you read the [documentation about customer sessions](/docs/dev/concepts/entities#customer-session).\n"
      },
      {
        "name": "Events",
        "description": "Represents a single occurrence of various customer actions. There are 2 versions:\n- For V1 events, each customer **session** contains one or more events. For example, updating a customer session records a `talon_session_updated` event.\n- For V2 events, each customer **profile** contains one or more events. For example, updating a customer session records a `talon_session_updated` event linked to the profile in question.\n"
      },
      {
        "name": "Referrals",
        "description": "A referral is a code shared between a customer and a prospect.\nA referral is defined by an advocate, a friend and a referral code. The advocate is the person who\ninvited their friend via referral program. The friend is the person who receives the invite from an advocate.\nThe referral code is a code which is generated similar to a coupon code the code can be redeemed by\neither one or multiple advocates.\n"
      }
    ],
    "paths": {
      "/v2/customer_sessions/{customerSessionId}": {
        "get": {
          "tags": [
            "Customer sessions"
          ],
          "summary": "Get customer session",
          "description": "Get the details of the given customer session.\n\nYou can get the same data via other endpoints that also apply changes, which can help you save requests and increase performance. See:\n\n- [Update customer session](#tag/Customer-sessions/operation/updateCustomerSessionV2)\n- [Update customer profile](#tag/Customer-profiles/operation/updateCustomerProfileV2)\n",
          "operationId": "getCustomerSession",
          "parameters": [
            {
              "name": "customerSessionId",
              "in": "path",
              "description": "The `integration ID` of the customer session. You set this ID when you create a customer session.\n\nYou can see existing customer session integration IDs in the Campaign Manager's **Sessions** menu, or via the\n[List Application session endpoint](https://docs.talon.one/management-api/#operation/getApplicationSessions).\n",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationCustomerSessionResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ]
        },
        "put": {
          "tags": [
            "Customer sessions"
          ],
          "summary": "Update customer session",
          "description": "Update or create a [customer session](/docs/dev/concepts/entities#customer-session).\nFor example, use this endpoint to share the content of a customer's cart with Talon.One and to check which\npromotion rules apply.\n\n**Note:** The currency for the session and the cart items in the session is the same as the\nApplication that owns this session.\n\n### Session management\n\nThe Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same Application you can either:\n\n- Track multiple independent sessions or,\n- Use the same session across all of them.\n\nYou should share sessions when application access points share other state, such as the user's cart.\nIf two points of access to the application have independent states, for example a user can have different\nitems in their cart across the two) they should use independent customer session ID's.\n\nSee more information and tips about session management in the [documentation](/docs/dev/concepts/entities#customer-session).\n\n### Sessions and customer profiles\n\n- To link a session to a customer profile, set the `profileId` parameter in the request body to a customer profile's `integrationId`.\n- While you can create an anonymous session with `profileId=\"\"`, we recommend you use a guest ID instead.\n\n**Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.\n\n<div class=\"redoc-section\">\n  <p class=\"title\">Performance tips</p>\n\n  Updating a customer session returns a response with the requested integration state. Use the `responseContent` property to save yourself extra API calls. For example, you can get\n  the customer profile details directly without extra requests.\n\n  For more information, see the [integration tutorial](https://docs.talon.one/docs/dev/tutorials/integrating-talon-one).\n</div>\n",
          "operationId": "updateCustomerSessionV2",
          "parameters": [
            {
              "name": "dry",
              "in": "query",
              "description": "Indicates whether to persist the changes. Changes are ignored when `dry=true`.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "customerSessionId",
              "in": "path",
              "description": "The `integration ID` of the customer session. You set this ID when you create a customer session.\n\nYou can see existing customer session integration IDs in the Campaign Manager's **Sessions** menu, or via the\n[List Application session endpoint](https://docs.talon.one/management-api/#operation/getApplicationSessions).\n",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationStateV2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "409": {
              "description": "Too many requests - Avoid parallel requests, see the [docs](/docs/dev/tutorials/integrating-talon-one/#managing-parallel-requests).",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/customer_sessions/{customerSessionId}/returns": {
        "post": {
          "tags": [
            "Customer sessions"
          ],
          "summary": "Return cart items",
          "description": "Create a new return request for the specified cart items.\n\nThis endpoint automatically changes the session state from `closed` to `partially_returned`.\n\nIts behavior depends on whether [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items)\nis enabled for the Application.\n\n**Note:** This will roll back any effects associated with these cart items. For more information, see\n[our documentation on session states](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states)\nand [this tutorial](https://docs.talon.one/docs/dev/tutorials/partially-returning-a-session).\n",
          "operationId": "returnCartItems",
          "parameters": [
            {
              "name": "dry",
              "in": "query",
              "description": "Indicates whether to persist the changes. Changes are ignored when `dry=true`.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "customerSessionId",
              "in": "path",
              "description": "The `integration ID` of the customer session. You set this ID when you create a customer session.\n\nYou can see existing customer session integration IDs in the Campaign Manager's **Sessions** menu, or via the\n[List Application session endpoint](https://docs.talon.one/management-api/#operation/getApplicationSessions).\n",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnIntegrationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationStateV2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/customer_profiles/{integrationId}": {
        "put": {
          "tags": [
            "Customer profiles"
          ],
          "summary": "Update customer profile",
          "description": "Update or create a [Customer Profile](/docs/dev/concepts/entities#customer-profile). This endpoint triggers the Rule Builder.\n\nYou can use this endpoint to:\n- Set attributes on the given customer profile. Ensure you create the attributes in the Campaign Manager, first.\n- Modify the audience the customer profile is a member of.\n\n<div class=\"redoc-section\">\n  <p class=\"title\">Performance tips</p>\n\n  Updating a customer profile returns a response with the requested integration state.\n\n  You can use the `responseContent` property to save yourself extra API calls. For example, you can get\n  the customer profile details directly without extra requests.\n</div>\n",
          "operationId": "updateCustomerProfileV2",
          "parameters": [
            {
              "name": "integrationId",
              "in": "path",
              "description": "The integration identifier for this customer profile. Must be:\n- Unique within the deployment.\n- Stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.\n\nOnce set, you cannot update this identifier.\n",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "runRuleEngine",
              "in": "query",
              "description": "Indicates whether to run the Rule Engine.\n\nIf `true`, the response includes:\n- The effects generated by the triggered campaigns are returned in the `effects` property.\n- The created coupons and referral objects.\n\nIf `false`:\n- The rules are not executed and the `effects` property is always empty.\n- The response time improves.\n- You cannot use `responseContent` in the body.\n",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "dry",
              "in": "query",
              "description": "Indicates whether to persist the changes. Changes are ignored when `dry=true`.\n\nThis property only works when `runRuleEngine=true`.\n",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerProfileIntegrationRequestV2"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationStateV2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "409": {
              "description": "Too many requests - Avoid parallel requests, see the [docs](/docs/dev/tutorials/integrating-talon-one/#managing-parallel-requests).",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/customer_profiles": {
        "put": {
          "tags": [
            "Customer profiles"
          ],
          "summary": "Update multiple customer profiles",
          "description": "Update (or create) up to 1000 [customer profiles](/docs/dev/concepts/entities#customer-profile) in 1 request.\n\nThe `integrationId` must be any identifier that remains stable for\nthe customer. Do not use an ID that the customer can update\nthemselves. For example, you can use a database ID.\n\nA customer profile [can be linked to one or more sessions](/integration-api/#tag/Customer-sessions).\n",
          "operationId": "updateCustomerProfilesV2",
          "parameters": [
            {
              "name": "silent",
              "in": "query",
              "description": "Possible values: `yes` or `no`.\n- `yes`: Increases the perfomance of the API call by returning a 204 response.\n- `no`: Returns a 200 response that contains essential data such as the updated customer profiles and session-related information.\n",
              "schema": {
                "type": "string",
                "default": "yes"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleCustomerProfileIntegrationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MultipleCustomerProfileIntegrationResponseV2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/audiences": {
        "post": {
          "tags": [
            "Audiences"
          ],
          "summary": "Create audience",
          "description": "Create an audience. The audience can be created directly from scratch or can come from third party platforms.\n\nTo create an audience from an existing audience from a [technology partner](https://docs.talon.one/docs/dev/technology-partners/overview):\n1. Set the `integration` property to `mparticle`, `segment` etc., depending on a third-party platform.\n1. Set `integrationId` to the ID of this audience in a third-party platform.\n\nTo create an audience from an existing audience in another platform:\n1. Do not use the `integration` property.\n1. Set `integrationId` to the ID of this audience in the 3rd-party platform.\n\nTo create an audience from scratch:\n1. Only set the `name` property.\n\nOnce you create your first audience, audience-specific rule conditions are enabled in the Rule Builder.\n",
          "operationId": "createAudienceV2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewAudience"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Audience"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict. An Audience with this ID already exists for this integration.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/audiences/{audienceId}": {
        "put": {
          "tags": [
            "Audiences"
          ],
          "summary": "Update audience name",
          "description": "Update the name of the given audience created by a third-party integration. Sending a request to this endpoint does **not** trigger the rule engine.\n\nTo update the audience's members, use the [Update customer profile endpoint](#tag/Customer-profiles/operation/updateCustomerProfileV2).\n",
          "operationId": "updateAudienceV2",
          "parameters": [
            {
              "name": "audienceId",
              "in": "path",
              "description": "The ID of the audience. You get it via the `id` property when [creating an audience](#operation/createAudienceV2).",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAudience"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Audience"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Audiences"
          ],
          "summary": "Delete audience",
          "description": "Delete an audience created by a third-party integration.\n\n**Warning:** This endpoint also removes any associations recorded between a customer profile and this audience.\n",
          "operationId": "deleteAudienceV2",
          "parameters": [
            {
              "name": "audienceId",
              "in": "path",
              "description": "The ID of the audience. You get it via the `id` property when [creating an audience](#operation/createAudienceV2).",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/audiences/{audienceId}/memberships": {
        "delete": {
          "tags": [
            "Audiences"
          ],
          "summary": "Delete audience memberships",
          "description": "Remove all members from this audience.\n",
          "operationId": "deleteAudienceMembershipsV2",
          "parameters": [
            {
              "name": "audienceId",
              "in": "path",
              "description": "The ID of the audience. You get it via the `id` property when [creating an audience](#operation/createAudienceV2).",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          }
        }
      },
      "/v2/customer_audiences": {
        "post": {
          "tags": [
            "Audiences"
          ],
          "summary": "Update multiple customer profiles' audiences",
          "description": "Update the specified customer profiles with the specified audiences. Use this endpoint\nwhen customers join or leave audiences.\n\nThe limit of customer profiles per request is 1000.\n",
          "operationId": "updateCustomerProfileAudiences",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerProfileAudienceRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/audience_customers/{audienceId}/attributes": {
        "put": {
          "tags": [
            "Audiences"
          ],
          "summary": "Update profile attributes for all customers in audience",
          "description": "Update the specified profile attributes to the provided values for all customers in the specified audience.\n",
          "operationId": "updateAudienceCustomersAttributes",
          "parameters": [
            {
              "name": "audienceId",
              "in": "path",
              "description": "The ID of the audience. You get it via the `id` property when [creating an audience](#operation/createAudienceV2).",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeQuery"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v1/events": {
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "Track event",
          "description": "**Important:** This endpoint is **DEPRECATED**. Use [Track Event V2](https://docs.talon.one/integration-api/#tag/Events/operation/trackEventV2) instead.\n\n<blockquote>\n Triggers a custom event in a customer session. You can then check this event in your rules. **Important:** Talon.One offers a set of [built-in events](/docs/dev/concepts/events), ensure you do not create a custom event when you can use a built-in event.\n For example, use this endpoint to trigger an event when a user updates their payment information.\n\n Before using this endpoint, create your event as a custom attribute of type `event`.  See the [Developer docs](/docs/dev/concepts/events/#creating-a-custom-event).\n\n An event is always part of a session. If either the profile or the session does not exist,\n a new empty profile/session is created. If the specified session already exists, it must belong to the same `profileId` or an error will be returned.\n</blockquote>\n",
          "operationId": "trackEvent",
          "parameters": [
            {
              "name": "dry",
              "in": "query",
              "description": "Indicates whether to persist the changes. Changes are ignored when `dry=true`.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewEvent"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationState"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "409": {
              "description": "Too many requests - Avoid parallel requests, see the [docs](/docs/dev/tutorials/integrating-talon-one/#managing-parallel-requests).",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v2/events": {
        "post": {
          "tags": [
            "Events"
          ],
          "summary": "Track event V2",
          "description": "Triggers a custom event. You can then check this event in your rules.\n\nTalon.One offers a set of [built-in events](/docs/dev/concepts/events), ensure you do not create\na custom event when you can use a built-in event.\n\nFor example, use this endpoint to trigger an event when a customer shares a link to a product.\nSee the [tutorial](https://docs.talon.one/docs/product/tutorials/referrals/incentivizing-product-link-sharing).\n\n**Important:**\n- `profileId` is required. An event V2 is associated with a customer profile.\n- Before using this endpoint, create your event as a custom attribute of type `event`.\nSee the [Developer docs](/docs/dev/concepts/events/#creating-a-custom-event).\n",
          "operationId": "trackEventV2",
          "parameters": [
            {
              "name": "silent",
              "in": "query",
              "description": "Possible values: `yes` or `no`.\n- `yes`: Increases the perfomance of the API call by returning a 204 response.\n- `no`: Returns a 200 response that contains essential data such as the updated customer profiles and session-related information.\n",
              "schema": {
                "type": "string",
                "default": "yes"
              }
            },
            {
              "name": "dry",
              "in": "query",
              "description": "Indicates whether to persist the changes. Changes are ignored when `dry=true`.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationEventV2Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IntegrationStateV2"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v1/referrals": {
        "post": {
          "tags": [
            "Referrals"
          ],
          "summary": "Create referral code for an advocate",
          "description": "Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the `campaignId` parameter, and will be associated with the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile.\n",
          "operationId": "createReferral",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewReferral"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Referral"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v1/referrals_for_multiple_advocates": {
        "post": {
          "tags": [
            "Referrals"
          ],
          "summary": "Create referral codes for multiple advocates",
          "description": "Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the `campaignId` parameter, and one referral code will be associated with one advocate using the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile.\n",
          "operationId": "createReferralsForMultipleAdvocates",
          "parameters": [
            {
              "name": "silent",
              "in": "query",
              "description": "Possible values: `yes` or `no`.\n- `yes`: Increases the perfomance of the API call by returning a 204 response.\n- `no`: Returns a 200 response that contains essential data such as the updated customer profiles and session-related information.\n",
              "schema": {
                "type": "string",
                "default": "yes"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewReferralsForMultipleAdvocates"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "required": [
                      "data",
                      "totalResultSize"
                    ],
                    "type": "object",
                    "properties": {
                      "totalResultSize": {
                        "type": "integer"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Referral"
                        }
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v1/customer_data/{integrationId}": {
        "delete": {
          "tags": [
            "Customer profiles"
          ],
          "summary": "Delete customer's personal data",
          "description": "Delete all attributes on the customer profile and on entities that reference this customer profile.\n\n**Important:** To preserve performance, we recommend avoiding deleting customer data during peak-traffic hours.\n",
          "operationId": "deleteCustomerData",
          "parameters": [
            {
              "name": "integrationId",
              "in": "path",
              "description": "The integration ID of the customer profile. You can get the `integrationId` of a profile using:\n- A customer session integration Id with the [Update customer session endpoint](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2).\n- The Management API with the [List application's customers endpoint](https://docs.talon.one/management-api/#operation/getApplicationCustomers).\n",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ]
        }
      },
      "/v1/coupon_reservations/{couponValue}": {
        "post": {
          "tags": [
            "Coupons"
          ],
          "summary": "Create coupon reservation",
          "description": "Create a coupon reservation for specified customer profiles on the specified coupon.\n\nReserving a coupon allows you to associate a coupon code to a given customer(s).\nYou can then list the reserved coupons of a given customer\nwith the [List customer data endpoint](/integration-api/#operation/getCustomerInventory).\n\nIf a coupon gets created for a specific user, it will automatically show up in their coupons.\n\nWhen a user redeems a coupon, a reservation is automatically created after the redemption and\nthe used coupon will be returned in the [List customer data endpoint](/integration-api/#operation/getCustomerInventory).\n\n**Important:**\n- This endpoint creates a **soft** reservation. _Any_ customer\n  can use a reserved coupon code and proceed to checkout.\n- To create a hard reservation, use the\n  [Create coupons](/management-api/#operation/createCoupons) or\n  [Create coupons for multiple recipients](/management-api/#operation/createCouponsForMultipleRecipients) endpoints\n  setting the `recipientsIntegrationId` property.\n\nFor example, you can use this endpoint and `List customer data` to create a _coupon wallet_ by\nreserving coupon codes for a customer, and then displaying their coupon wallet\nwhen they visit your store.\n",
          "operationId": "createCouponReservation",
          "parameters": [
            {
              "name": "couponValue",
              "in": "path",
              "description": "The code of the coupon.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponReservations"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Coupon"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Coupons"
          ],
          "summary": "Delete coupon reservations",
          "description": "Remove all the coupon reservations from the provided customer profile integration IDs and the provided\ncoupon code.\n",
          "operationId": "deleteCouponReservation",
          "parameters": [
            {
              "name": "couponValue",
              "in": "path",
              "description": "The code of the coupon.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponReservations"
                }
              }
            },
            "required": true
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/v1/coupon_reservations/customerprofiles/{couponValue}": {
        "get": {
          "tags": [
            "Coupons"
          ],
          "summary": "List customers that have this coupon reserved",
          "description": "Return all customers that have this coupon marked as reserved.\n\nCoupons are reserved in the following ways:\n- To create a soft reservation (any customer can use the coupon), use the [Create coupon reservation](#operation/createCouponReservation) endpoint.\n- To create a hard reservation (only the given customer can use the coupon), create a coupon in the Campaign Manager for a given `recipientIntegrationId` or use the [Create coupons](/management-api/#operation/createCoupons) or [Create coupons for multiple recipients](/management-api/#operation/createCouponsForMultipleRecipients) endpoints.\n",
          "operationId": "getReservedCustomers",
          "parameters": [
            {
              "name": "couponValue",
              "in": "path",
              "description": "The code of the coupon.",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "required": [
                      "data",
                      "totalResultSize"
                    ],
                    "type": "object",
                    "properties": {
                      "totalResultSize": {
                        "type": "integer"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CustomerProfile"
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ]
        }
      },
      "/v1/customer_profiles/{integrationId}/inventory": {
        "get": {
          "tags": [
            "Customer profiles"
          ],
          "summary": "List customer data",
          "description": "Return the customer inventory regarding entities referencing this customer profile's `integrationId`.\n\nTypical entities returned are: customer profile information, referral codes, loyalty points and reserved coupons.\nReserved coupons also include redeemed coupons.\n\nYou can also use this endpoint to get the projected loyalty balances in order to notify\nyour customers about points that are about to expire, or to remind them how many points they have.\n",
          "operationId": "getCustomerInventory",
          "parameters": [
            {
              "name": "integrationId",
              "in": "path",
              "description": "The integration ID of the customer profile. You can get the `integrationId` of a profile using:\n- A customer session integration Id with the [Update customer session endpoint](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2).\n- The Management API with the [List application's customers endpoint](https://docs.talon.one/management-api/#operation/getApplicationCustomers).\n",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "profile",
              "in": "query",
              "description": "Set to `true` to include customer profile information in the response.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "referrals",
              "in": "query",
              "description": "Set to `true` to include referral information in the response.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "coupons",
              "in": "query",
              "description": "Set to `true` to include coupon information in the response.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "loyalty",
              "in": "query",
              "description": "Set to `true` to include loyalty information in the response.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "giveaways",
              "in": "query",
              "description": "Set to `true` to include giveaways information in the response.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "loyaltyProjectionEndDate",
              "in": "query",
              "description": "Set an end date to query the projected loyalty balances. You can project results up to 31 days from today.",
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerInventory"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "security": [
            {
              "api_key_v1": []
            }
          ]
        }
      },
      "/v1/catalogs/{catalogId}/sync": {
        "put": {
          "tags": [
            "Catalogs"
          ],
          "summary": "Sync cart item catalog",
          "description": "Perform one or more of the following sync actions on this cart item catalog, up to 1000 actions:\n\n- Add an item to the catalog.\n- Edit the attributes of an item in the catalog.\n- Edit the attributes of more than one item in the catalog.\n- Remove an item from the catalog.\n- Remove more than one item from the catalog.\n\n**Note**: For more information, see [our documentation on managing cart item catalogs](https://docs.talon.one/docs/product/account/dev-tools/managing-cart-item-catalogs).\n\n### Filtering cart items\n\nUse [cart item attributes](https://docs.talon.one/docs/product/account/dev-tools/managing-cart-item-catalogs#displaying-the-details-and-content-of-a-catalog)\nto filter items and select the ones you want to edit or delete when editing or deleting more than one item\nat a time.\n\nThe `filters` object contains the following properties:\n\n- `attr`: A [cart item attribute](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes)\n  connected to the catalog. It is applied to all items in the catalog.\n- `op`: The filtering operator indicating the relationship between the value of each\n  cart item in the catalog and the value of the `value` property for the attribute selected\n  in `attr`.\n\n  The value of `op` can be one of the following:\n\n  - `EQ`: Equal to `value`\n  - `LT`: Less than `value`\n  - `LE`: Less than or equal to `value`\n  - `GT`: Greater than `value`\n  - `GE`: Greater than or equal to `value`\n  - `IN`: One of the comma-separated values that `value` is set to.\n\n  **Note:** `GE`, `LE`, `GT`, `LT` are for numeric values only.\n\n- `value`: The value of the attribute selected in `attr`.\n\n### Payload examples\n\nSynchronization actions are sent as `PUT` requests. See the structure for each action:\n\n<details>\n  <summary><strong>Adding an item to the catalog</strong></summary>\n  <div>\n\n  ```json\n  {\n    \"actions\": [\n      {\n        \"payload\": {\n          \"attributes\": {\n            \"color\": \"Navy blue\",\n            \"type\": \"shoe\"\n          },\n          \"replaceIfExists\": true,\n          \"sku\": \"SKU1241028\"\n        },\n        \"type\": \"ADD\"\n      }\n    ]\n  }\n  ```\n  </div>\n</details>\n\n<details>\n  <summary><strong>Editing the attributes of an item in the catalog</strong></summary>\n  <div>\n\n  ```json\n  {\n    \"actions\": [\n      {\n        \"payload\": {\n          \"attributes\": {\n            \"age\": 11,\n            \"origin\": \"germany\"\n          },\n          \"createIfNotExists\": false,\n          \"sku\": \"SKU1241028\"\n        },\n        \"type\": \"PATCH\"\n      }\n    ]\n  }\n  ```\n  </div>\n</details>\n\n<details>\n  <summary><strong>Editing the attributes of several items at once</strong></summary>\n  <div>\n\n  ```json\n  {\n    \"actions\": [\n      {\n        \"payload\": {\n          \"attributes\": {\n            \"color\": \"red\"\n          },\n          \"filters\": [\n            {\n              \"attr\": \"color\",\n              \"op\": \"EQ\",\n              \"value\": \"blue\"\n            }\n          ]\n        },\n        \"type\": \"PATCH_MANY\"\n      }\n    ]\n  }\n  ```\n\n  </div>\n</details>\n\n<details>\n  <summary><strong>Removing an item from the catalog</strong></summary>\n  <div>\n\n  ```json\n  {\n    \"actions\": [\n      {\n        \"payload\": {\n          \"sku\": \"SKU1241028\"\n        },\n        \"type\": \"REMOVE\"\n      }\n    ]\n  }\n  ```\n\n  </div>\n</details>\n\n<details>\n  <summary><strong>Removing several items from the catalog at once</strong></summary>\n  <div>\n\n  ```json\n  {\n    \"actions\": [\n      {\n        \"payload\": {\n          \"filters\": [\n            {\n              \"attr\": \"color\",\n              \"op\": \"EQ\",\n              \"value\": \"blue\"\n            }\n          ]\n        },\n        \"type\": \"REMOVE_MANY\"\n      }\n    ]\n  }\n  ```\n  </div>\n</details>\n\n<details>\n  <summary><strong>Removing shoes of sizes above 45 from the catalog</strong></summary>\n  <div>\n  <p>\n  Let's imagine that we have a shoe store and we have decided to stop selling\n  shoes larger than size 45. We can remove from the catalog all the shoes of sizes above 45\n  with a single action:</p>\n\n  ```json\n  {\n    \"actions\": [\n      {\n        \"payload\": {\n          \"filters\": [\n            {\n              \"attr\": \"size\",\n              \"op\": \"GT\",\n              \"value\": \"45\"\n            }\n          ]\n        },\n        \"type\": \"REMOVE_MANY\"\n      }\n    ]\n  }\n  ```\n  </div>\n</details>\n",
          "operationId": "syncCatalog",
          "parameters": [
            {
              "name": "catalogId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogSyncRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid API key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            },
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseWithStatus"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "body"
        }
      }
    },
    "components": {
      "schemas": {
        "ErrorResponse": {
          "required": [
            "message"
          ],
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "A message describing the error."
            },
            "errors": {
              "type": "array",
              "description": "An array of individual problems encountered during the request.",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            }
          }
        },
        "ErrorResponseWithStatus": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "errors": {
              "type": "array",
              "description": "An array of individual problems encountered during the request.",
              "items": {
                "$ref": "#/components/schemas/APIError"
              }
            },
            "StatusCode": {
              "type": "integer",
              "description": "The error code"
            }
          }
        },
        "APIError": {
          "required": [
            "source",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Short description of the problem."
            },
            "details": {
              "type": "string",
              "description": "Longer description of this specific instance of the problem."
            },
            "source": {
              "$ref": "#/components/schemas/ErrorSource"
            }
          }
        },
        "FeatureFlag": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name for the featureflag."
            },
            "value": {
              "type": "string",
              "description": "The value for the featureflag."
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was last created.",
              "format": "date-time"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time"
            }
          }
        },
        "ErrorSource": {
          "type": "object",
          "properties": {
            "pointer": {
              "type": "string",
              "description": "Pointer to the path in the payload that caused this error."
            },
            "parameter": {
              "type": "string",
              "description": "Query parameter that caused this error."
            },
            "line": {
              "type": "string",
              "description": "Line number in uploaded multipart file that caused this error. 'N/A' if unknown."
            },
            "resource": {
              "type": "string",
              "description": "Pointer to the resource that caused this error."
            }
          },
          "description": "The source of the current error, exactly one of `pointer`, `parameter` or `line` will be defined.\n"
        },
        "Entity": {
          "required": [
            "created",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            }
          }
        },
        "EntityWithTalangVisibleID": {
          "required": [
            "created",
            "id"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity."
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time"
            }
          }
        },
        "MutableEntity": {
          "required": [
            "modified"
          ],
          "type": "object",
          "properties": {
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            }
          }
        },
        "AccountEntity": {
          "required": [
            "accountId"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            }
          }
        },
        "UserEntity": {
          "required": [
            "userId"
          ],
          "type": "object",
          "properties": {
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            }
          }
        },
        "EmailEntity": {
          "required": [
            "email"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "The email address associated with your account.",
              "format": "email",
              "example": "john.doe@example.com"
            }
          }
        },
        "ApplicationEntity": {
          "required": [
            "applicationId"
          ],
          "type": "object",
          "properties": {
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            }
          }
        },
        "LoyaltyProgramEntity": {
          "required": [
            "programID"
          ],
          "type": "object",
          "properties": {
            "programID": {
              "type": "integer",
              "description": "The ID of the loyalty program that owns this entity.",
              "example": 125
            }
          }
        },
        "CampaignGroupEntity": {
          "type": "object",
          "properties": {
            "campaignGroups": {
              "type": "array",
              "description": "The IDs of the campaign groups that own this entity.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "MultiApplicationEntity": {
          "required": [
            "applicationIds"
          ],
          "type": "object",
          "properties": {
            "applicationIds": {
              "minItems": 1,
              "type": "array",
              "description": "The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "CampaignEntity": {
          "required": [
            "campaignId"
          ],
          "type": "object",
          "properties": {
            "campaignId": {
              "title": "Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 211
            }
          }
        },
        "ApplicationSessionEntity": {
          "required": [
            "sessionId"
          ],
          "type": "object",
          "properties": {
            "sessionId": {
              "type": "integer",
              "description": "The globally unique Talon.One ID of the session where this entity was created."
            }
          }
        },
        "ApplicationCustomerEntity": {
          "type": "object",
          "properties": {
            "profileId": {
              "type": "integer",
              "description": "The globally unique Talon.One ID of the customer that created this entity.",
              "example": 138
            }
          }
        },
        "IntegrationEntity": {
          "required": [
            "created",
            "integrationId"
          ],
          "type": "object",
          "properties": {
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer.",
              "format": "string",
              "example": "URNGV8294NV"
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-02-07T08:15:22Z"
            }
          }
        },
        "IntegrationProfileEntity": {
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            }
          }
        },
        "CouponValue": {
          "type": "object",
          "properties": {
            "value": {
              "title": "Coupon Code",
              "minLength": 4,
              "type": "string",
              "description": "The coupon code.",
              "example": "XMAS-20-2021"
            }
          }
        },
        "CouponConstraints": {
          "type": "object",
          "properties": {
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            }
          }
        },
        "CodeGeneratorSettings": {
          "required": [
            "couponPattern",
            "validCharacters"
          ],
          "type": "object",
          "properties": {
            "validCharacters": {
              "type": "array",
              "description": "List of characters used to generate the random parts of a code. Defaults to a list equivalent to the\n`[A-Z, 0-9]` regexp.\n",
              "example": [
                "A",
                "B",
                "C",
                "D",
                "E",
                "2",
                "0"
              ],
              "items": {
                "type": "string"
              }
            },
            "couponPattern": {
              "maxLength": 100,
              "minLength": 3,
              "type": "string",
              "description": "The pattern used to generate coupon codes. The character `#` is a placeholder and is replaced by a random character from the `validCharacters` set.\n",
              "example": "SUMMER-####-####"
            }
          }
        },
        "Session": {
          "required": [
            "created",
            "token",
            "userId"
          ],
          "type": "object",
          "properties": {
            "userId": {
              "type": "integer",
              "description": "The ID of the user of this session.",
              "example": 109
            },
            "token": {
              "type": "string",
              "description": "The token to use as a bearer token to query Management API endpoints.",
              "example": "dy_Fa_lQ4iDAnqldJFvVEmnsN8xDTxej19l0LZDBJhQ"
            },
            "created": {
              "type": "string",
              "description": "Unix timestamp indicating when the session was first created.",
              "format": "date-time"
            }
          }
        },
        "LoginParams": {
          "required": [
            "email",
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "The email address associated with your account.",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string",
              "description": "The password for your account.",
              "example": "admin123456"
            }
          },
          "description": ""
        },
        "AttributesMandatory": {
          "type": "object",
          "properties": {
            "campaigns": {
              "type": "array",
              "description": "List of mandatory attributes for campaigns.",
              "items": {
                "type": "string"
              }
            },
            "coupons": {
              "type": "array",
              "description": "List of mandatory attributes for campaigns.",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Arbitrary settings associated with attributes."
        },
        "AttributesSettings": {
          "type": "object",
          "properties": {
            "mandatory": {
              "$ref": "#/components/schemas/AttributesMandatory"
            }
          },
          "description": "Arbitrary settings associated with attributes."
        },
        "UpdateApplication": {
          "required": [
            "currency",
            "name",
            "timezone"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The name of this application.",
              "example": "My Application"
            },
            "description": {
              "type": "string",
              "description": "A longer description of the application.",
              "example": "A test Application"
            },
            "timezone": {
              "minLength": 1,
              "type": "string",
              "description": "A string containing an IANA timezone descriptor.",
              "example": "Europe/Berlin"
            },
            "currency": {
              "minLength": 1,
              "type": "string",
              "description": "The default currency for new customer sessions.",
              "example": "EUR"
            },
            "caseSensitivity": {
              "type": "string",
              "description": "The case sensitivity behavior to check coupon codes in the campaigns of this Application.",
              "example": "sensitive",
              "enum": [
                "sensitive",
                "insensitive-uppercase",
                "insensitive-lowercase"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "limits": {
              "type": "array",
              "description": "Default limits for campaigns created in this application.",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "campaignPriority": {
              "type": "string",
              "description": "Default [priority](https://docs.talon.one/docs/product/applications/setting-up-campaign-priorities) for campaigns\ncreated in this Application.\n",
              "example": "universal",
              "default": "universal",
              "enum": [
                "universal",
                "stackable",
                "exclusive"
              ]
            },
            "exclusiveCampaignsStrategy": {
              "type": "string",
              "description": "The strategy used when choosing exclusive campaigns for evaluation.",
              "example": "listOrder",
              "default": "listOrder",
              "enum": [
                "listOrder",
                "lowestDiscount",
                "highestDiscount"
              ]
            },
            "defaultDiscountScope": {
              "type": "string",
              "description": "The default scope to apply `setDiscount` effects on if no scope was provided with the effect.\n",
              "enum": [
                "sessionTotal",
                "cartItems",
                "additionalCosts"
              ]
            },
            "enableCascadingDiscounts": {
              "type": "boolean",
              "description": "Indicates if discounts should cascade for this Application."
            },
            "enableFlattenedCartItems": {
              "type": "boolean",
              "description": "Indicates if cart items of quantity larger than one should be separated into different items of quantity one. See [the docs](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items).\n"
            },
            "attributesSettings": {
              "$ref": "#/components/schemas/AttributesSettings"
            },
            "sandbox": {
              "type": "boolean",
              "description": "Indicates if this is a live or sandbox Application."
            },
            "enablePartialDiscounts": {
              "type": "boolean",
              "description": "Indicates if this Application supports partial discounts.",
              "example": false
            },
            "defaultDiscountAdditionalCostPerItemScope": {
              "type": "string",
              "description": "The default scope to apply `setDiscountPerItem` effects on if no scope was provided with the effect.\n",
              "enum": [
                "price",
                "itemTotal",
                "additionalCosts"
              ]
            }
          }
        },
        "NewApplication": {
          "required": [
            "currency",
            "name",
            "timezone"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The name of this application.",
              "example": "My Application"
            },
            "description": {
              "type": "string",
              "description": "A longer description of the application.",
              "example": "A test Application"
            },
            "timezone": {
              "minLength": 1,
              "type": "string",
              "description": "A string containing an IANA timezone descriptor.",
              "example": "Europe/Berlin"
            },
            "currency": {
              "minLength": 1,
              "type": "string",
              "description": "The default currency for new customer sessions.",
              "example": "EUR"
            },
            "caseSensitivity": {
              "type": "string",
              "description": "The case sensitivity behavior to check coupon codes in the campaigns of this Application.",
              "example": "sensitive",
              "enum": [
                "sensitive",
                "insensitive-uppercase",
                "insensitive-lowercase"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "limits": {
              "type": "array",
              "description": "Default limits for campaigns created in this application.",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "campaignPriority": {
              "type": "string",
              "description": "Default [priority](https://docs.talon.one/docs/product/applications/setting-up-campaign-priorities) for campaigns\ncreated in this Application.\n",
              "example": "universal",
              "default": "universal",
              "enum": [
                "universal",
                "stackable",
                "exclusive"
              ]
            },
            "exclusiveCampaignsStrategy": {
              "type": "string",
              "description": "The strategy used when choosing exclusive campaigns for evaluation.",
              "example": "listOrder",
              "default": "listOrder",
              "enum": [
                "listOrder",
                "lowestDiscount",
                "highestDiscount"
              ]
            },
            "defaultDiscountScope": {
              "type": "string",
              "description": "The default scope to apply `setDiscount` effects on if no scope was provided with the effect.\n",
              "enum": [
                "sessionTotal",
                "cartItems",
                "additionalCosts"
              ]
            },
            "enableCascadingDiscounts": {
              "type": "boolean",
              "description": "Indicates if discounts should cascade for this Application."
            },
            "enableFlattenedCartItems": {
              "type": "boolean",
              "description": "Indicates if cart items of quantity larger than one should be separated into different items of quantity one. See [the docs](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items).\n"
            },
            "attributesSettings": {
              "$ref": "#/components/schemas/AttributesSettings"
            },
            "sandbox": {
              "type": "boolean",
              "description": "Indicates if this is a live or sandbox Application."
            },
            "enablePartialDiscounts": {
              "type": "boolean",
              "description": "Indicates if this Application supports partial discounts.",
              "example": false
            },
            "defaultDiscountAdditionalCostPerItemScope": {
              "type": "string",
              "description": "The default scope to apply `setDiscountPerItem` effects on if no scope was provided with the effect.\n",
              "enum": [
                "price",
                "itemTotal",
                "additionalCosts"
              ]
            },
            "key": {
              "pattern": "^[a-fA-F0-9]{16}$",
              "type": "string",
              "description": "Hex key for HMAC-signing API calls as coming from this application (16 hex digits)."
            }
          },
          "description": ""
        },
        "Application": {
          "required": [
            "accountId",
            "created",
            "currency",
            "id",
            "loyaltyPrograms",
            "modified",
            "name",
            "timezone"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The name of this application.",
              "example": "My Application"
            },
            "description": {
              "type": "string",
              "description": "A longer description of the application.",
              "example": "A test Application"
            },
            "timezone": {
              "minLength": 1,
              "type": "string",
              "description": "A string containing an IANA timezone descriptor.",
              "example": "Europe/Berlin"
            },
            "currency": {
              "minLength": 1,
              "type": "string",
              "description": "The default currency for new customer sessions.",
              "example": "EUR"
            },
            "caseSensitivity": {
              "type": "string",
              "description": "The case sensitivity behavior to check coupon codes in the campaigns of this Application.",
              "example": "sensitive",
              "enum": [
                "sensitive",
                "insensitive-uppercase",
                "insensitive-lowercase"
              ]
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "limits": {
              "type": "array",
              "description": "Default limits for campaigns created in this application.",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "campaignPriority": {
              "type": "string",
              "description": "Default [priority](https://docs.talon.one/docs/product/applications/setting-up-campaign-priorities) for campaigns\ncreated in this Application.\n",
              "example": "universal",
              "default": "universal",
              "enum": [
                "universal",
                "stackable",
                "exclusive"
              ]
            },
            "exclusiveCampaignsStrategy": {
              "type": "string",
              "description": "The strategy used when choosing exclusive campaigns for evaluation.",
              "example": "listOrder",
              "default": "listOrder",
              "enum": [
                "listOrder",
                "lowestDiscount",
                "highestDiscount"
              ]
            },
            "defaultDiscountScope": {
              "type": "string",
              "description": "The default scope to apply `setDiscount` effects on if no scope was provided with the effect.\n",
              "enum": [
                "sessionTotal",
                "cartItems",
                "additionalCosts"
              ]
            },
            "enableCascadingDiscounts": {
              "type": "boolean",
              "description": "Indicates if discounts should cascade for this Application."
            },
            "enableFlattenedCartItems": {
              "type": "boolean",
              "description": "Indicates if cart items of quantity larger than one should be separated into different items of quantity one. See [the docs](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items).\n"
            },
            "attributesSettings": {
              "$ref": "#/components/schemas/AttributesSettings"
            },
            "sandbox": {
              "type": "boolean",
              "description": "Indicates if this is a live or sandbox Application."
            },
            "enablePartialDiscounts": {
              "type": "boolean",
              "description": "Indicates if this Application supports partial discounts.",
              "example": false
            },
            "defaultDiscountAdditionalCostPerItemScope": {
              "type": "string",
              "description": "The default scope to apply `setDiscountPerItem` effects on if no scope was provided with the effect.\n",
              "enum": [
                "price",
                "itemTotal",
                "additionalCosts"
              ]
            },
            "loyaltyPrograms": {
              "type": "array",
              "description": "An array containing all the loyalty programs to which this application is subscribed.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyProgram"
              }
            }
          },
          "description": ""
        },
        "NewCampaignGroup": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The name of this campaign group."
            },
            "description": {
              "type": "string",
              "description": "A longer description of the campaign group."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that this campaign group is enabled for.",
              "items": {
                "type": "integer"
              }
            },
            "campaignIds": {
              "type": "array",
              "description": "A list of the IDs of the campaigns that this campaign group owns.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "CampaignGroup": {
          "required": [
            "accountId",
            "created",
            "id",
            "modified",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The name of this campaign group."
            },
            "description": {
              "type": "string",
              "description": "A longer description of the campaign group."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that this campaign group is enabled for.",
              "items": {
                "type": "integer"
              }
            },
            "campaignIds": {
              "type": "array",
              "description": "A list of the IDs of the campaigns that this campaign group owns.",
              "items": {
                "type": "integer"
              }
            }
          },
          "description": ""
        },
        "UpdateCampaignGroup": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The name of this campaign group."
            },
            "description": {
              "type": "string",
              "description": "A longer description of the campaign group."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that this campaign group is enabled for.",
              "items": {
                "type": "integer"
              }
            },
            "campaignIds": {
              "type": "array",
              "description": "A list of the IDs of the campaigns that this campaign group owns.",
              "items": {
                "type": "integer"
              }
            }
          },
          "description": ""
        },
        "NewCampaign": {
          "required": [
            "features",
            "limits",
            "name",
            "state",
            "tags"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Campaign Name",
              "minLength": 1,
              "type": "string",
              "description": "A user-facing name for this campaign.",
              "example": "Summer promotions"
            },
            "description": {
              "title": "Campaign Description",
              "type": "string",
              "description": "A detailed description of the campaign.",
              "example": "Campaign for all summer 2021 promotions"
            },
            "startTime": {
              "type": "string",
              "description": "Timestamp when the campaign will become active.",
              "format": "date-time",
              "example": "2021-07-20T22:00:00Z"
            },
            "endTime": {
              "type": "string",
              "description": "Timestamp the campaign will become inactive.",
              "format": "date-time",
              "example": "2021-09-22T22:00:00Z"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "state": {
              "type": "string",
              "description": "A disabled or archived campaign is not evaluated for rules or coupons.\n",
              "default": "enabled",
              "enum": [
                "enabled",
                "disabled",
                "archived"
              ]
            },
            "activeRulesetId": {
              "type": "integer",
              "description": "[ID of Ruleset](https://docs.talon.one/management-api/#operation/getRulesets) this\ncampaign applies on customer session evaluation.\n"
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign.",
              "example": [
                "summer"
              ],
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "The features enabled in this campaign.",
              "example": [
                "coupons",
                "referrals"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "coupons",
                  "referrals",
                  "loyalty",
                  "giveaways"
                ]
              }
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "referralSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "limits": {
              "type": "array",
              "description": "The set of [budget limits](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/) for this campaign.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "campaignGroups": {
              "type": "array",
              "description": "The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/managing-campaign-groups/) this campaign belongs to.\n",
              "example": [
                1,
                3
              ],
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "UpdateCampaign": {
          "required": [
            "features",
            "limits",
            "name",
            "tags"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Campaign Name",
              "minLength": 1,
              "type": "string",
              "description": "A user-facing name for this campaign."
            },
            "description": {
              "title": "Campaign Description",
              "type": "string",
              "description": "A detailed description of the campaign."
            },
            "startTime": {
              "type": "string",
              "description": "Timestamp when the campaign will become active.",
              "format": "date-time"
            },
            "endTime": {
              "type": "string",
              "description": "Timestamp when the campaign will become inactive.",
              "format": "date-time"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "state": {
              "type": "string",
              "description": "A disabled or archived campaign is not evaluated for rules or coupons.\n",
              "default": "enabled",
              "enum": [
                "enabled",
                "disabled",
                "archived"
              ]
            },
            "activeRulesetId": {
              "type": "integer",
              "description": "ID of Ruleset this campaign applies on customer session evaluation."
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign.",
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "A list of features for the campaign.",
              "items": {
                "type": "string",
                "enum": [
                  "coupons",
                  "referrals",
                  "loyalty",
                  "giveaways"
                ]
              }
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "referralSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "limits": {
              "type": "array",
              "description": "The set of limits that will operate for this campaign.",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "campaignGroups": {
              "type": "array",
              "description": "The IDs of the campaign groups that own this entity.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "Campaign": {
          "required": [
            "applicationId",
            "created",
            "description",
            "features",
            "id",
            "limits",
            "name",
            "state",
            "tags",
            "userId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity."
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "name": {
              "title": "Campaign Name",
              "minLength": 1,
              "type": "string",
              "description": "A user-facing name for this campaign.",
              "example": "Summer promotions"
            },
            "description": {
              "title": "Campaign Description",
              "type": "string",
              "description": "A detailed description of the campaign.",
              "example": "Campaign for all summer 2021 promotions"
            },
            "startTime": {
              "type": "string",
              "description": "Timestamp when the campaign will become active.",
              "format": "date-time",
              "example": "2021-07-20T22:00:00Z"
            },
            "endTime": {
              "type": "string",
              "description": "Timestamp the campaign will become inactive.",
              "format": "date-time",
              "example": "2021-09-22T22:00:00Z"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "state": {
              "type": "string",
              "description": "A disabled or archived campaign is not evaluated for rules or coupons.\n",
              "default": "enabled",
              "enum": [
                "enabled",
                "disabled",
                "archived"
              ]
            },
            "activeRulesetId": {
              "type": "integer",
              "description": "[ID of Ruleset](https://docs.talon.one/management-api/#operation/getRulesets) this\ncampaign applies on customer session evaluation.\n"
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign.",
              "example": [
                "summer"
              ],
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "The features enabled in this campaign.",
              "example": [
                "coupons",
                "referrals"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "coupons",
                  "referrals",
                  "loyalty",
                  "giveaways"
                ]
              }
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "referralSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "limits": {
              "type": "array",
              "description": "The set of [budget limits](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/) for this campaign.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "campaignGroups": {
              "type": "array",
              "description": "The IDs of the [campaign groups](https://docs.talon.one/docs/product/account/managing-campaign-groups/) this campaign belongs to.\n",
              "example": [
                1,
                3
              ],
              "items": {
                "type": "integer"
              }
            },
            "couponRedemptionCount": {
              "type": "integer",
              "description": "Number of coupons redeemed in the campaign.",
              "example": 163
            },
            "referralRedemptionCount": {
              "type": "integer",
              "description": "Number of referral codes redeemed in the campaign.",
              "example": 3
            },
            "discountCount": {
              "type": "number",
              "description": "Total amount of discounts redeemed in the campaign.",
              "example": 288
            },
            "discountEffectCount": {
              "type": "integer",
              "description": "Total number of times discounts were redeemed in this campaign.",
              "example": 343
            },
            "couponCreationCount": {
              "type": "integer",
              "description": "Total number of coupons created by rules in this campaign.",
              "example": 16
            },
            "customEffectCount": {
              "type": "integer",
              "description": "Total number of custom effects triggered by rules in this campaign.",
              "example": 0
            },
            "referralCreationCount": {
              "type": "integer",
              "description": "Total number of referrals created by rules in this campaign.",
              "example": 8
            },
            "addFreeItemEffectCount": {
              "type": "integer",
              "description": "Total number of times triggering add free item effext is allowed in this campaign.",
              "example": 0
            },
            "awardedGiveawaysCount": {
              "type": "integer",
              "description": "Total number of giveaways awarded by rules in this campaign.",
              "example": 9
            },
            "createdLoyaltyPointsCount": {
              "type": "number",
              "description": "Total number of loyalty points created by rules in this campaign.",
              "example": 9
            },
            "createdLoyaltyPointsEffectCount": {
              "type": "integer",
              "description": "Total number of loyalty point creation effects triggered by rules in this campaign.",
              "example": 2
            },
            "redeemedLoyaltyPointsCount": {
              "type": "number",
              "description": "Total number of loyalty points redeemed by rules in this campaign.",
              "example": 8
            },
            "redeemedLoyaltyPointsEffectCount": {
              "type": "integer",
              "description": "Total number of loyalty point redemption effects triggered by rules in this campaign.",
              "example": 9
            },
            "callApiEffectCount": {
              "type": "integer",
              "description": "Total number of webhook triggered by rules in this campaign.",
              "example": 0
            },
            "lastActivity": {
              "type": "string",
              "description": "Timestamp of the most recent event received by this campaign.",
              "format": "date-time",
              "example": "2022-11-10T23:00:00Z"
            },
            "updated": {
              "type": "string",
              "description": "Timestamp of the most recent update to the campaign's property. Updates to external entities used in this campaign\nare **not** registered by this property, such as collection or coupon updates.\n",
              "format": "date-time"
            },
            "createdBy": {
              "type": "string",
              "description": "Name of the user who created this campaign if available.",
              "example": "John Doe"
            },
            "updatedBy": {
              "type": "string",
              "description": "Name of the user who last updated this campaign if available.",
              "example": "Jane Doe"
            },
            "templateId": {
              "type": "integer",
              "description": "The ID of the Campaign Template this Campaign was created from.",
              "example": 3
            }
          },
          "description": ""
        },
        "NewRuleset": {
          "required": [
            "bindings",
            "rules"
          ],
          "type": "object",
          "properties": {
            "rules": {
              "type": "array",
              "description": "Set of rules to apply.",
              "items": {
                "$ref": "#/components/schemas/Rule"
              }
            },
            "bindings": {
              "type": "array",
              "description": "An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.",
              "example": [],
              "items": {
                "$ref": "#/components/schemas/Binding"
              }
            },
            "rbVersion": {
              "type": "string",
              "description": "The version of the rulebuilder used to create this ruleset.",
              "example": "v2"
            },
            "activate": {
              "type": "boolean",
              "description": "Indicates whether this created ruleset should be activated for the campaign that owns it."
            }
          }
        },
        "Ruleset": {
          "required": [
            "bindings",
            "created",
            "id",
            "rules",
            "userId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "rules": {
              "type": "array",
              "description": "Set of rules to apply.",
              "items": {
                "$ref": "#/components/schemas/Rule"
              }
            },
            "bindings": {
              "type": "array",
              "description": "An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.",
              "example": [],
              "items": {
                "$ref": "#/components/schemas/Binding"
              }
            },
            "rbVersion": {
              "type": "string",
              "description": "The version of the rulebuilder used to create this ruleset.",
              "example": "v2"
            },
            "activate": {
              "type": "boolean",
              "description": "Indicates whether this created ruleset should be activated for the campaign that owns it."
            },
            "campaignId": {
              "title": "Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 320
            },
            "templateId": {
              "title": "Campaign Template ID",
              "type": "integer",
              "description": "The ID of the campaign template that owns this entity.",
              "example": 3
            },
            "activatedAt": {
              "type": "string",
              "description": "Timestamp indicating when this Ruleset was activated.",
              "format": "date-time"
            }
          },
          "description": ""
        },
        "Binding": {
          "required": [
            "expression",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "A descriptive name for the value to be bound.",
              "example": "my property"
            },
            "type": {
              "type": "string",
              "description": "The kind of binding. Possible values are:\n- `bundle`\n- `cartItemFilter`\n- `subledgerBalance`\n- `templateParameter`\n",
              "example": "templateParameter"
            },
            "expression": {
              "type": "array",
              "description": "A Talang expression that will be evaluated and its result attached to the name of the binding.",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "valueType": {
              "type": "string",
              "description": "Can be one of the following:\n- `string`\n- `number`\n- `boolean`\n",
              "example": "string"
            }
          }
        },
        "Rule": {
          "required": [
            "condition",
            "effects",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "A short description of the rule.",
              "example": "Give discount via coupon"
            },
            "description": {
              "type": "string",
              "description": "A longer, more detailed description of the rule.",
              "example": "Creates a discount when a coupon is valid"
            },
            "bindings": {
              "type": "array",
              "description": "An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.",
              "items": {
                "$ref": "#/components/schemas/Binding"
              }
            },
            "condition": {
              "minItems": 1,
              "type": "array",
              "description": "A Talang expression that will be evaluated in the context of the given event.",
              "example": [
                "and",
                [
                  "couponValid"
                ]
              ],
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "effects": {
              "type": "array",
              "description": "An array of effectful Talang expressions in arrays that will be evaluated when a rule matches.",
              "example": [
                "catch",
                [
                  "noop"
                ],
                [
                  "setDiscount",
                  "10% off",
                  [
                    "*",
                    [
                      ".",
                      "Session",
                      "Total"
                    ],
                    [
                      "/",
                      10,
                      100
                    ]
                  ]
                ]
              ],
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "TemplateLimitConfig": {
          "required": [
            "action",
            "entities",
            "limit"
          ],
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "The limitable action to which this limit applies. For example:\n- `setDiscount`\n- `setDiscountEffect`\n- `redeemCoupon`\n- `createCoupon`\n",
              "example": "createCoupon"
            },
            "limit": {
              "minimum": 0,
              "type": "number",
              "description": "The value to set for the limit.",
              "example": 1000
            },
            "period": {
              "type": "string",
              "description": "The period on which the budget limit recurs.",
              "example": "yearly",
              "enum": [
                "daily",
                "weekly",
                "monthly",
                "yearly"
              ]
            },
            "entities": {
              "type": "array",
              "description": "The entity that this limit applies to.",
              "example": [
                "Coupon"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "Coupon",
                  "Referral",
                  "Profile",
                  "Identifier"
                ]
              }
            }
          },
          "description": ""
        },
        "LimitConfig": {
          "required": [
            "action",
            "entities",
            "limit"
          ],
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "The limitable action to which this limit applies. For example:\n- `setDiscount`\n- `setDiscountEffect`\n- `redeemCoupon`\n- `createCoupon`\n",
              "example": "createCoupon"
            },
            "limit": {
              "minimum": 0,
              "type": "number",
              "description": "The value to set for the limit.",
              "example": 1000
            },
            "period": {
              "type": "string",
              "description": "The period on which the budget limit recurs.",
              "example": "yearly",
              "enum": [
                "daily",
                "weekly",
                "monthly",
                "yearly"
              ]
            },
            "entities": {
              "type": "array",
              "description": "The entity that this limit applies to.",
              "example": [
                "Coupon"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "Coupon",
                  "Referral",
                  "Profile",
                  "Identifier"
                ]
              }
            }
          }
        },
        "CampaignSet": {
          "required": [
            "applicationId",
            "created",
            "id",
            "set",
            "version"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "version": {
              "minimum": 1,
              "type": "integer",
              "description": "Version of the campaign set."
            },
            "set": {
              "$ref": "#/components/schemas/CampaignSetBranchNode"
            }
          },
          "description": ""
        },
        "CampaignSetV2": {
          "required": [
            "applicationId",
            "created",
            "id",
            "set",
            "version"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "version": {
              "minimum": 1,
              "type": "integer",
              "description": "Version of the campaign set."
            },
            "set": {
              "$ref": "#/components/schemas/CampaignPrioritiesV2"
            }
          },
          "description": ""
        },
        "CampaignSetIDs": {
          "type": "object",
          "properties": {
            "campaignId": {
              "type": "integer",
              "description": "ID of the campaign"
            }
          },
          "description": "Campaign IDs for each priority."
        },
        "CampaignPrioritiesV2": {
          "type": "object",
          "properties": {
            "exclusive": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignSetIDs"
              }
            },
            "stackable": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignSetIDs"
              }
            },
            "universal": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignSetIDs"
              }
            }
          }
        },
        "CampaignSetNode": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          }
        },
        "CampaignSetBranchNode": {
          "required": [
            "elements",
            "name",
            "operator",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Indicates the node type.",
              "enum": [
                "SET"
              ]
            },
            "name": {
              "type": "string",
              "description": "Name of the set"
            },
            "operator": {
              "type": "string",
              "description": "How does the set operates on its elements.",
              "enum": [
                "ALL",
                "FIRST"
              ]
            },
            "elements": {
              "type": "array",
              "description": "Child elements of this set.",
              "items": {
                "$ref": "#/components/schemas/CampaignSetNode"
              }
            }
          }
        },
        "CampaignSetLeafNode": {
          "required": [
            "campaignId",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Indicates the node type.",
              "enum": [
                "CAMPAIGN"
              ]
            },
            "campaignId": {
              "type": "integer",
              "description": "ID of the campaign"
            }
          }
        },
        "NewCampaignSet": {
          "required": [
            "applicationId",
            "set",
            "version"
          ],
          "type": "object",
          "properties": {
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "version": {
              "minimum": 1,
              "type": "integer",
              "description": "Version of the campaign set."
            },
            "set": {
              "$ref": "#/components/schemas/CampaignSetBranchNode"
            }
          },
          "description": ""
        },
        "NewCampaignSetV2": {
          "required": [
            "applicationId",
            "set",
            "version"
          ],
          "type": "object",
          "properties": {
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "version": {
              "minimum": 1,
              "type": "integer",
              "description": "Version of the campaign set."
            },
            "set": {
              "$ref": "#/components/schemas/CampaignPrioritiesV2"
            }
          },
          "description": ""
        },
        "ReferralConstraints": {
          "type": "object",
          "properties": {
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. `0` means no limit but any campaign usage limits will still apply.\n",
              "example": 1
            }
          }
        },
        "UpdateReferralBatch": {
          "required": [
            "batchID"
          ],
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "batchID": {
              "title": "Batch ID",
              "type": "string",
              "description": "The id of the batch the referral belongs to.",
              "example": "32535-43255"
            },
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n",
              "example": 1
            }
          }
        },
        "NewReferral": {
          "required": [
            "advocateProfileIntegrationId",
            "campaignId"
          ],
          "type": "object",
          "properties": {
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. `0` means no limit but any campaign usage limits will still apply.\n",
              "example": 1
            },
            "campaignId": {
              "title": "Referral's Campaign ID",
              "type": "integer",
              "description": "ID of the campaign from which the referral received the referral code.",
              "example": 78
            },
            "advocateProfileIntegrationId": {
              "title": "Advocate's Profile ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The Integration ID of the Advocate's Profile.",
              "example": "URNGV8294NV"
            },
            "friendProfileIntegrationId": {
              "title": "Friend's Profile ID",
              "type": "string",
              "description": "An optional Integration ID of the Friend's Profile.",
              "example": "BZGGC2454PA"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            }
          },
          "description": ""
        },
        "ImportEntity": {
          "type": "object",
          "properties": {
            "importId": {
              "type": "integer",
              "description": "The ID of the Import which created this referral."
            }
          }
        },
        "Referral": {
          "required": [
            "advocateProfileIntegrationId",
            "campaignId",
            "code",
            "created",
            "id",
            "usageCounter",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. `0` means no limit but any campaign usage limits will still apply.\n",
              "example": 1
            },
            "campaignId": {
              "title": "Referral's Campaign ID",
              "type": "integer",
              "description": "ID of the campaign from which the referral received the referral code.",
              "example": 78
            },
            "advocateProfileIntegrationId": {
              "title": "Advocate's Profile ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The Integration ID of the Advocate's Profile.",
              "example": "URNGV8294NV"
            },
            "friendProfileIntegrationId": {
              "title": "Friend's Profile ID",
              "type": "string",
              "description": "An optional Integration ID of the Friend's Profile.",
              "example": "BZGGC2454PA"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "importId": {
              "type": "integer",
              "description": "The ID of the Import which created this referral."
            },
            "code": {
              "title": "Referral code",
              "minLength": 4,
              "type": "string",
              "description": "The referral code.",
              "example": "27G47Y54VH9L"
            },
            "usageCounter": {
              "title": "Referral code Usages",
              "type": "integer",
              "description": "The number of times this referral code has been successfully used.",
              "example": 1
            },
            "batchId": {
              "title": "Batch ID",
              "type": "string",
              "description": "The ID of the batch the referrals belong to.",
              "example": "tqyrgahe"
            }
          },
          "description": ""
        },
        "UpdateReferral": {
          "type": "object",
          "properties": {
            "friendProfileIntegrationId": {
              "title": "Friend's Profile ID",
              "maxLength": 1000,
              "type": "string",
              "description": "An optional Integration ID of the Friend's Profile.",
              "example": "BZGGC2454PA"
            },
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply.\n",
              "example": 1
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            }
          }
        },
        "NewReferralsForMultipleAdvocates": {
          "required": [
            "advocateProfileIntegrationIds",
            "campaignId",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. `0` means no limit but any campaign usage limits will still apply.\n",
              "example": 1
            },
            "campaignId": {
              "title": "Referral's Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign from which the referral received the referral code.",
              "example": 45
            },
            "advocateProfileIntegrationIds": {
              "title": "Advocate Profile List",
              "maxItems": 1000,
              "minItems": 1,
              "type": "array",
              "description": "An array containing all the respective advocate profiles.",
              "example": [
                "URNGV8294NV",
                "DRPVV9476AF"
              ],
              "items": {
                "type": "string"
              }
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "validCharacters": {
              "type": "array",
              "description": "List of characters used to generate the random parts of a code. By default, the list of characters\nis equivalent to the `[A-Z, 0-9]` regular expression.\n",
              "example": [
                "E",
                "F",
                "I",
                "Z",
                "1",
                "2",
                "3"
              ],
              "items": {
                "type": "string"
              }
            },
            "referralPattern": {
              "maxLength": 100,
              "minLength": 3,
              "type": "string",
              "description": "The pattern used to generate referrals. The character `#` is a placeholder and is replaced by a random character from the `validCharacters` set.\n",
              "example": "REF-###-###"
            }
          },
          "description": ""
        },
        "InventoryReferral": {
          "required": [
            "advocateProfileIntegrationId",
            "campaignId",
            "code",
            "created",
            "id",
            "referredCustomers",
            "usageCounter",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "startDate": {
              "title": "Referral code valid from",
              "type": "string",
              "description": "Timestamp at which point the referral code becomes valid.",
              "format": "date-time",
              "example": "2020-11-10T23:00:00Z"
            },
            "expiryDate": {
              "title": "Referral code valid until",
              "type": "string",
              "description": "Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.",
              "format": "date-time",
              "example": "2021-11-10T23:00:00Z"
            },
            "usageLimit": {
              "title": "Referral code Usage Limit",
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times a referral code can be used. `0` means no limit but any campaign usage limits will still apply.\n",
              "example": 1
            },
            "campaignId": {
              "title": "Referral's Campaign ID",
              "type": "integer",
              "description": "ID of the campaign from which the referral received the referral code.",
              "example": 78
            },
            "advocateProfileIntegrationId": {
              "title": "Advocate's Profile ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The Integration ID of the Advocate's Profile.",
              "example": "URNGV8294NV"
            },
            "friendProfileIntegrationId": {
              "title": "Friend's Profile ID",
              "type": "string",
              "description": "An optional Integration ID of the Friend's Profile.",
              "example": "BZGGC2454PA"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "importId": {
              "type": "integer",
              "description": "The ID of the Import which created this referral."
            },
            "code": {
              "title": "Referral code",
              "minLength": 4,
              "type": "string",
              "description": "The referral code.",
              "example": "27G47Y54VH9L"
            },
            "usageCounter": {
              "title": "Referral code Usages",
              "type": "integer",
              "description": "The number of times this referral code has been successfully used.",
              "example": 1
            },
            "batchId": {
              "title": "Batch ID",
              "type": "string",
              "description": "The ID of the batch the referrals belong to.",
              "example": "tqyrgahe"
            },
            "referredCustomers": {
              "type": "array",
              "description": "An array of referred customers.",
              "items": {
                "type": "string"
              }
            }
          },
          "description": ""
        },
        "AttributeQuery": {
          "type": "object",
          "description": "Object representing a set of of attributes and their respective values.",
          "example": {
            "my_attribute_1": "some value",
            "my_attribute_2": "some other value",
            "my_attribute_3": "some other value"
          }
        },
        "CouponSearch": {
          "required": [
            "attributes"
          ],
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Properties to match against a coupon. All provided attributes will be exactly matched against attributes."
            }
          }
        },
        "CampaignSearch": {
          "required": [
            "attributes"
          ],
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Properties to match against a campaign. All provided attributes will be exactly matched against campaign attributes."
            }
          }
        },
        "CampaignCopy": {
          "required": [
            "applicationIds"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the copied campaign (Defaults to \"Copy of original campaign name\")."
            },
            "applicationIds": {
              "type": "array",
              "description": "Application IDs of the applications to which a campaign should be copied to.",
              "items": {
                "type": "integer"
              }
            },
            "description": {
              "title": "Campaign Description",
              "type": "string",
              "description": "A detailed description of the campaign."
            },
            "startTime": {
              "type": "string",
              "description": "Timestamp when the campaign will become active.",
              "format": "date-time"
            },
            "endTime": {
              "type": "string",
              "description": "Timestamp when the campaign will become inactive.",
              "format": "date-time"
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign.",
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            }
          }
        },
        "NewCoupons": {
          "required": [
            "numberOfCoupons",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "limits": {
              "type": "array",
              "description": "Limits configuration for a coupon. These limits will override the limits\nset from the campaign.\n\n**Note:** Only usable when creating a single coupon which is not tied to a specific recipient.\nOnly per-profile limits are allowed to be configured.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "numberOfCoupons": {
              "type": "integer",
              "description": "The number of new coupon codes to generate for the campaign. Must be at least 1.",
              "example": 1
            },
            "uniquePrefix": {
              "title": "Coupon code unique prefix",
              "type": "string",
              "description": "**DEPRECATED** To create more than 20,000 coupons in one request, use [Create coupons asynchronously endpoint](https://docs.talon.one/management-api/#operation/createCouponsAsync).\n"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "recipientIntegrationId": {
              "title": "Receiving customer profile integration ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID for this coupon's beneficiary's profile.",
              "example": "URNGV8294NV"
            },
            "validCharacters": {
              "type": "array",
              "description": "List of characters used to generate the random parts of a code. By default,\nthe list of characters is equivalent to the `[A-Z, 0-9]` regular expression.\n",
              "example": [
                "A",
                "B",
                "G",
                "Y"
              ],
              "items": {
                "type": "string"
              }
            },
            "couponPattern": {
              "maxLength": 100,
              "minLength": 3,
              "type": "string",
              "description": "The pattern used to generate coupon codes.\nThe character `#` is a placeholder and is replaced by a random character from the `validCharacters` set.\n",
              "example": "SUMMER-#####"
            }
          },
          "description": ""
        },
        "NewCouponsForMultipleRecipients": {
          "required": [
            "recipientsIntegrationIds",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "recipientsIntegrationIds": {
              "title": "Receiving customer profiles integration IDs",
              "maxItems": 1000,
              "minItems": 1,
              "type": "array",
              "description": "The integration IDs for recipients.",
              "items": {
                "type": "string"
              }
            },
            "validCharacters": {
              "type": "array",
              "description": "List of characters used to generate the random parts of a code. By default, the list of\ncharacters is equivalent to the `[A-Z, 0-9]` regular expression.\n",
              "items": {
                "type": "string"
              }
            },
            "couponPattern": {
              "maxLength": 100,
              "minLength": 3,
              "type": "string",
              "description": "The pattern used to generate coupon codes. The character `#` is a placeholder and is replaced by a random character from the `validCharacters` set.\n"
            }
          },
          "description": ""
        },
        "UpdateCoupon": {
          "type": "object",
          "properties": {
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "limits": {
              "type": "array",
              "description": "Limits configuration for a coupon. These limits will override the limits\nset from the campaign.\n\n**Note:** Only usable when creating a single coupon which is not tied to a specific recipient.\nOnly per-profile limits are allowed to be configured.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "recipientIntegrationId": {
              "title": "Receiving customer profile integration ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID for this coupon's beneficiary's profile."
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            }
          },
          "description": ""
        },
        "UpdateCouponBatch": {
          "type": "object",
          "properties": {
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            },
            "batchID": {
              "title": "Batch ID",
              "type": "string",
              "description": "The id of the batch the coupon belongs to."
            }
          },
          "description": ""
        },
        "Coupon": {
          "required": [
            "campaignId",
            "created",
            "id",
            "usageCounter",
            "usageLimit",
            "value"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "campaignId": {
              "title": "Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 211
            },
            "value": {
              "title": "Coupon Code",
              "minLength": 4,
              "type": "string",
              "description": "The coupon code.",
              "example": "XMAS-20-2021"
            },
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "limits": {
              "type": "array",
              "description": "Limits configuration for a coupon. These limits will override the limits\nset from the campaign.\n\n**Note:** Only usable when creating a single coupon which is not tied to a specific recipient.\nOnly per-profile limits are allowed to be configured.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "usageCounter": {
              "title": "Number of coupon usages",
              "type": "integer",
              "description": "The number of times this coupon has been successfully used.",
              "example": 10
            },
            "discountCounter": {
              "title": "Discounts Given",
              "type": "number",
              "description": "The amount of discounts given on rules redeeming this coupon. Only usable if a coupon discount budget was set for this coupon."
            },
            "discountRemainder": {
              "title": "Coupon Discount Remainder",
              "type": "number",
              "description": "The remaining discount this coupon can give."
            },
            "attributes": {
              "title": "Attributes of coupon",
              "type": "object",
              "properties": {},
              "description": "Custom attributes associated with this coupon."
            },
            "referralId": {
              "title": "Advocate ID",
              "type": "integer",
              "description": "The integration ID of the referring customer (if any) for whom this coupon was created as an effect.",
              "example": 326632952
            },
            "recipientIntegrationId": {
              "title": "Recipient ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The Integration ID of the customer that is allowed to redeem this coupon.",
              "example": "URNGV8294NV"
            },
            "importId": {
              "title": "Import ID",
              "type": "integer",
              "description": "The ID of the Import which created this coupon."
            },
            "reservation": {
              "title": "Reservation Status",
              "type": "boolean",
              "description": "Defines the type of reservation:\n- `true`: The reservation is a soft reservation. Any customer can use the coupon. This is done via the [Create coupon reservation endpoint](/integration-api/#operation/createCouponReservation).\n- `false`: The reservation is a hard reservation. Only the associated customer (`recipientIntegrationId`) can use the coupon. This is done via the Campaign Manager when you create a coupon for a given `recipientIntegrationId`, the [Create coupons endpoint](/management-api/#operation/createCoupons) or [Create coupons for multiple recipients endpoint](/management-api/#operation/createCouponsForMultipleRecipients).\n",
              "example": false,
              "default": true
            },
            "batchId": {
              "title": "Batch ID",
              "type": "string",
              "description": "The id of the batch the coupon belongs to.",
              "example": "32535-43255"
            }
          },
          "description": ""
        },
        "InventoryCoupon": {
          "required": [
            "campaignId",
            "created",
            "id",
            "profileRedemptionCount",
            "state",
            "usageCounter",
            "usageLimit",
            "value"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "campaignId": {
              "title": "Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 211
            },
            "value": {
              "title": "Coupon Code",
              "minLength": 4,
              "type": "string",
              "description": "The coupon code.",
              "example": "XMAS-20-2021"
            },
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "limits": {
              "type": "array",
              "description": "Limits configuration for a coupon. These limits will override the limits\nset from the campaign.\n\n**Note:** Only usable when creating a single coupon which is not tied to a specific recipient.\nOnly per-profile limits are allowed to be configured.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "usageCounter": {
              "title": "Number of coupon usages",
              "type": "integer",
              "description": "The number of times this coupon has been successfully used.",
              "example": 10
            },
            "discountCounter": {
              "title": "Discounts Given",
              "type": "number",
              "description": "The amount of discounts given on rules redeeming this coupon. Only usable if a coupon discount budget was set for this coupon."
            },
            "discountRemainder": {
              "title": "Coupon Discount Remainder",
              "type": "number",
              "description": "The remaining discount this coupon can give."
            },
            "attributes": {
              "title": "Attributes of coupon",
              "type": "object",
              "properties": {},
              "description": "Custom attributes associated with this coupon."
            },
            "referralId": {
              "title": "Advocate ID",
              "type": "integer",
              "description": "The integration ID of the referring customer (if any) for whom this coupon was created as an effect.",
              "example": 326632952
            },
            "recipientIntegrationId": {
              "title": "Recipient ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The Integration ID of the customer that is allowed to redeem this coupon.",
              "example": "URNGV8294NV"
            },
            "importId": {
              "title": "Import ID",
              "type": "integer",
              "description": "The ID of the Import which created this coupon."
            },
            "reservation": {
              "title": "Reservation Status",
              "type": "boolean",
              "description": "Defines the type of reservation:\n- `true`: The reservation is a soft reservation. Any customer can use the coupon. This is done via the [Create coupon reservation endpoint](/integration-api/#operation/createCouponReservation).\n- `false`: The reservation is a hard reservation. Only the associated customer (`recipientIntegrationId`) can use the coupon. This is done via the Campaign Manager when you create a coupon for a given `recipientIntegrationId`, the [Create coupons endpoint](/management-api/#operation/createCoupons) or [Create coupons for multiple recipients endpoint](/management-api/#operation/createCouponsForMultipleRecipients).\n",
              "example": false,
              "default": true
            },
            "batchId": {
              "title": "Batch ID",
              "type": "string",
              "description": "The id of the batch the coupon belongs to.",
              "example": "32535-43255"
            },
            "profileRedemptionCount": {
              "title": "Number of coupon usages",
              "type": "integer",
              "description": "The number of times the coupon was redeemed by the profile."
            },
            "state": {
              "type": "string",
              "description": "Can be:\n\n- `active`: The coupon can be used. It is a reserved coupon that is neither pending, used nor expired, and has a non-exhausted limit counter.\n- `used`: The coupon has been redeemed and cannot be used again. It is not pending and has reached its redemption limit or was redeemed by the profile before expiration.\n- `expired`: The coupon was never redeemed and it is now expired. It is non-pending, non-active and non-used by the profile.\n- `pending`: The coupon will be usable in the future.\n- `disabled`: The coupon is part of a non-active campaign.\n",
              "example": "active"
            }
          },
          "description": ""
        },
        "CampaignAnalytics": {
          "required": [
            "addedLoyaltyPoints",
            "campaignDiscountCosts",
            "campaignFreeItems",
            "campaignRefund",
            "campaignRefundedDiscounts",
            "campaignRevenue",
            "couponRedemptions",
            "couponRolledbackRedemptions",
            "couponsCreated",
            "date",
            "deductedLoyaltyPoints",
            "referralRedemptions",
            "referralsCreated",
            "totalAddedLoyaltyPoints",
            "totalCampaignDiscountCosts",
            "totalCampaignFreeItems",
            "totalCampaignRefund",
            "totalCampaignRefundedDiscounts",
            "totalCampaignRevenue",
            "totalCouponRedemptions",
            "totalCouponRolledbackRedemptions",
            "totalCouponsCreated",
            "totalDeductedLoyaltyPoints",
            "totalReferralRedemptions",
            "totalReferralsCreated"
          ],
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time"
            },
            "campaignRevenue": {
              "type": "number",
              "description": "Amount of revenue in this campaign (for coupon or discount sessions)."
            },
            "totalCampaignRevenue": {
              "type": "number",
              "description": "Amount of revenue in this campaign since it began (for coupon or discount sessions)."
            },
            "campaignRefund": {
              "type": "number",
              "description": "Amount of refunds in this campaign (for coupon or discount sessions)."
            },
            "totalCampaignRefund": {
              "type": "number",
              "description": "Amount of refunds in this campaign since it began (for coupon or discount sessions)."
            },
            "campaignDiscountCosts": {
              "type": "number",
              "description": "Amount of cost caused by discounts given in the campaign."
            },
            "totalCampaignDiscountCosts": {
              "type": "number",
              "description": "Amount of cost caused by discounts given in the campaign since it began."
            },
            "campaignRefundedDiscounts": {
              "type": "number",
              "description": "Amount of discounts rolledback due to refund in the campaign."
            },
            "totalCampaignRefundedDiscounts": {
              "type": "number",
              "description": "Amount of discounts rolledback due to refund in the campaign since it began."
            },
            "campaignFreeItems": {
              "type": "integer",
              "description": "Amount of free items given in the campaign."
            },
            "totalCampaignFreeItems": {
              "type": "integer",
              "description": "Amount of free items given in the campaign since it began."
            },
            "couponRedemptions": {
              "type": "integer",
              "description": "Number of coupon redemptions in the campaign."
            },
            "totalCouponRedemptions": {
              "type": "integer",
              "description": "Number of coupon redemptions in the campaign since it began."
            },
            "couponRolledbackRedemptions": {
              "type": "integer",
              "description": "Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign."
            },
            "totalCouponRolledbackRedemptions": {
              "type": "integer",
              "description": "Number of coupon redemptions that have been rolled back (due to canceling closed session) in the campaign since it began."
            },
            "referralRedemptions": {
              "type": "integer",
              "description": "Number of referral redemptions in the campaign."
            },
            "totalReferralRedemptions": {
              "type": "integer",
              "description": "Number of referral redemptions in the campaign since it began."
            },
            "couponsCreated": {
              "type": "integer",
              "description": "Number of coupons created in the campaign by the rule engine."
            },
            "totalCouponsCreated": {
              "type": "integer",
              "description": "Number of coupons created in the campaign by the rule engine since it began."
            },
            "referralsCreated": {
              "type": "integer",
              "description": "Number of referrals created in the campaign by the rule engine."
            },
            "totalReferralsCreated": {
              "type": "integer",
              "description": "Number of referrals created in the campaign by the rule engine since it began."
            },
            "addedLoyaltyPoints": {
              "type": "number",
              "description": "Number of added loyalty points in the campaign in a specific interval."
            },
            "totalAddedLoyaltyPoints": {
              "type": "number",
              "description": "Number of added loyalty points in the campaign since it began."
            },
            "deductedLoyaltyPoints": {
              "type": "number",
              "description": "Number of deducted loyalty points in the campaign in a specific interval."
            },
            "totalDeductedLoyaltyPoints": {
              "type": "number",
              "description": "Number of deducted loyalty points in the campaign since it began."
            }
          },
          "description": ""
        },
        "LoyaltyStatistics": {
          "required": [
            "date",
            "earnedPoints",
            "newMembers",
            "spentPoints",
            "totalActivePoints",
            "totalExpiredPoints",
            "totalMembers",
            "totalPendingPoints",
            "totalSpentPoints"
          ],
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Date at which data point was collected.",
              "format": "date-time"
            },
            "totalActivePoints": {
              "type": "number",
              "description": "Total of active points for this loyalty program."
            },
            "totalPendingPoints": {
              "type": "number",
              "description": "Total of pending points for this loyalty program."
            },
            "totalSpentPoints": {
              "type": "number",
              "description": "Total of spent points for this loyalty program."
            },
            "totalExpiredPoints": {
              "type": "number",
              "description": "Total of expired points for this loyalty program."
            },
            "totalMembers": {
              "type": "number",
              "description": "Number of loyalty program members."
            },
            "newMembers": {
              "type": "number",
              "description": "Number of members who joined on this day."
            },
            "spentPoints": {
              "$ref": "#/components/schemas/LoyaltyDashboardPointsBreakdown"
            },
            "earnedPoints": {
              "$ref": "#/components/schemas/LoyaltyDashboardPointsBreakdown"
            }
          },
          "description": ""
        },
        "LoyaltyDashboardData": {
          "required": [
            "date",
            "earnedPoints",
            "newMembers",
            "spentPoints",
            "totalActivePoints",
            "totalExpiredPoints",
            "totalMembers",
            "totalPendingPoints",
            "totalSpentPoints"
          ],
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Date at which data point was collected.",
              "format": "date-time"
            },
            "totalActivePoints": {
              "type": "number",
              "description": "Total of active points for this loyalty program."
            },
            "totalPendingPoints": {
              "type": "number",
              "description": "Total of pending points for this loyalty program."
            },
            "totalSpentPoints": {
              "type": "number",
              "description": "Total of spent points for this loyalty program."
            },
            "totalExpiredPoints": {
              "type": "number",
              "description": "Total of expired points for this loyalty program."
            },
            "totalMembers": {
              "type": "number",
              "description": "Number of loyalty program members."
            },
            "newMembers": {
              "type": "number",
              "description": "Number of members who joined on this day."
            },
            "spentPoints": {
              "$ref": "#/components/schemas/LoyaltyDashboardPointsBreakdown"
            },
            "earnedPoints": {
              "$ref": "#/components/schemas/LoyaltyDashboardPointsBreakdown"
            }
          },
          "description": "Datapoint for the graphs and cards on a loyalty program dashboard."
        },
        "LoyaltyDashboardPointsBreakdown": {
          "required": [
            "createdManually",
            "createdViaRuleEngine"
          ],
          "type": "object",
          "properties": {
            "createdManually": {
              "type": "number"
            },
            "createdViaRuleEngine": {
              "type": "number"
            }
          }
        },
        "ApplicationApiHealth": {
          "required": [
            "lastUsed",
            "summary"
          ],
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "One-word summary of the health of the API connection of an application.",
              "enum": [
                "OK",
                "WARNING",
                "ERROR",
                "CRITICAL",
                "NONE"
              ]
            },
            "lastUsed": {
              "type": "string",
              "description": "time of last request relevant to the API health test.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            }
          },
          "description": "Report of health of the API connection of an application."
        },
        "AccessLogEntry": {
          "required": [
            "method",
            "requestPayload",
            "requestUri",
            "responsePayload",
            "status",
            "time",
            "uuid"
          ],
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "UUID reference of request."
            },
            "status": {
              "type": "integer",
              "description": "HTTP status code of response."
            },
            "method": {
              "type": "string",
              "description": "HTTP method of request."
            },
            "requestUri": {
              "type": "string",
              "description": "target URI of request"
            },
            "time": {
              "type": "string",
              "description": "timestamp of request",
              "format": "date-time"
            },
            "requestPayload": {
              "type": "string",
              "description": "payload of request"
            },
            "responsePayload": {
              "type": "string",
              "description": "payload of response"
            }
          },
          "description": "Log of application accesses."
        },
        "WebhookLogEntry": {
          "required": [
            "id",
            "integrationRequestUuid",
            "request",
            "requestTime",
            "url",
            "webhookId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "UUID reference of the webhook request."
            },
            "integrationRequestUuid": {
              "type": "string",
              "description": "UUID reference of the integration request linked to this webhook request."
            },
            "webhookId": {
              "type": "integer",
              "description": "ID of the webhook that triggered the request."
            },
            "applicationId": {
              "type": "integer",
              "description": "ID of the application that triggered the webhook."
            },
            "url": {
              "type": "string",
              "description": "Target url of request"
            },
            "request": {
              "type": "string",
              "description": "Request message"
            },
            "response": {
              "type": "string",
              "description": "Response message"
            },
            "status": {
              "type": "integer",
              "description": "HTTP status code of response."
            },
            "requestTime": {
              "type": "string",
              "description": "Timestamp of request",
              "format": "date-time"
            },
            "responseTime": {
              "type": "string",
              "description": "Timestamp of response",
              "format": "date-time"
            }
          },
          "description": "Log of webhook api calls."
        },
        "WebhookActivationLogEntry": {
          "required": [
            "applicationId",
            "campaignId",
            "created",
            "integrationRequestUuid",
            "webhookId"
          ],
          "type": "object",
          "properties": {
            "integrationRequestUuid": {
              "type": "string",
              "description": "UUID reference of the integration request that triggered the effect with the webhook."
            },
            "webhookId": {
              "type": "integer",
              "description": "ID of the webhook that triggered the request."
            },
            "applicationId": {
              "type": "integer",
              "description": "ID of the application that triggered the webhook."
            },
            "campaignId": {
              "type": "integer",
              "description": "ID of the campaign that triggered the webhook."
            },
            "created": {
              "type": "string",
              "description": "Timestamp of request",
              "format": "date-time"
            }
          },
          "description": "Log of activated webhooks."
        },
        "User": {
          "required": [
            "accountId",
            "created",
            "email",
            "id",
            "inviteToken",
            "modified",
            "name",
            "policy",
            "state"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "email": {
              "type": "string",
              "description": "The email address associated with your account.",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "inviteToken": {
              "type": "string",
              "description": "Invite token, empty if the user as already accepted their invite.",
              "example": "Gy9b8w1irmQtEPo5RmbMmSPheL5h4"
            },
            "state": {
              "type": "string",
              "description": "Current user state.",
              "example": "invited",
              "enum": [
                "invited",
                "active",
                "deactivated"
              ]
            },
            "name": {
              "type": "string",
              "description": "Full name",
              "example": "John Doe"
            },
            "policy": {
              "type": "object",
              "properties": {},
              "description": "User ACL Policy",
              "example": {
                "Role": 127
              }
            },
            "latestFeedTimestamp": {
              "type": "string",
              "description": "Latest timestamp the user has been notified for feed.",
              "format": "date-time",
              "example": "2020-06-01T00:00:00Z"
            },
            "roles": {
              "type": "array",
              "description": "Contains a list of all roles the user is a member of.",
              "example": [
                71
              ],
              "items": {
                "type": "integer"
              }
            },
            "applicationNotificationSubscriptions": {
              "type": "object",
              "properties": {}
            },
            "authMethod": {
              "type": "string",
              "description": "The Authentication method for this user.",
              "example": "basic_auth"
            }
          },
          "description": ""
        },
        "NewInvitation": {
          "required": [
            "acl",
            "email"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the user being invited.",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "acl": {
              "type": "string",
              "description": "The `Access Control List` json defining the role of the user. This represents the actual access control on the user level.\nUse one of the following:\n- normal user: `{\"Role\": 0}`\n- admin: `{\"Role\": 127}`\n",
              "example": "{\"Role\":0}"
            },
            "roles": {
              "type": "array",
              "description": "An array of roleIDs to assign the new user to.",
              "items": {
                "type": "integer"
              }
            }
          },
          "description": "Parameters for inviting a new user."
        },
        "Change": {
          "required": [
            "created",
            "entity",
            "id",
            "userId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "applicationId": {
              "type": "integer",
              "description": "ID of application associated with change.",
              "example": 359
            },
            "entity": {
              "type": "string",
              "description": "API endpoint on which the change was initiated.",
              "example": "/v1/applications/359/campaigns/6727"
            },
            "old": {
              "type": "object",
              "properties": {},
              "description": "Resource before the change occurred."
            },
            "new": {
              "type": "object",
              "properties": {},
              "description": "Resource after the change occurred.",
              "example": {
                "applicationId\"": 359,
                "attributes\"": {},
                "campaignGroups\"": [],
                "created\"": "2022-07-08T13:04:02.972762328Z",
                "description\"": "",
                "features\"": [
                  "referrals",
                  "loyalty"
                ],
                "id": 6727
              }
            }
          },
          "description": ""
        },
        "LoyaltyPoints": {
          "required": [
            "points"
          ],
          "type": "object",
          "properties": {
            "points": {
              "maximum": 999999999999.99,
              "exclusiveMaximum": false,
              "minimum": 0,
              "exclusiveMinimum": true,
              "type": "number",
              "description": "Amount of loyalty points.",
              "example": 300
            },
            "name": {
              "type": "string",
              "description": "Allows to specify a name for the addition or deduction."
            },
            "validityDuration": {
              "type": "string",
              "description": "Indicates the duration after which the added loyalty points should expire. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package)."
            },
            "pendingDuration": {
              "type": "string",
              "description": "Indicates the amount of time before the points are considered valid. The format is a number followed by one letter indicating the time unit, like '1h' or '40m' (defined by Go time package)."
            },
            "subLedgerID": {
              "type": "string",
              "description": "This specifies if we are adding loyalty points to the main ledger or a subledger."
            }
          },
          "description": "Points to add or deduct."
        },
        "LoyaltyProgram": {
          "required": [
            "accountID",
            "allowSubledger",
            "cardBased",
            "created",
            "defaultPending",
            "defaultValidity",
            "description",
            "id",
            "name",
            "subscribedApplications",
            "timezone",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The ID of loyalty program. Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints."
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "title": {
              "type": "string",
              "description": "The display title for the Loyalty Program.",
              "example": "Point collection"
            },
            "description": {
              "type": "string",
              "description": "Description of our Loyalty Program.",
              "example": "Customers collect 10 points per 1$ spent"
            },
            "subscribedApplications": {
              "type": "array",
              "description": "A list containing the IDs of all applications that are subscribed to this Loyalty Program.",
              "example": [
                132,
                97
              ],
              "items": {
                "type": "integer"
              }
            },
            "defaultValidity": {
              "type": "string",
              "description": "Indicates the default duration after which new loyalty points should expire. The format is a number, followed by one letter indicating the unit; like '1h' or '40m'.",
              "example": "unlimited"
            },
            "defaultPending": {
              "type": "string",
              "description": "Indicates the default duration for the pending time, after which points will be valid. The format is a number followed by a duration unit, like '1h' or '40m'.",
              "example": "immediate"
            },
            "allowSubledger": {
              "type": "boolean",
              "description": "Indicates if this program supports subledgers inside the program.",
              "example": false
            },
            "usersPerCardLimit": {
              "minimum": 0,
              "type": "integer",
              "description": "The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit.\nThis property is only used when `cardBased` is `true`.\n",
              "example": 111
            },
            "accountID": {
              "type": "integer",
              "description": "The ID of the Talon.One account that owns this program.",
              "example": 1
            },
            "name": {
              "type": "string",
              "description": "The internal name for the Loyalty Program. This is an immutable value.",
              "example": "my_program"
            },
            "tiers": {
              "type": "array",
              "description": "The tiers in this loyalty program.",
              "example": [
                {
                  "name": "Gold",
                  "minPoints": 300,
                  "id": 3,
                  "created": "2021-06-10T09:05:27.993483Z",
                  "programID": 139
                },
                {
                  "name": "Silver",
                  "minPoints": 200,
                  "id": 2,
                  "created": "2021-06-10T09:04:59.355258Z",
                  "programId": 139
                },
                {
                  "name": "Bronze",
                  "minPoints": 100,
                  "id": 1,
                  "created": "2021-06-10T09:04:39.355258Z",
                  "programId": 139
                }
              ],
              "items": {
                "$ref": "#/components/schemas/LoyaltyTier"
              }
            },
            "timezone": {
              "minLength": 1,
              "type": "string",
              "description": "A string containing an IANA timezone descriptor.",
              "example": "Europe/Berlin"
            },
            "cardBased": {
              "type": "boolean",
              "description": "Defines the type of loyalty program:\n- `true`: the program is a card-based.\n- `false`: the program is profile-based.\n",
              "example": true,
              "default": false
            }
          },
          "description": ""
        },
        "LoyaltyTier": {
          "required": [
            "created",
            "id",
            "minPoints",
            "name",
            "programID"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "programID": {
              "type": "integer",
              "description": "The ID of the loyalty program that owns this entity.",
              "example": 125
            },
            "name": {
              "type": "string",
              "description": "The name of the tier",
              "example": "Gold"
            },
            "minPoints": {
              "maximum": 999999999999.99,
              "exclusiveMaximum": false,
              "minimum": 0,
              "type": "number",
              "description": "The minimum amount of points required to be eligible for the tier.",
              "example": 300
            }
          },
          "description": ""
        },
        "NewLoyaltyTier": {
          "required": [
            "minPoints",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the tier",
              "example": "Gold"
            },
            "minPoints": {
              "maximum": 999999999999.99,
              "exclusiveMaximum": false,
              "minimum": 0,
              "type": "number",
              "description": "The minimum amount of points required to be eligible for the tier.",
              "example": 300
            }
          },
          "description": "A tier in a loyalty program."
        },
        "BaseLoyaltyProgram": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The display title for the Loyalty Program.",
              "example": "Point collection"
            },
            "description": {
              "type": "string",
              "description": "Description of our Loyalty Program.",
              "example": "Customers collect 10 points per 1$ spent"
            },
            "subscribedApplications": {
              "type": "array",
              "description": "A list containing the IDs of all applications that are subscribed to this Loyalty Program.",
              "example": [
                132,
                97
              ],
              "items": {
                "type": "integer"
              }
            },
            "defaultValidity": {
              "type": "string",
              "description": "Indicates the default duration after which new loyalty points should expire. The format is a number, followed by one letter indicating the unit; like '1h' or '40m'.",
              "example": "unlimited"
            },
            "defaultPending": {
              "type": "string",
              "description": "Indicates the default duration for the pending time, after which points will be valid. The format is a number followed by a duration unit, like '1h' or '40m'.",
              "example": "immediate"
            },
            "allowSubledger": {
              "type": "boolean",
              "description": "Indicates if this program supports subledgers inside the program.",
              "example": false
            },
            "usersPerCardLimit": {
              "minimum": 0,
              "type": "integer",
              "description": "The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit.\nThis property is only used when `cardBased` is `true`.\n",
              "example": 111
            }
          }
        },
        "NewLoyaltyProgram": {
          "required": [
            "allowSubledger",
            "cardBased",
            "defaultPending",
            "defaultValidity",
            "name",
            "timezone",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The display title for the Loyalty Program.",
              "example": "Point collection"
            },
            "description": {
              "type": "string",
              "description": "Description of our Loyalty Program.",
              "example": "Customers collect 10 points per 1$ spent"
            },
            "subscribedApplications": {
              "type": "array",
              "description": "A list containing the IDs of all applications that are subscribed to this Loyalty Program.",
              "example": [
                132,
                97
              ],
              "items": {
                "type": "integer"
              }
            },
            "defaultValidity": {
              "type": "string",
              "description": "Indicates the default duration after which new loyalty points should expire. The format is a number, followed by one letter indicating the unit; like '1h' or '40m'.",
              "example": "unlimited"
            },
            "defaultPending": {
              "type": "string",
              "description": "Indicates the default duration for the pending time, after which points will be valid. The format is a number followed by a duration unit, like '1h' or '40m'.",
              "example": "immediate"
            },
            "allowSubledger": {
              "type": "boolean",
              "description": "Indicates if this program supports subledgers inside the program.",
              "example": false
            },
            "usersPerCardLimit": {
              "minimum": 0,
              "type": "integer",
              "description": "The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit.\nThis property is only used when `cardBased` is `true`.\n",
              "example": 111
            },
            "name": {
              "type": "string",
              "description": "The internal name for the Loyalty Program. This is an immutable value.",
              "example": "GeneralPointCollection"
            },
            "tiers": {
              "type": "array",
              "description": "The tiers in this loyalty program.",
              "items": {
                "$ref": "#/components/schemas/NewLoyaltyTier"
              }
            },
            "timezone": {
              "minLength": 1,
              "type": "string",
              "description": "A string containing an IANA timezone descriptor."
            },
            "cardBased": {
              "type": "boolean",
              "description": "Defines the type of loyalty program:\n- `true`: the program is a card-based.\n- `false`: the program is profile-based.\n",
              "example": true,
              "default": false
            }
          },
          "description": ""
        },
        "UpdateLoyaltyProgram": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The display title for the Loyalty Program.",
              "example": "Point collection"
            },
            "description": {
              "type": "string",
              "description": "Description of our Loyalty Program.",
              "example": "Customers collect 10 points per 1$ spent"
            },
            "subscribedApplications": {
              "type": "array",
              "description": "A list containing the IDs of all applications that are subscribed to this Loyalty Program.",
              "example": [
                132,
                97
              ],
              "items": {
                "type": "integer"
              }
            },
            "defaultValidity": {
              "type": "string",
              "description": "Indicates the default duration after which new loyalty points should expire. The format is a number, followed by one letter indicating the unit; like '1h' or '40m'.",
              "example": "unlimited"
            },
            "defaultPending": {
              "type": "string",
              "description": "Indicates the default duration for the pending time, after which points will be valid. The format is a number followed by a duration unit, like '1h' or '40m'.",
              "example": "immediate"
            },
            "allowSubledger": {
              "type": "boolean",
              "description": "Indicates if this program supports subledgers inside the program.",
              "example": false
            },
            "usersPerCardLimit": {
              "minimum": 0,
              "type": "integer",
              "description": "The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit.\nThis property is only used when `cardBased` is `true`.\n",
              "example": 111
            },
            "tiers": {
              "type": "array",
              "description": "The tiers in this loyalty program.",
              "items": {
                "$ref": "#/components/schemas/NewLoyaltyTier"
              }
            }
          },
          "description": ""
        },
        "LoyaltyLedgerTransactions": {
          "type": "object",
          "properties": {
            "transactions": {
              "type": "array",
              "description": "List of transaction entries from a loyalty ledger.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyLedgerEntry"
              }
            }
          },
          "description": "List of loyalty ledger transactions."
        },
        "LoyaltyLedgerEntry": {
          "required": [
            "amount",
            "created",
            "name",
            "programID",
            "subLedgerID",
            "type"
          ],
          "type": "object",
          "properties": {
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "programID": {
              "type": "integer"
            },
            "customerProfileID": {
              "type": "string"
            },
            "cardID": {
              "type": "integer"
            },
            "customerSessionID": {
              "type": "string"
            },
            "eventID": {
              "type": "integer"
            },
            "type": {
              "type": "string",
              "description": "The type of the ledger transaction. Possible values are addition, subtraction, expire or expiring (for expiring points ledgers)\n"
            },
            "amount": {
              "type": "number"
            },
            "startDate": {
              "type": "string",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "format": "date-time"
            },
            "name": {
              "type": "string",
              "description": "A name referencing the condition or effect that added this entry, or the specific name provided in an API call."
            },
            "subLedgerID": {
              "type": "string",
              "description": "This specifies if we are adding loyalty points to the main ledger or a subledger."
            },
            "userID": {
              "type": "integer",
              "description": "This is the ID of the user who created this entry, if the addition or subtraction was done manually."
            }
          },
          "description": "A single row of the ledger, describing one addition or deduction."
        },
        "LoyaltyBalances": {
          "type": "object",
          "properties": {
            "balance": {
              "$ref": "#/components/schemas/LoyaltyBalance"
            },
            "subledgerBalances": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/LoyaltyBalance"
              },
              "description": "Map of the loyalty balances of the subledgers of a ledger."
            }
          },
          "description": "List of loyalty balances for a ledger and its subledgers."
        },
        "LoyaltyBalance": {
          "type": "object",
          "properties": {
            "activePoints": {
              "title": "Current Balance",
              "type": "number",
              "description": "Total amount of points awarded to this customer and available to spend."
            },
            "pendingPoints": {
              "title": "Total pending points",
              "type": "number",
              "description": "Total amount of points awarded to this customer but not available until their start date."
            },
            "spentPoints": {
              "title": "Total spent points",
              "type": "number",
              "description": "Total amount of points already spent by this customer."
            },
            "expiredPoints": {
              "title": "Total expired points",
              "type": "number",
              "description": "Total amount of points awarded but never redeemed. They cannot be used anymore."
            }
          },
          "description": "Point balance of a ledger in the Loyalty Program."
        },
        "LoyaltyLedger": {
          "required": [
            "ledger"
          ],
          "type": "object",
          "properties": {
            "ledger": {
              "$ref": "#/components/schemas/LoyaltySubLedger"
            },
            "subLedgers": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/LoyaltySubLedger"
              },
              "description": "A map containing a list of all loyalty subledger balances."
            }
          },
          "description": "Ledger of Balance in Loyalty Program for a Customer."
        },
        "LoyaltySubLedger": {
          "required": [
            "total",
            "totalActivePoints",
            "totalExpiredPoints",
            "totalPendingPoints",
            "totalSpentPoints"
          ],
          "type": "object",
          "properties": {
            "total": {
              "title": "Current Balance (Deprecated)",
              "type": "number",
              "description": "**DEPRECATED** Use `totalActivePoints` property instead. Total amount of currently active and available points in the customer's balance.\n"
            },
            "totalActivePoints": {
              "title": "Current Balance",
              "type": "number",
              "description": "Total amount of currently active and available points in the customer's balance."
            },
            "totalPendingPoints": {
              "title": "Total pending points",
              "type": "number",
              "description": "Total amount of pending points, which are not active yet but will become active in the future."
            },
            "totalSpentPoints": {
              "title": "Total spent points",
              "type": "number",
              "description": "Total amount of points already spent by this customer."
            },
            "totalExpiredPoints": {
              "title": "Total expired points",
              "type": "number",
              "description": "Total amount of points, that expired without ever being spent."
            },
            "transactions": {
              "type": "array",
              "description": "List of all events that have happened such as additions, subtractions and expiries.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyLedgerEntry"
              }
            },
            "expiringPoints": {
              "type": "array",
              "description": "List of all points that will expire.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyLedgerEntry"
              }
            },
            "activePoints": {
              "type": "array",
              "description": "List of all currently active points.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyLedgerEntry"
              }
            },
            "pendingPoints": {
              "type": "array",
              "description": "List of all points pending activation.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyLedgerEntry"
              }
            },
            "expiredPoints": {
              "type": "array",
              "description": "List of expired points.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyLedgerEntry"
              }
            },
            "currentTier": {
              "$ref": "#/components/schemas/Tier"
            }
          },
          "description": "Ledger of Balance in Loyalty Program for a Customer."
        },
        "Loyalty": {
          "required": [
            "programs"
          ],
          "type": "object",
          "properties": {
            "cards": {
              "title": "Point balances of the loyalty cards used.",
              "type": "array",
              "description": "Displays information about the balances of the loyalty cards.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyCard"
              }
            },
            "programs": {
              "title": "Customer's current loyalty program balance.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/LoyaltyProgramLedgers"
              },
              "description": "Displays information about point balances in profile-based programs."
            }
          },
          "description": "Customer specific information about loyalty points."
        },
        "LoyaltyProgramLedgers": {
          "required": [
            "id",
            "ledger",
            "name",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal ID of loyalty program.",
              "example": 5
            },
            "title": {
              "type": "string",
              "description": "Visible name of loyalty program.",
              "example": "My loyalty program"
            },
            "name": {
              "type": "string",
              "description": "Internal name of loyalty program.",
              "example": "program1"
            },
            "ledger": {
              "$ref": "#/components/schemas/LedgerInfo"
            },
            "subLedgers": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/LedgerInfo"
              },
              "description": "A map containing information about each loyalty subledger."
            }
          },
          "description": "Customer specific information about loyalty points."
        },
        "LedgerInfo": {
          "required": [
            "currentBalance",
            "expiredBalance",
            "pendingBalance",
            "spentBalance",
            "tentativeCurrentBalance"
          ],
          "type": "object",
          "properties": {
            "currentBalance": {
              "title": "Current balance",
              "type": "number",
              "description": "Sum of currently active points.",
              "example": 46
            },
            "pendingBalance": {
              "title": "Pending balance",
              "type": "number",
              "description": "Sum of pending points.",
              "example": 10
            },
            "expiredBalance": {
              "title": "Expired balance",
              "type": "number",
              "description": "Sum of expired points.",
              "example": 30
            },
            "spentBalance": {
              "title": "Spent balance",
              "type": "number",
              "description": "Sum of spent points.",
              "example": 84
            },
            "tentativeCurrentBalance": {
              "title": "Tentative current balance",
              "type": "number",
              "description": "Sum of currently active points, including points added and deducted in open sessions.",
              "example": 56
            },
            "currentTier": {
              "$ref": "#/components/schemas/Tier"
            },
            "pointsToNextTier": {
              "type": "number",
              "description": "Points required to move up a tier.",
              "example": 20
            },
            "projection": {
              "$ref": "#/components/schemas/LoyaltyProjection"
            }
          },
          "description": ""
        },
        "Tier": {
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The internal ID of the tier.",
              "example": 11
            },
            "name": {
              "type": "string",
              "description": "The name of the tier.",
              "example": "bronze"
            }
          }
        },
        "LoyaltyCard": {
          "required": [
            "created",
            "id",
            "identifier",
            "programID",
            "status",
            "usersPerCardLimit"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "programID": {
              "type": "integer",
              "description": "The ID of the loyalty program that owns this entity.",
              "example": 125
            },
            "status": {
              "type": "string",
              "description": "Status of the loyalty card. Can be one of: ['active', 'disabled']\n"
            },
            "identifier": {
              "type": "string",
              "description": "The alphanumeric identifier of the loyalty card."
            },
            "usersPerCardLimit": {
              "minimum": 0,
              "type": "integer",
              "description": "The max amount of user profiles a card can be shared with. 0 means unlimited.\n",
              "example": 111
            },
            "profiles": {
              "type": "array",
              "description": "Integration IDs of the customers associated with the card.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyCardProfileRegistration"
              }
            },
            "ledger": {
              "$ref": "#/components/schemas/LedgerInfo"
            },
            "subledgers": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/LedgerInfo"
              },
              "description": "Displays point balances of the card in the subledgers of the loyalty program."
            },
            "modified": {
              "type": "string",
              "description": "Timestamp of the most recent update of the loyalty card.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            }
          },
          "description": ""
        },
        "CardLedgerTransactionLogEntry": {
          "required": [
            "amount",
            "cardIdentifier",
            "created",
            "expiryDate",
            "id",
            "name",
            "programId",
            "sessionId",
            "startDate",
            "subledgerId",
            "type"
          ],
          "type": "object",
          "properties": {
            "created": {
              "type": "string",
              "description": "The exact moment the loyalty ledger transaction happened.",
              "format": "date-time"
            },
            "programId": {
              "type": "integer",
              "description": "ID of the loyalty program.",
              "example": 324
            },
            "cardIdentifier": {
              "maxLength": 255,
              "type": "string",
              "description": "Identifier of the loyalty card.",
              "example": "summer-loyalty-card-0543"
            },
            "sessionId": {
              "maxLength": 255,
              "type": "string",
              "description": "ID of the customer session.",
              "example": "05c2da0d-48fa-4aa1-b629-898f58f1584d"
            },
            "type": {
              "maxLength": 255,
              "type": "string",
              "description": "Type of transaction. Possible values are:\n  - `addition`: Points were added.\n  - `subtraction`: Points were subtracted.\n",
              "example": "addition",
              "enum": [
                "addition",
                "subtraction"
              ]
            },
            "name": {
              "maxLength": 255,
              "type": "string",
              "description": "Name or reason of the loyalty ledger transaction.",
              "example": "Reward 10% points of a purchase's current total"
            },
            "startDate": {
              "maxLength": 64,
              "type": "string",
              "description": "Start date of the loyalty ledger entry. Possible values are:\n  - `immediate`: Points ere active immediately.\n  - `timestamp value`: Points are become active from certain date.\n",
              "example": "2022-01-02T15:04:05Z07:00"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the loyalty ledger entry. Possible values are:\n  - `unlimited`: Points have no expiration date.\n  - `timestamp value`: Points have certain expiration date.\n",
              "example": "2022-01-02T15:04:05Z07:00"
            },
            "subledgerId": {
              "maxLength": 64,
              "type": "string",
              "description": "ID of the subledger.",
              "example": "sub-123"
            },
            "amount": {
              "type": "number",
              "description": "Amount of loyalty points of the loyalty ledger transaction.",
              "example": 10.25
            },
            "id": {
              "type": "integer",
              "description": "ID of the loyalty ledger transaction.",
              "example": 123
            }
          },
          "description": "Loyalty ledger transaction log entry."
        },
        "UpdateLoyaltyCard": {
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the loyalty card. Can be one of: ['active', 'disabled']\n"
            }
          }
        },
        "LoyaltyCardProfileRegistration": {
          "required": [
            "integrationId",
            "timestamp"
          ],
          "type": "object",
          "properties": {
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "Integration ID of the customer associated with the card."
            },
            "timestamp": {
              "type": "string",
              "description": "Timestamp of the registration to the card.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            }
          }
        },
        "LoyaltyCardRegistration": {
          "required": [
            "integrationId"
          ],
          "type": "object",
          "properties": {
            "integrationId": {
              "title": "Customer Profile Id",
              "type": "string",
              "description": "The integrationId of the customer profile.",
              "example": "my_customer_profile"
            }
          }
        },
        "LoyaltyProgramBalance": {
          "required": [
            "currentBalance",
            "expiredBalance",
            "pendingBalance",
            "spentBalance",
            "tentativeCurrentBalance"
          ],
          "type": "object",
          "properties": {
            "currentBalance": {
              "title": "Current balance",
              "type": "number",
              "description": "Sum of currently active points.",
              "example": 46
            },
            "pendingBalance": {
              "title": "Pending balance",
              "type": "number",
              "description": "Sum of pending points.",
              "example": 10
            },
            "expiredBalance": {
              "title": "Expired balance",
              "type": "number",
              "description": "Sum of expired points.",
              "example": 30
            },
            "spentBalance": {
              "title": "Spent balance",
              "type": "number",
              "description": "Sum of spent points.",
              "example": 84
            },
            "tentativeCurrentBalance": {
              "title": "Tentative current balance",
              "type": "number",
              "description": "Sum of currently active points, including points added and deducted in open sessions.",
              "example": 56
            }
          },
          "description": "The balance in a Loyalty Program for some Customer."
        },
        "LoyaltyProjection": {
          "required": [
            "totalActivatingPoints",
            "totalExpiringPoints"
          ],
          "type": "object",
          "properties": {
            "projections": {
              "maxItems": 31,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LoyaltyProjectionData"
              }
            },
            "totalExpiringPoints": {
              "type": "number",
              "description": "Sum of points to be expired by the projection date set in the query parameter.",
              "example": 10
            },
            "totalActivatingPoints": {
              "type": "number",
              "description": "Sum of points to be active by the projection date set in the query parameter.",
              "example": 40
            }
          },
          "description": "Group of all loyalty points expected in the future."
        },
        "LoyaltyProjectionData": {
          "required": [
            "activatingPoints",
            "date",
            "expiringPoints",
            "projectedBalance"
          ],
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Specific date of projection.",
              "format": "date-time"
            },
            "expiringPoints": {
              "type": "number",
              "description": "Points that will be expired by the specified date.",
              "example": 14
            },
            "activatingPoints": {
              "type": "number",
              "description": "Points that will be active by the specified date.",
              "example": 25
            },
            "projectedBalance": {
              "type": "number",
              "description": "Current balance plus projected active points, minus expiring points.",
              "example": 57
            }
          }
        },
        "CustomerProfileSearchQuery": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Properties to match against a customer profile. All provided attributes will be exactly matched against profile attributes."
            },
            "integrationIDs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "profileIDs": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "NewCustomerProfile": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item.",
              "example": {
                "Language": "english",
                "ShippingCountry": "DE"
              }
            }
          }
        },
        "CustomerProfile": {
          "required": [
            "accountId",
            "attributes",
            "closedSessions",
            "created",
            "id",
            "integrationId",
            "lastActivity",
            "totalSales"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created. The exact moment this entity was created.",
              "format": "date-time"
            },
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer.",
              "format": "string",
              "example": "URNGV8294NV"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item.",
              "example": {
                "Language": "english",
                "ShippingCountry": "DE"
              }
            },
            "accountId": {
              "title": "Profile belongs to Account",
              "type": "integer",
              "description": "The ID of the Talon.One account that owns this profile.",
              "example": 31
            },
            "closedSessions": {
              "title": "Closed sessions",
              "type": "integer",
              "description": "The total amount of closed sessions by a customer. A closed session is a successful purchase.",
              "example": 3
            },
            "totalSales": {
              "title": "Total Sales",
              "type": "number",
              "description": "Sum of all purchases made by this customer.",
              "example": 299.99
            },
            "loyaltyMemberships": {
              "title": "Loyalty programed joined",
              "type": "array",
              "description": "**DEPRECATED** A list of loyalty programs joined by the customer.\n",
              "items": {
                "$ref": "#/components/schemas/LoyaltyMembership"
              }
            },
            "audienceMemberships": {
              "title": "Audience memberships",
              "type": "array",
              "description": "A list of audiences the customer belongs to.",
              "items": {
                "$ref": "#/components/schemas/AudienceMembership"
              }
            },
            "lastActivity": {
              "type": "string",
              "description": "Timestamp of the most recent event received from this customer.\nThis field is updated on calls that trigger the rule-engine and that are\nnot [dry requests](https://docs.talon.one/docs/dev/integration-api/dry-requests/#overlay).\n\nFor example, [reserving a coupon](https://docs.talon.one/integration-api/#operation/createCouponReservation)\nfor a customer doesn't impact this field.\n",
              "format": "date-time",
              "example": "2020-02-08T14:15:20Z"
            }
          },
          "description": ""
        },
        "CustomerInventory": {
          "type": "object",
          "properties": {
            "profile": {
              "$ref": "#/components/schemas/CustomerProfile"
            },
            "loyalty": {
              "$ref": "#/components/schemas/Loyalty"
            },
            "referrals": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InventoryReferral"
              }
            },
            "coupons": {
              "type": "array",
              "description": "The coupons reserved by this profile. This array includes hard and soft reservations. See each coupon's `reservation` property.\n",
              "items": {
                "$ref": "#/components/schemas/InventoryCoupon"
              }
            },
            "giveaways": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Giveaway"
              }
            }
          }
        },
        "NewCustomerSession": {
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "coupon": {
              "title": "Coupon entered in session",
              "maxLength": 100,
              "type": "string",
              "description": "Any coupon code entered."
            },
            "referral": {
              "title": "Referral code entered in session",
              "maxLength": 100,
              "type": "string",
              "description": "Any referral code entered."
            },
            "state": {
              "title": "Customer's session state",
              "type": "string",
              "description": "Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:\n\n1. `open` → `closed`\n2. `open` → `cancelled`\n3. `closed` → `cancelled` or `partially_returned`\n4. `partially_returned` → `cancelled`\n\nFor more information, see [Customer session states](/docs/dev/concepts/entities#customer-session).\n",
              "default": "open",
              "enum": [
                "open",
                "closed",
                "partially_returned",
                "cancelled"
              ]
            },
            "cartItems": {
              "title": "Items in customer's cart",
              "type": "array",
              "description": "Serialized JSON representation.",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "identifiers": {
              "maxItems": 5,
              "type": "array",
              "description": "Session custom identifiers that you can set limits on or use inside your rules.\n\nFor example, you can use IP addresses as identifiers to potentially identify devices\nand limit discounts abuse in case of customers creating multiple accounts. See the [tutorial](https://docs.talon.one/docs/dev/tutorials/using-identifiers/).\n",
              "example": [
                "91.11.156.141"
              ],
              "items": {
                "type": "string"
              }
            },
            "total": {
              "title": "Session Total",
              "type": "number",
              "description": "The total sum of the cart in one session."
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings.\n"
            }
          },
          "description": ""
        },
        "NewCustomerSessionV2": {
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "couponCodes": {
              "title": "Coupons entered in session",
              "type": "array",
              "description": "Any coupon codes entered.\n\n**Important**: If you [create a coupon budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types)\nfor your campaign, ensure the session contains a coupon code by the time you close it.\n",
              "example": [
                "XMAS-20-2021"
              ],
              "items": {
                "maxLength": 100,
                "type": "string"
              }
            },
            "referralCode": {
              "title": "Referral code entered in session",
              "maxLength": 100,
              "type": "string",
              "description": "Any referral code entered.\n\n**Important**: If you [create a referral budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types)\nfor your campaign, ensure the session contains a referral code by the time you close it.\n",
              "example": "NT2K54D9"
            },
            "loyaltyCards": {
              "maxItems": 1,
              "type": "array",
              "description": "Any loyalty cards used.",
              "example": [
                "loyalty-card-1"
              ],
              "items": {
                "type": "string"
              }
            },
            "state": {
              "title": "Customer's session state",
              "type": "string",
              "description": "Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:\n\n1. `open` → `closed`\n2. `open` → `cancelled`\n3. Either:\n   - `closed` → `cancelled` (**only** via [Update customer session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2)) or\n   - `closed` → `partially_returned` (**only** via [Return cart items](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/returnCartItems))\n4. `partially_returned` → `cancelled`\n\nFor more information, see [Customer session states](/docs/dev/concepts/entities#customer-session).\n",
              "example": "open",
              "default": "open",
              "enum": [
                "open",
                "closed",
                "partially_returned",
                "cancelled"
              ]
            },
            "cartItems": {
              "title": "Customer session's cart items",
              "type": "array",
              "description": "The items to add to this sessions.\n- If cart item flattening is disabled: **Do not exceed 1000 items** (regardless of their `quantity`) per request.\n- If cart item flattening is enabled: **Do not exceed 1000 items** and ensure the sum of all cart item's `quantity` **does not exceed 10.000** per request.\n",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "additionalCosts": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/AdditionalCost"
              },
              "description": "Use this property to set a value for the additional costs of this session, such as a shipping cost.\n\nThey must be created in the Campaign Manager\nbefore you set them with this property. See [Managing additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs/).\n",
              "example": {
                "shipping": {
                  "price": 9
                }
              }
            },
            "identifiers": {
              "maxItems": 5,
              "type": "array",
              "description": "Session custom identifiers that you can set limits on or use inside your rules.\n\nFor example, you can use IP addresses as identifiers to potentially identify devices\nand limit discounts abuse in case of customers creating multiple accounts.\nSee the [tutorial](https://docs.talon.one/docs/dev/tutorials/using-identifiers/).\n\n**Important**: If you [create a unique identifier budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types)\nfor your campaign, ensure the session contains an identifier by the time you close it.\n",
              "example": [
                "91.11.156.141"
              ],
              "items": {
                "type": "string"
              }
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Use this property to set a value for the attributes of your choice. Attributes represent any information to attach to your session, like the shipping city.\n\nYou can use [built-in attributes](https://docs.talon.one/docs/dev/concepts/attributes#built-in-attributes) or [custom ones](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes).\nCustom attributes must be created in the Campaign Manager before you set them with this property.\n",
              "example": {
                "ShippingCity": "Berlin"
              }
            }
          },
          "description": ""
        },
        "CustomerAnalytics": {
          "required": [
            "acceptedCoupons",
            "createdCoupons",
            "freeItems",
            "totalDiscountedOrders",
            "totalDiscounts",
            "totalOrders",
            "totalRevenue"
          ],
          "type": "object",
          "properties": {
            "acceptedCoupons": {
              "type": "integer",
              "description": "Total accepted coupons for this customer."
            },
            "createdCoupons": {
              "type": "integer",
              "description": "Total created coupons for this customer."
            },
            "freeItems": {
              "type": "integer",
              "description": "Total free items given to this customer."
            },
            "totalOrders": {
              "type": "integer",
              "description": "Total orders made by this customer."
            },
            "totalDiscountedOrders": {
              "type": "integer",
              "description": "Total orders made by this customer that had a discount."
            },
            "totalRevenue": {
              "type": "number",
              "description": "Total Revenue across all closed sessions."
            },
            "totalDiscounts": {
              "type": "number",
              "description": "The sum of discounts that were given across all closed sessions."
            }
          },
          "description": ""
        },
        "CustomerActivityReport": {
          "required": [
            "accruedDiscounts",
            "accruedRevenue",
            "campaignName",
            "couponFailedAttempts",
            "couponRedemptions",
            "couponUseAttempts",
            "created",
            "customerId",
            "integrationId",
            "name",
            "totalOrders",
            "totalOrdersNoCoupon"
          ],
          "type": "object",
          "properties": {
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer.",
              "format": "string",
              "example": "URNGV8294NV"
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-02-07T08:15:22Z"
            },
            "name": {
              "type": "string",
              "description": "The name for this customer profile."
            },
            "customerId": {
              "type": "integer",
              "description": "The internal Talon.One ID of the customer."
            },
            "lastActivity": {
              "type": "string",
              "description": "The last activity of the customer.",
              "format": "date-time"
            },
            "couponRedemptions": {
              "type": "integer",
              "description": "Number of coupon redemptions in all customer campaigns."
            },
            "couponUseAttempts": {
              "type": "integer",
              "description": "Number of coupon use attempts in all customer campaigns."
            },
            "couponFailedAttempts": {
              "type": "integer",
              "description": "Number of failed coupon use attempts in all customer campaigns."
            },
            "accruedDiscounts": {
              "type": "number",
              "description": "Number of accrued discounts in all customer campaigns."
            },
            "accruedRevenue": {
              "type": "number",
              "description": "Amount of accrued revenue in all customer campaigns."
            },
            "totalOrders": {
              "type": "integer",
              "description": "Number of orders in all customer campaigns."
            },
            "totalOrdersNoCoupon": {
              "type": "integer",
              "description": "Number of orders without coupon used in all customer campaigns."
            },
            "campaignName": {
              "type": "string",
              "description": "The name of the campaign this customer belongs to."
            }
          },
          "description": ""
        },
        "CustomerSession": {
          "required": [
            "applicationId",
            "attributes",
            "cartItems",
            "coupon",
            "created",
            "discounts",
            "firstSession",
            "integrationId",
            "profileId",
            "referral",
            "state",
            "total",
            "updated"
          ],
          "type": "object",
          "properties": {
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer.",
              "format": "string"
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-02-07T08:15:22Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "coupon": {
              "title": "Coupon entered in session",
              "maxLength": 100,
              "type": "string",
              "description": "Any coupon code entered."
            },
            "referral": {
              "title": "Referral code entered in session",
              "maxLength": 100,
              "type": "string",
              "description": "Any referral code entered."
            },
            "state": {
              "title": "Customer's session state",
              "type": "string",
              "description": "Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:\n\n1. `open` → `closed`\n2. `open` → `cancelled`\n3. `closed` → `cancelled` or `partially_returned`\n4. `partially_returned` → `cancelled`\n\nFor more information, see [Customer session states](/docs/dev/concepts/entities#customer-session).\n",
              "default": "open",
              "enum": [
                "open",
                "closed",
                "partially_returned",
                "cancelled"
              ]
            },
            "cartItems": {
              "title": "Items in customer's cart",
              "type": "array",
              "description": "Serialized JSON representation.",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "identifiers": {
              "maxItems": 5,
              "type": "array",
              "description": "Session custom identifiers that you can set limits on or use inside your rules.\n\nFor example, you can use IP addresses as identifiers to potentially identify devices\nand limit discounts abuse in case of customers creating multiple accounts. See the [tutorial](https://docs.talon.one/docs/dev/tutorials/using-identifiers/).\n",
              "example": [
                "91.11.156.141"
              ],
              "items": {
                "type": "string"
              }
            },
            "total": {
              "title": "Session Total",
              "type": "number",
              "description": "The total sum of the cart in one session."
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings.\n"
            },
            "firstSession": {
              "title": "First session ever?",
              "type": "boolean",
              "description": "Indicates whether this is the first session for the customer's profile. Will always be true for anonymous sessions.",
              "example": true
            },
            "discounts": {
              "title": "Customer's current discounts",
              "type": "object",
              "additionalProperties": {
                "type": "number"
              },
              "description": "A map of labelled discount values, values will be in the same currency as the application associated with the session."
            },
            "updated": {
              "title": "Last activity on the session",
              "type": "string",
              "description": "Timestamp of the most recent event received on this session.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            }
          },
          "description": ""
        },
        "CustomerSessionV2": {
          "required": [
            "additionalCostTotal",
            "applicationId",
            "attributes",
            "cartItemTotal",
            "cartItems",
            "created",
            "firstSession",
            "id",
            "integrationId",
            "profileId",
            "state",
            "total",
            "updated"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created. The exact moment this entity was created.",
              "format": "date-time"
            },
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer.",
              "format": "string",
              "example": "URNGV8294NV"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "couponCodes": {
              "title": "Coupons entered in session",
              "type": "array",
              "description": "Any coupon codes entered.\n\n**Important**: If you [create a coupon budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types)\nfor your campaign, ensure the session contains a coupon code by the time you close it.\n",
              "example": [
                "XMAS-20-2021"
              ],
              "items": {
                "maxLength": 100,
                "type": "string"
              }
            },
            "referralCode": {
              "title": "Referral code entered in session",
              "maxLength": 100,
              "type": "string",
              "description": "Any referral code entered.\n\n**Important**: If you [create a referral budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types)\nfor your campaign, ensure the session contains a referral code by the time you close it.\n",
              "example": "NT2K54D9"
            },
            "loyaltyCards": {
              "maxItems": 1,
              "type": "array",
              "description": "Any loyalty cards used.",
              "example": [
                "loyalty-card-1"
              ],
              "items": {
                "type": "string"
              }
            },
            "state": {
              "title": "Customer's session state",
              "type": "string",
              "description": "Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:\n\n1. `open` → `closed`\n2. `open` → `cancelled`\n3. Either:\n   - `closed` → `cancelled` (**only** via [Update customer session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2)) or\n   - `closed` → `partially_returned` (**only** via [Return cart items](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/returnCartItems))\n4. `partially_returned` → `cancelled`\n\nFor more information, see [Customer session states](/docs/dev/concepts/entities#customer-session).\n",
              "example": "open",
              "default": "open",
              "enum": [
                "open",
                "closed",
                "partially_returned",
                "cancelled"
              ]
            },
            "cartItems": {
              "title": "Customer session's cart items",
              "type": "array",
              "description": "The items to add to this sessions.\n- If cart item flattening is disabled: **Do not exceed 1000 items** (regardless of their `quantity`) per request.\n- If cart item flattening is enabled: **Do not exceed 1000 items** and ensure the sum of all cart item's `quantity` **does not exceed 10.000** per request.\n",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "additionalCosts": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/AdditionalCost"
              },
              "description": "Use this property to set a value for the additional costs of this session, such as a shipping cost.\n\nThey must be created in the Campaign Manager\nbefore you set them with this property. See [Managing additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs/).\n",
              "example": {
                "shipping": {
                  "price": 9
                }
              }
            },
            "identifiers": {
              "maxItems": 5,
              "type": "array",
              "description": "Session custom identifiers that you can set limits on or use inside your rules.\n\nFor example, you can use IP addresses as identifiers to potentially identify devices\nand limit discounts abuse in case of customers creating multiple accounts.\nSee the [tutorial](https://docs.talon.one/docs/dev/tutorials/using-identifiers/).\n\n**Important**: If you [create a unique identifier budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types)\nfor your campaign, ensure the session contains an identifier by the time you close it.\n",
              "example": [
                "91.11.156.141"
              ],
              "items": {
                "type": "string"
              }
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Use this property to set a value for the attributes of your choice. Attributes represent any information to attach to your session, like the shipping city.\n\nYou can use [built-in attributes](https://docs.talon.one/docs/dev/concepts/attributes#built-in-attributes) or [custom ones](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes).\nCustom attributes must be created in the Campaign Manager before you set them with this property.\n",
              "example": {
                "ShippingCity": "Berlin"
              }
            },
            "firstSession": {
              "title": "First session ever?",
              "type": "boolean",
              "description": "Indicates whether this is the first session for the customer's profile. Will always be true for anonymous sessions.",
              "example": true
            },
            "total": {
              "title": "Session Total",
              "type": "number",
              "description": "The total sum of cart-items, as well as additional costs, before any discounts applied.",
              "example": 119.99
            },
            "cartItemTotal": {
              "title": "Cart Items Total",
              "type": "number",
              "description": "The total sum of cart-items before any discounts applied.",
              "example": 99.99
            },
            "additionalCostTotal": {
              "title": "Additional Costs Total",
              "type": "number",
              "description": "The total sum of additional costs before any discounts applied.",
              "example": 20
            },
            "updated": {
              "title": "Last activity on the session",
              "type": "string",
              "description": "Timestamp of the most recent event received on this session.",
              "format": "date-time",
              "example": "2020-02-08T14:15:22Z"
            }
          },
          "description": ""
        },
        "CartItem": {
          "required": [
            "name",
            "price",
            "quantity",
            "sku"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name of item",
              "minLength": 1,
              "type": "string",
              "description": "Name of item.",
              "example": "Air Glide"
            },
            "sku": {
              "title": "SKU of item",
              "minLength": 1,
              "type": "string",
              "description": "Stock keeping unit of item.",
              "example": "SKU1241028"
            },
            "quantity": {
              "title": "Quantity of item",
              "minimum": 1,
              "type": "integer",
              "description": "Quantity of item. **Important:** If you enabled [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items),\nthe quantity is always one and the same cart item might receive multiple per-item discounts. Ensure you can process multiple discounts on one cart item correctly.\n",
              "example": 1
            },
            "returnedQuantity": {
              "title": "Returned quantity of item",
              "type": "integer",
              "description": "Number of returned items, calculated internally based on returns of this item.",
              "example": 1
            },
            "remainingQuantity": {
              "title": "Remaining quantity of item",
              "type": "integer",
              "description": "Remaining quantity of the item, calculated internally based on returns of this item.",
              "example": 1
            },
            "price": {
              "title": "Price of item",
              "type": "number",
              "description": "Price of item.",
              "example": 99.99
            },
            "category": {
              "title": "Item category",
              "type": "string",
              "description": "Type, group or model of the item.",
              "example": "shoes"
            },
            "weight": {
              "title": "Weight of item",
              "type": "number",
              "description": "Weight of item in grams.",
              "example": 1130
            },
            "height": {
              "title": "Height of item",
              "type": "number",
              "description": "Height of item in mm."
            },
            "width": {
              "title": "Width of item",
              "type": "number",
              "description": "Width of item in mm."
            },
            "length": {
              "title": "Length of item",
              "type": "number",
              "description": "Length of item in mm."
            },
            "position": {
              "title": "Position of Cart Item",
              "type": "number",
              "description": "Position of the Cart Item in the Cart (calculated internally)."
            },
            "attributes": {
              "title": "Item attributes",
              "type": "object",
              "properties": {},
              "description": "Use this property to set a value for the attributes of your choice. [Attributes](https://docs.talon.one/docs/dev/concepts/attributes) represent any information to attach to this cart item.\n\nCustom _cart item_ attributes must be created in the Campaign Manager before you set them with this property.\n",
              "example": {
                "image": "11.jpeg",
                "material": "leather"
              }
            },
            "additionalCosts": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/AdditionalCost"
              },
              "description": "Use this property to set a value for the additional costs of this item, such as a shipping cost. They must be created in the Campaign Manager\nbefore you set them with this property. See [Managing additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs/).\n",
              "example": {
                "shipping": {
                  "price": 9
                }
              }
            }
          },
          "x-attributable": true
        },
        "AdditionalCost": {
          "required": [
            "price"
          ],
          "type": "object",
          "properties": {
            "price": {
              "title": "Price of additional cost",
              "type": "number",
              "example": 4.5
            }
          }
        },
        "IntegrationEvent": {
          "required": [
            "attributes",
            "type"
          ],
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "type": {
              "title": "Event Type",
              "minLength": 1,
              "type": "string",
              "description": "A string representing the event. Must not be a reserved event name.",
              "example": "pageViews"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary additional JSON data associated with the event.",
              "example": {
                "myAttribute": "myValue"
              }
            }
          },
          "description": ""
        },
        "NewEvent": {
          "required": [
            "attributes",
            "sessionId",
            "type"
          ],
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "type": {
              "title": "Event Type",
              "minLength": 1,
              "type": "string",
              "description": "A string representing the event. Must not be a reserved event name.",
              "example": "pageViews"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary additional JSON data associated with the event.",
              "example": {
                "myAttribute": "myValue"
              }
            },
            "sessionId": {
              "minLength": 1,
              "type": "string",
              "description": "The ID of the session that this event occurred in.",
              "example": "175KJPS947296"
            }
          },
          "description": ""
        },
        "Event": {
          "required": [
            "applicationId",
            "attributes",
            "created",
            "effects",
            "id",
            "ledgerEntries",
            "type"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "type": {
              "title": "Event Type",
              "minLength": 1,
              "type": "string",
              "description": "A string representing the event. Must not be a reserved event name.",
              "example": "pageViews"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary additional JSON data associated with the event.",
              "example": {
                "myAttribute": "myValue"
              }
            },
            "sessionId": {
              "title": "Session ID of Event",
              "type": "string",
              "description": "The ID of the session that this event occurred in.",
              "example": "175KJPS947296"
            },
            "effects": {
              "type": "array",
              "description": "An array of effects generated by the rules of the enabled campaigns of the Application.\n\nYou decide how to apply them in your system. See the list of [API effects](/docs/dev/integration-api/api-effects).\n",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "ledgerEntries": {
              "type": "array",
              "description": "Ledger entries for the event.",
              "items": {
                "$ref": "#/components/schemas/LedgerEntry"
              }
            },
            "meta": {
              "$ref": "#/components/schemas/Meta"
            }
          },
          "description": ""
        },
        "IntegrationState": {
          "required": [
            "event",
            "profile",
            "session"
          ],
          "type": "object",
          "properties": {
            "session": {
              "$ref": "#/components/schemas/CustomerSession"
            },
            "profile": {
              "$ref": "#/components/schemas/CustomerProfile"
            },
            "event": {
              "$ref": "#/components/schemas/Event"
            },
            "loyalty": {
              "$ref": "#/components/schemas/Loyalty"
            },
            "coupon": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "description": "Contains all state that might interest application integration plugins. This is the response type returned by all of the Integration API operations.\n"
        },
        "IntegrationStateV2": {
          "required": [
            "createdCoupons",
            "createdReferrals",
            "effects"
          ],
          "type": "object",
          "properties": {
            "customerSession": {
              "$ref": "#/components/schemas/CustomerSessionV2"
            },
            "customerProfile": {
              "$ref": "#/components/schemas/CustomerProfile"
            },
            "event": {
              "$ref": "#/components/schemas/Event"
            },
            "loyalty": {
              "$ref": "#/components/schemas/Loyalty"
            },
            "referral": {
              "$ref": "#/components/schemas/InventoryReferral"
            },
            "coupons": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coupon"
              }
            },
            "triggeredCampaigns": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Campaign"
              }
            },
            "effects": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Effect"
              }
            },
            "ruleFailureReasons": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RuleFailureReason"
              }
            },
            "createdCoupons": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coupon"
              }
            },
            "createdReferrals": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Referral"
              }
            },
            "awardedGiveaways": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Giveaway"
              }
            },
            "return": {
              "$ref": "#/components/schemas/Return"
            },
            "previousReturns": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Return"
              }
            }
          },
          "description": "Contains all entities that might interest Talon.One integrations. This is the response type returned by the V2 PUT customer_session endpoint\n"
        },
        "IntegrationCustomerSessionResponse": {
          "type": "object",
          "properties": {
            "customerSession": {
              "$ref": "#/components/schemas/CustomerSessionV2"
            }
          }
        },
        "ApplicationCustomer": {
          "required": [
            "accountId",
            "attributes",
            "closedSessions",
            "created",
            "id",
            "integrationId",
            "lastActivity",
            "totalSales"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints. Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints."
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created.",
              "format": "date-time"
            },
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer. The integration ID set by your integration layer.",
              "format": "string"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item.",
              "example": {
                "Language": "english",
                "ShippingCountry": "DE"
              }
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the Talon.One account that owns this profile. The ID of the Talon.One account that owns this profile."
            },
            "closedSessions": {
              "title": "Closed sessions",
              "type": "integer",
              "description": "The total amount of closed sessions by a customer. A closed session is a successful purchase.",
              "example": 3
            },
            "totalSales": {
              "title": "Total Sales",
              "type": "number",
              "description": "Sum of all purchases made by this customer.",
              "example": 299.99
            },
            "loyaltyMemberships": {
              "title": "Loyalty programed joined",
              "type": "array",
              "description": "**DEPRECATED** A list of loyalty programs joined by the customer.\n",
              "items": {
                "$ref": "#/components/schemas/LoyaltyMembership"
              }
            },
            "audienceMemberships": {
              "title": "Audience memberships",
              "type": "array",
              "description": "A list of audiences the customer belongs to.",
              "items": {
                "$ref": "#/components/schemas/AudienceMembership"
              }
            },
            "lastActivity": {
              "type": "string",
              "description": "Timestamp of the most recent event received from this customer.\nThis field is updated on calls that trigger the rule-engine and that are\nnot [dry requests](https://docs.talon.one/docs/dev/integration-api/dry-requests/#overlay).\n\nFor example, [reserving a coupon](https://docs.talon.one/integration-api/#operation/createCouponReservation)\nfor a customer doesn't impact this field.\n",
              "format": "date-time",
              "example": "2020-02-08T14:15:20Z"
            },
            "advocateIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The Integration ID of the Customer Profile that referred this Customer in the Application."
            }
          },
          "description": ""
        },
        "ApplicationReferee": {
          "required": [
            "advocateIntegrationId",
            "applicationId",
            "code",
            "created",
            "friendIntegrationId",
            "sessionId"
          ],
          "type": "object",
          "properties": {
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "sessionId": {
              "type": "string",
              "description": "Integration ID of the session in which the customer redeemed the referral."
            },
            "advocateIntegrationId": {
              "title": "Advocate's Profile ID",
              "maxLength": 1000,
              "type": "string",
              "description": "Integration ID of the Advocate's Profile."
            },
            "friendIntegrationId": {
              "title": "Friend's Profile ID",
              "maxLength": 1000,
              "type": "string",
              "description": "Integration ID of the Friend's Profile."
            },
            "code": {
              "type": "string",
              "description": "Advocate's referral code."
            },
            "created": {
              "type": "string",
              "description": "Timestamp of the moment the customer redeemed the referral.",
              "format": "date-time"
            }
          },
          "description": ""
        },
        "ApplicationSession": {
          "required": [
            "applicationId",
            "cartItems",
            "coupon",
            "created",
            "discounts",
            "id",
            "integrationId",
            "referral",
            "state",
            "total",
            "totalDiscounts"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created. The exact moment this entity was created.",
              "format": "date-time"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "profileId": {
              "type": "integer",
              "description": "The globally unique Talon.One ID of the customer that created this entity.",
              "example": 138
            },
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID set by your integration layer.",
              "format": "string",
              "example": "URNGV8294NV"
            },
            "profileintegrationid": {
              "maxLength": 1000,
              "type": "string",
              "description": "Integration ID of the customer for the session.",
              "example": "382370BKDB946"
            },
            "coupon": {
              "type": "string",
              "description": "Any coupon code entered.",
              "example": "BKDB946"
            },
            "referral": {
              "type": "string",
              "description": "Any referral code entered.",
              "example": "BKDB946"
            },
            "state": {
              "type": "string",
              "description": "Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:\n\n1. `open` → `closed`\n2. `open` → `cancelled`\n3. `closed` → `cancelled` or `partially_returned`\n4. `partially_returned` → `cancelled`\n\nFor more information, see [Customer session states](/docs/dev/concepts/entities#customer-session).\n",
              "example": "closed",
              "enum": [
                "open",
                "closed",
                "partially_returned",
                "cancelled"
              ]
            },
            "cartItems": {
              "type": "array",
              "description": "Serialized JSON representation.",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "discounts": {
              "type": "object",
              "additionalProperties": {
                "type": "number"
              },
              "description": "**API V1 only.** A map of labeled discount values, in the same currency as the session.\n\nIf you are using the V2 endpoints, refer to the `totalDiscounts` property instead.\n"
            },
            "totalDiscounts": {
              "type": "number",
              "description": "The total sum of the discounts applied to this session.",
              "example": 100
            },
            "total": {
              "type": "number",
              "description": "The total sum of the session before any discounts applied.",
              "example": 200
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item."
            }
          },
          "description": ""
        },
        "ApplicationEvent": {
          "required": [
            "applicationId",
            "attributes",
            "created",
            "effects",
            "id",
            "type"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "profileId": {
              "type": "integer",
              "description": "The globally unique Talon.One ID of the customer that created this entity.",
              "example": 138
            },
            "sessionId": {
              "type": "integer",
              "description": "The globally unique Talon.One ID of the session that contains this event."
            },
            "type": {
              "type": "string",
              "description": "A string representing the event. Must not be a reserved event name."
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Additional JSON serialized data associated with the event."
            },
            "effects": {
              "type": "array",
              "description": "An array containing the effects that were applied as a result of this event.",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "ruleFailureReasons": {
              "type": "array",
              "description": "An array containing the rule failure reasons which happened during this event.",
              "items": {
                "$ref": "#/components/schemas/RuleFailureReason"
              }
            }
          },
          "description": ""
        },
        "NewAccount": {
          "required": [
            "companyName"
          ],
          "type": "object",
          "properties": {
            "companyName": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "AccountAnalytics": {
          "required": [
            "activeCampaigns",
            "activeCoupons",
            "activeReferralCodes",
            "activeRules",
            "applications",
            "campaigns",
            "coupons",
            "customAttributes",
            "expiredCoupons",
            "expiredReferralCodes",
            "liveActiveCampaigns",
            "liveApplications",
            "liveLoyaltyPrograms",
            "loyaltyPrograms",
            "referralCodes",
            "roles",
            "sandboxApplications",
            "users",
            "webhooks"
          ],
          "type": "object",
          "properties": {
            "applications": {
              "type": "integer",
              "description": "Total number of applications in the account.",
              "example": 11
            },
            "liveApplications": {
              "type": "integer",
              "description": "Total number of live applications in the account.",
              "example": 6
            },
            "sandboxApplications": {
              "type": "integer",
              "description": "Total number of sandbox applications in the account.",
              "example": 2
            },
            "campaigns": {
              "type": "integer",
              "description": "Total number of campaigns in the account.",
              "example": 35
            },
            "activeCampaigns": {
              "type": "integer",
              "description": "Total number of active campaigns in the account.",
              "example": 15
            },
            "liveActiveCampaigns": {
              "type": "integer",
              "description": "Total number of active campaigns in live applications in the account.",
              "example": 10
            },
            "coupons": {
              "type": "integer",
              "description": "Total number of coupons in the account.",
              "example": 850
            },
            "activeCoupons": {
              "type": "integer",
              "description": "Total number of active coupons in the account.",
              "example": 650
            },
            "expiredCoupons": {
              "type": "integer",
              "description": "Total number of expired coupons in the account.",
              "example": 200
            },
            "referralCodes": {
              "type": "integer",
              "description": "Total number of referral codes in the account.",
              "example": 500
            },
            "activeReferralCodes": {
              "type": "integer",
              "description": "Total number of active referral codes in the account.",
              "example": 100
            },
            "expiredReferralCodes": {
              "type": "integer",
              "description": "Total number of expired referral codes in the account.",
              "example": 400
            },
            "activeRules": {
              "type": "integer",
              "description": "Total number of active rules in the account.",
              "example": 35
            },
            "users": {
              "type": "integer",
              "description": "Total number of users in the account."
            },
            "roles": {
              "type": "integer",
              "description": "Total number of roles in the account.",
              "example": 10
            },
            "customAttributes": {
              "type": "integer",
              "description": "Total number of custom attributes in the account.",
              "example": 18
            },
            "webhooks": {
              "type": "integer",
              "description": "Total number of webhooks in the account.",
              "example": 2
            },
            "loyaltyPrograms": {
              "type": "integer",
              "description": "Total number of all loyalty programs in the account.",
              "example": 5
            },
            "liveLoyaltyPrograms": {
              "type": "integer",
              "description": "Total number of live loyalty programs in the account.",
              "example": 5
            }
          }
        },
        "AccountLimits": {
          "required": [
            "activeCampaigns",
            "activeRules",
            "apiVolume",
            "coupons",
            "liveApplications",
            "liveLoyaltyPrograms",
            "promotionTypes",
            "referralCodes",
            "sandboxApplications",
            "sandboxLoyaltyPrograms",
            "users",
            "webhooks"
          ],
          "type": "object",
          "properties": {
            "liveApplications": {
              "type": "integer",
              "description": "Total number of allowed live applications in the account."
            },
            "sandboxApplications": {
              "type": "integer",
              "description": "Total number of allowed sandbox applications in the account."
            },
            "activeCampaigns": {
              "type": "integer",
              "description": "Total number of allowed active campaigns in live applications in the account."
            },
            "coupons": {
              "type": "integer",
              "description": "Total number of allowed coupons in the account."
            },
            "referralCodes": {
              "type": "integer",
              "description": "Total number of allowed referral codes in the account."
            },
            "activeRules": {
              "type": "integer",
              "description": "Total number of allowed active rulesets in the account."
            },
            "liveLoyaltyPrograms": {
              "type": "integer",
              "description": "Total number of allowed live loyalty programs in the account."
            },
            "sandboxLoyaltyPrograms": {
              "type": "integer",
              "description": "Total number of allowed sandbox loyalty programs in the account."
            },
            "webhooks": {
              "type": "integer",
              "description": "Total number of allowed webhooks in the account."
            },
            "users": {
              "type": "integer",
              "description": "Total number of allowed users in the account."
            },
            "apiVolume": {
              "type": "integer",
              "description": "Allowed volume of API requests to the account."
            },
            "promotionTypes": {
              "type": "array",
              "description": "Array of promotion types that are employed in the account.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "UpdateAccount": {
          "required": [
            "billingEmail",
            "companyName"
          ],
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            },
            "companyName": {
              "minLength": 1,
              "type": "string",
              "description": "Name of your company."
            },
            "billingEmail": {
              "type": "string",
              "description": "The billing email address associated with your company account.",
              "format": "email"
            },
            "state": {
              "type": "string",
              "description": "State of the account (active, deactivated).",
              "enum": [
                "active",
                "deactivated"
              ]
            },
            "planExpires": {
              "type": "string",
              "description": "The point in time at which your current plan expires.",
              "format": "date-time"
            }
          }
        },
        "Account": {
          "required": [
            "applicationCount",
            "billingEmail",
            "campaignsActiveCount",
            "campaignsInactiveCount",
            "companyName",
            "created",
            "domainName",
            "id",
            "modified",
            "state",
            "userCount"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "companyName": {
              "minLength": 1,
              "type": "string"
            },
            "domainName": {
              "type": "string",
              "description": "Subdomain Name for yourcompany.talon.one."
            },
            "state": {
              "type": "string",
              "description": "State of the account (active, deactivated).",
              "enum": [
                "active",
                "deactivated"
              ]
            },
            "billingEmail": {
              "type": "string",
              "description": "The billing email address associated with your company account.",
              "format": "email"
            },
            "planName": {
              "type": "string",
              "description": "The name of your booked plan."
            },
            "planExpires": {
              "type": "string",
              "description": "The point in time at which your current plan expires.",
              "format": "date-time"
            },
            "applicationLimit": {
              "type": "integer",
              "description": "The maximum number of Applications covered by your plan."
            },
            "userLimit": {
              "type": "integer",
              "description": "The maximum number of Campaign Manager Users covered by your plan."
            },
            "campaignLimit": {
              "type": "integer",
              "description": "The maximum number of Campaigns covered by your plan."
            },
            "apiLimit": {
              "type": "integer",
              "description": "The maximum number of Integration API calls covered by your plan per billing period."
            },
            "applicationCount": {
              "type": "integer",
              "description": "The current number of Applications in your account."
            },
            "userCount": {
              "type": "integer",
              "description": "The current number of Campaign Manager Users in your account."
            },
            "campaignsActiveCount": {
              "type": "integer",
              "description": "The current number of active Campaigns in your account."
            },
            "campaignsInactiveCount": {
              "type": "integer",
              "description": "The current number of inactive Campaigns in your account."
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this campaign."
            }
          },
          "description": ""
        },
        "NewAccountSignUp": {
          "required": [
            "companyName",
            "email",
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "The email address associated with your account.",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string",
              "description": "The password for your account.",
              "example": "admin123456"
            },
            "companyName": {
              "minLength": 1,
              "type": "string"
            }
          },
          "description": ""
        },
        "NewUser": {
          "required": [
            "email",
            "inviteToken",
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "The email address associated with your account.",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string",
              "description": "The password for your account.",
              "example": "admin123456"
            },
            "name": {
              "type": "string",
              "description": "Your name."
            },
            "inviteToken": {
              "minLength": 1,
              "type": "string",
              "example": "Gy9b8w1irmQtEPo5RmbMmSPheL5h4"
            }
          },
          "description": ""
        },
        "UpdateUser": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The user name."
            },
            "policy": {
              "type": "string",
              "description": "ACL Json.",
              "example": ""
            },
            "state": {
              "type": "string",
              "description": "New state (\"deactivated\" or \"active\") for the user. Only usable by admins for the user.",
              "example": "deactivated",
              "enum": [
                "deactivated",
                "active"
              ]
            },
            "roles": {
              "type": "array",
              "description": "List of roles to assign to the user.",
              "example": [
                1,
                3
              ],
              "items": {
                "type": "integer"
              }
            },
            "applicationNotificationSubscriptions": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "ChangeProfilePassword": {
          "required": [
            "newPassword",
            "password"
          ],
          "type": "object",
          "properties": {
            "password": {
              "type": "string",
              "description": "Your old password."
            },
            "newPassword": {
              "type": "string",
              "description": "Your new password."
            }
          }
        },
        "NewInviteEmail": {
          "required": [
            "email",
            "token"
          ],
          "type": "object",
          "properties": {
            "email": {
              "minLength": 1,
              "type": "string",
              "format": "email"
            },
            "token": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "NewPasswordEmail": {
          "required": [
            "email"
          ],
          "type": "object",
          "properties": {
            "email": {
              "minLength": 1,
              "type": "string",
              "format": "email"
            }
          }
        },
        "NewPassword": {
          "required": [
            "password",
            "resetToken"
          ],
          "type": "object",
          "properties": {
            "password": {
              "type": "string",
              "description": "The new password for your account."
            },
            "resetToken": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "Environment": {
          "required": [
            "applicationId",
            "created",
            "functions",
            "id",
            "slots",
            "templates",
            "variables"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "slots": {
              "type": "array",
              "description": "The slots defined for this application.",
              "items": {
                "$ref": "#/components/schemas/SlotDef"
              }
            },
            "functions": {
              "type": "array",
              "description": "The functions defined for this application.",
              "items": {
                "$ref": "#/components/schemas/FunctionDef"
              }
            },
            "templates": {
              "type": "array",
              "description": "The templates defined for this application.",
              "items": {
                "$ref": "#/components/schemas/TemplateDef"
              }
            },
            "variables": {
              "type": "string",
              "description": "A stringified version of the environment's Talang variables scope."
            },
            "giveawaysPools": {
              "type": "array",
              "description": "The giveaways pools that the application is subscribed to.",
              "items": {
                "$ref": "#/components/schemas/GiveawaysPool"
              }
            },
            "loyaltyPrograms": {
              "type": "array",
              "description": "The loyalty programs that the application is subscribed to.",
              "items": {
                "$ref": "#/components/schemas/LoyaltyProgram"
              }
            },
            "attributes": {
              "type": "array",
              "description": "The attributes that the application is subscribed to.",
              "items": {
                "$ref": "#/components/schemas/Attribute"
              }
            },
            "additionalCosts": {
              "type": "array",
              "description": "The additional costs that the application is subscribed to.",
              "items": {
                "$ref": "#/components/schemas/AccountAdditionalCost"
              }
            },
            "audiences": {
              "type": "array",
              "description": "The audiences contained in the account which the application belongs to.",
              "items": {
                "$ref": "#/components/schemas/Audience"
              }
            },
            "collections": {
              "type": "array",
              "description": "The account-level collections that the application is subscribed to.",
              "items": {
                "$ref": "#/components/schemas/Collection"
              }
            }
          },
          "description": ""
        },
        "SlotDef": {
          "required": [
            "name",
            "title",
            "type",
            "writable"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The dot-separated path to this slot for use in Talang."
            },
            "type": {
              "type": "string",
              "description": "The type of this slot, one of string, number, boolean, or list[type]."
            },
            "title": {
              "type": "string",
              "description": "Campaigner-friendly name for the slot."
            },
            "description": {
              "type": "string",
              "description": "A short description of the slot."
            },
            "help": {
              "type": "string",
              "description": "Extended help text for the slot."
            },
            "writable": {
              "type": "boolean",
              "description": "Whether or not this slot can be updated by rule effects."
            }
          }
        },
        "FuncArgDef": {
          "required": [
            "description",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "minLength": 1,
              "type": "string",
              "description": "The type of value this argument expects.",
              "enum": [
                "string",
                "boolean",
                "number",
                "time"
              ]
            },
            "description": {
              "type": "string",
              "description": "A campaigner-friendly description of the argument, this will also be shown in the rule editor."
            }
          }
        },
        "TemplateArgDef": {
          "required": [
            "description",
            "title",
            "type",
            "ui"
          ],
          "type": "object",
          "properties": {
            "type": {
              "minLength": 1,
              "type": "string",
              "description": "The type of value this argument expects.",
              "enum": [
                "string",
                "boolean",
                "number",
                "time"
              ]
            },
            "description": {
              "type": "string",
              "description": "A campaigner-friendly description of the argument, this will also be shown in the rule editor."
            },
            "title": {
              "minLength": 1,
              "type": "string",
              "description": "A campaigner friendly name for the argument, this will be shown in the rule editor."
            },
            "ui": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary metadata that may be used to render an input for this argument."
            }
          },
          "description": ""
        },
        "FunctionDef": {
          "required": [
            "args",
            "name",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The function name used in Talang."
            },
            "type": {
              "type": "string",
              "description": "The type of this function argument."
            },
            "description": {
              "type": "string",
              "description": "A short description of the function."
            },
            "help": {
              "type": "string",
              "description": "Extended help text for the function."
            },
            "args": {
              "type": "array",
              "description": "An array of argument definitions.",
              "items": {
                "$ref": "#/components/schemas/FuncArgDef"
              }
            }
          }
        },
        "CampaignTemplateParams": {
          "required": [
            "description",
            "name",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "Name of the campaign template parameter."
            },
            "type": {
              "type": "string",
              "description": "Defines the type of parameter value.",
              "enum": [
                "string",
                "number",
                "boolean",
                "percent",
                "(list string)",
                "time"
              ]
            },
            "description": {
              "type": "string",
              "description": "Explains the meaning of this template parameter and the placeholder value that will define it. It is used on campaign creation from this template."
            },
            "attributeId": {
              "type": "integer",
              "description": "ID of the corresponding attribute.",
              "example": 42
            }
          }
        },
        "NewCampaignTemplate": {
          "required": [
            "description",
            "instructions",
            "name",
            "state"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The campaign template name."
            },
            "description": {
              "type": "string",
              "description": "Customer-facing text that explains the objective of the template."
            },
            "instructions": {
              "type": "string",
              "description": "Customer-facing text that explains how to use the template. For example, you can use this property to explain the available attributes of this template, and how they can be modified when a user uses this template to create a new campaign."
            },
            "campaignAttributes": {
              "type": "object",
              "properties": {},
              "description": "The Campaign Attributes that Campaigns created from this template will have by default."
            },
            "couponAttributes": {
              "type": "object",
              "properties": {},
              "description": "The Campaign Attributes that Coupons created from this template will have by default."
            },
            "state": {
              "type": "string",
              "description": "Only Campaign Templates in 'available' state may be used to create Campaigns.",
              "enum": [
                "draft",
                "enabled",
                "disabled"
              ]
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign template.",
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "A list of features for the campaign template.",
              "items": {
                "type": "string",
                "enum": [
                  "coupons",
                  "referrals",
                  "loyalty",
                  "giveaways"
                ]
              }
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "referralSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "limits": {
              "type": "array",
              "description": "The set of limits that will operate for this campaign template.",
              "items": {
                "$ref": "#/components/schemas/TemplateLimitConfig"
              }
            },
            "templateParams": {
              "type": "array",
              "description": "Template parameters are fields which can be used to replace values in a rule.",
              "items": {
                "$ref": "#/components/schemas/CampaignTemplateParams"
              }
            },
            "campaignCollections": {
              "type": "array",
              "description": "The campaign collections from the blueprint campaign for the template.",
              "items": {
                "$ref": "#/components/schemas/CampaignTemplateCollection"
              }
            }
          }
        },
        "UpdateCampaignTemplate": {
          "required": [
            "applicationsIds",
            "description",
            "instructions",
            "name",
            "state"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The campaign template name."
            },
            "description": {
              "type": "string",
              "description": "Customer-facing text that explains the objective of the template."
            },
            "instructions": {
              "type": "string",
              "description": "Customer-facing text that explains how to use the template. For example, you can use this property to explain the available attributes of this template, and how they can be modified when a user uses this template to create a new campaign."
            },
            "campaignAttributes": {
              "type": "object",
              "properties": {},
              "description": "The Campaign Attributes that Campaigns created from this template will have by default."
            },
            "couponAttributes": {
              "type": "object",
              "properties": {},
              "description": "The Campaign Attributes that Coupons created from this template will have by default."
            },
            "state": {
              "type": "string",
              "description": "Only Campaign Templates in 'available' state may be used to create Campaigns.",
              "enum": [
                "draft",
                "enabled",
                "disabled"
              ]
            },
            "activeRulesetId": {
              "type": "integer",
              "description": "The ID of the Ruleset this Campaign Template will use."
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign template.",
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "A list of features for the campaign template.",
              "items": {
                "type": "string",
                "enum": [
                  "coupons",
                  "referrals",
                  "loyalty",
                  "giveaways"
                ]
              }
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "referralSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "limits": {
              "type": "array",
              "description": "The set of limits that will operate for this campaign template.",
              "items": {
                "$ref": "#/components/schemas/TemplateLimitConfig"
              }
            },
            "templateParams": {
              "type": "array",
              "description": "Template parameters are fields which can be used to replace values in a rule.",
              "items": {
                "$ref": "#/components/schemas/CampaignTemplateParams"
              }
            },
            "applicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this campaign template.",
              "items": {
                "type": "integer"
              }
            },
            "campaignCollections": {
              "type": "array",
              "description": "The campaign collections from the blueprint campaign for the template.",
              "items": {
                "$ref": "#/components/schemas/CampaignTemplateCollection"
              }
            }
          }
        },
        "CampaignTemplateCollection": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "pattern": "^[A-Za-z](\\w|\\s)*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            },
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            }
          }
        },
        "CampaignTemplate": {
          "required": [
            "accountId",
            "applicationsIds",
            "created",
            "description",
            "id",
            "instructions",
            "name",
            "state",
            "userId",
            "validApplicationIds"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The campaign template name."
            },
            "description": {
              "type": "string",
              "description": "Customer-facing text that explains the objective of the template."
            },
            "instructions": {
              "type": "string",
              "description": "Customer-facing text that explains how to use the template. For example, you can use this property to explain the available attributes of this template, and how they can be modified when a user uses this template to create a new campaign."
            },
            "campaignAttributes": {
              "type": "object",
              "properties": {},
              "description": "The Campaign Attributes that Campaigns created from this template will have by default."
            },
            "couponAttributes": {
              "type": "object",
              "properties": {},
              "description": "The Campaign Attributes that Coupons created from this template will have by default."
            },
            "state": {
              "type": "string",
              "description": "Only Campaign Templates in 'available' state may be used to create Campaigns.",
              "enum": [
                "draft",
                "enabled",
                "disabled"
              ]
            },
            "activeRulesetId": {
              "type": "integer",
              "description": "The ID of the Ruleset this Campaign Template will use."
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign template.",
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            },
            "features": {
              "type": "array",
              "description": "A list of features for the campaign template.",
              "items": {
                "type": "string",
                "enum": [
                  "coupons",
                  "referrals",
                  "loyalty",
                  "giveaways"
                ]
              }
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "referralSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "limits": {
              "type": "array",
              "description": "The set of limits that will operate for this campaign template.",
              "items": {
                "$ref": "#/components/schemas/TemplateLimitConfig"
              }
            },
            "templateParams": {
              "type": "array",
              "description": "Template parameters are fields which can be used to replace values in a rule.",
              "items": {
                "$ref": "#/components/schemas/CampaignTemplateParams"
              }
            },
            "applicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this campaign template. A list of the IDs of the applications that are subscribed to this campaign template.",
              "items": {
                "type": "integer",
                "description": ""
              }
            },
            "campaignCollections": {
              "type": "array",
              "description": "The campaign collections from the blueprint campaign for the template.",
              "items": {
                "$ref": "#/components/schemas/CampaignTemplateCollection"
              }
            },
            "updated": {
              "type": "string",
              "description": "Timestamp of the most recent update to the campaign template or any of its elements.",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "description": "Name of the user who last updated this campaign template if available."
            },
            "validApplicationIds": {
              "type": "array",
              "description": "The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer"
              }
            }
          },
          "description": ""
        },
        "CreateTemplateCampaign": {
          "required": [
            "name",
            "templateId"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Campaign Name",
              "minLength": 1,
              "type": "string",
              "description": "A user-facing name for this campaign.",
              "example": "Discount campaign"
            },
            "description": {
              "title": "Campaign Description",
              "type": "string",
              "description": "A detailed description of the campaign.",
              "example": "This template is for discount campaigns."
            },
            "templateId": {
              "type": "integer",
              "description": "The ID of the Campaign Template which will be used in order to create the Campaign.",
              "example": 4
            },
            "campaignAttributesOverrides": {
              "type": "object",
              "properties": {},
              "description": "Custom Campaign Attributes. If the Campaign Template defines the same values, they will be overridden."
            },
            "templateParamValues": {
              "type": "array",
              "description": "Actual values to replace the template placeholder values in the Ruleset bindings. Values for all Template Parameters must be provided.",
              "items": {
                "$ref": "#/components/schemas/Binding"
              }
            },
            "limitOverrides": {
              "type": "array",
              "description": "Limits for this Campaign. If the Campaign Template or Application define default values for the same limits, they will be overridden.",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            },
            "tags": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of tags for the campaign. If the campaign template has tags, they will be overridden by this list.",
              "example": [
                "summer"
              ],
              "items": {
                "maxLength": 50,
                "minLength": 1,
                "type": "string"
              }
            }
          }
        },
        "CreateTemplateCampaignResponse": {
          "required": [
            "campaign",
            "ruleset"
          ],
          "type": "object",
          "properties": {
            "campaign": {
              "$ref": "#/components/schemas/Campaign"
            },
            "ruleset": {
              "$ref": "#/components/schemas/Ruleset"
            },
            "collections": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Collection"
              }
            }
          }
        },
        "NewTemplateDef": {
          "required": [
            "args",
            "category",
            "expr",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "minLength": 1,
              "type": "string",
              "description": "Campaigner-friendly name for the template that will be shown in the rule editor."
            },
            "description": {
              "type": "string",
              "description": "A short description of the template that will be shown in the rule editor."
            },
            "help": {
              "type": "string",
              "description": "Extended help text for the template."
            },
            "category": {
              "minLength": 1,
              "type": "string",
              "description": "Used for grouping templates in the rule editor sidebar."
            },
            "expr": {
              "type": "array",
              "description": "A Talang expression that contains variable bindings referring to args.",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "args": {
              "type": "array",
              "description": "An array of argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            },
            "expose": {
              "type": "boolean",
              "description": "A flag to control exposure in Rule Builder.",
              "default": false
            }
          }
        },
        "TemplateDef": {
          "required": [
            "applicationId",
            "args",
            "category",
            "created",
            "description",
            "expr",
            "help",
            "id",
            "name",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "title": {
              "minLength": 1,
              "type": "string",
              "description": "Campaigner-friendly name for the template that will be shown in the rule editor."
            },
            "description": {
              "type": "string",
              "description": "A short description of the template that will be shown in the rule editor."
            },
            "help": {
              "type": "string",
              "description": "Extended help text for the template."
            },
            "category": {
              "minLength": 1,
              "type": "string",
              "description": "Used for grouping templates in the rule editor sidebar."
            },
            "expr": {
              "type": "array",
              "description": "A Talang expression that contains variable bindings referring to args.",
              "items": {
                "type": "object",
                "properties": {}
              }
            },
            "args": {
              "type": "array",
              "description": "An array of argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            },
            "expose": {
              "type": "boolean",
              "description": "A flag to control exposure in Rule Builder.",
              "default": false
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The template name used in Talang."
            }
          },
          "description": ""
        },
        "NewAttribute": {
          "required": [
            "description",
            "editable",
            "entity",
            "name",
            "suggestions",
            "title",
            "type"
          ],
          "type": "object",
          "properties": {
            "entity": {
              "type": "string",
              "description": "The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.",
              "enum": [
                "Account",
                "Application",
                "Campaign",
                "CustomerProfile",
                "CustomerSession",
                "CartItem",
                "Coupon",
                "Event",
                "Giveaway",
                "Referral"
              ]
            },
            "eventType": {
              "type": "string"
            },
            "name": {
              "pattern": "^[A-Za-z]\\w*$",
              "type": "string",
              "description": "The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload."
            },
            "title": {
              "pattern": "^[A-Za-z][A-Za-z0-9_.!~*'() -]*$",
              "type": "string",
              "description": "The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
            },
            "type": {
              "type": "string",
              "description": "The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.",
              "enum": [
                "string",
                "number",
                "boolean",
                "time",
                "(list string)",
                "(list number)",
                "(list time)",
                "location",
                "(list location)"
              ]
            },
            "description": {
              "type": "string",
              "description": "A description of this attribute."
            },
            "suggestions": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of suggestions for the attribute.",
              "items": {
                "minLength": 1,
                "type": "string"
              }
            },
            "hasAllowedList": {
              "type": "boolean",
              "description": "Whether or not this attribute has an allowed list of values associated with it.",
              "default": false
            },
            "restrictedBySuggestions": {
              "type": "boolean",
              "description": "Whether or not this attribute's value is restricted by suggestions (`suggestions` property)\nor by an allowed list of value (`hasAllowedList` property).\n",
              "default": false
            },
            "editable": {
              "type": "boolean",
              "description": "Whether or not this attribute can be edited."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications where this attribute is available.",
              "items": {
                "type": "integer"
              }
            },
            "subscribedCatalogsIds": {
              "type": "array",
              "description": "A list of the IDs of the catalogs where this attribute is available.",
              "items": {
                "type": "integer"
              }
            },
            "allowedSubscriptions": {
              "maxItems": 2,
              "type": "array",
              "description": "A list of allowed subscription types for this attribute.\n\n**Note:** This only applies to attributes associated with the `CartItem` entity.\n",
              "items": {
                "type": "string",
                "enum": [
                  "application",
                  "catalog"
                ]
              }
            }
          },
          "description": ""
        },
        "Attribute": {
          "required": [
            "accountId",
            "created",
            "description",
            "editable",
            "entity",
            "id",
            "name",
            "suggestions",
            "title",
            "type"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "entity": {
              "type": "string",
              "description": "The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.",
              "enum": [
                "Account",
                "Application",
                "Campaign",
                "CustomerProfile",
                "CustomerSession",
                "CartItem",
                "Coupon",
                "Event",
                "Giveaway",
                "Referral"
              ]
            },
            "eventType": {
              "type": "string"
            },
            "name": {
              "pattern": "^[A-Za-z]\\w*$",
              "type": "string",
              "description": "The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload."
            },
            "title": {
              "pattern": "^[A-Za-z][A-Za-z0-9_.!~*'() -]*$",
              "type": "string",
              "description": "The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
            },
            "type": {
              "type": "string",
              "description": "The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.",
              "enum": [
                "string",
                "number",
                "boolean",
                "time",
                "(list string)",
                "(list number)",
                "(list time)",
                "location",
                "(list location)"
              ]
            },
            "description": {
              "type": "string",
              "description": "A description of this attribute."
            },
            "suggestions": {
              "maxItems": 50,
              "type": "array",
              "description": "A list of suggestions for the attribute.",
              "items": {
                "minLength": 1,
                "type": "string"
              }
            },
            "hasAllowedList": {
              "type": "boolean",
              "description": "Whether or not this attribute has an allowed list of values associated with it.",
              "default": false
            },
            "restrictedBySuggestions": {
              "type": "boolean",
              "description": "Whether or not this attribute's value is restricted by suggestions (`suggestions` property)\nor by an allowed list of value (`hasAllowedList` property).\n",
              "default": false
            },
            "editable": {
              "type": "boolean",
              "description": "Whether or not this attribute can be edited."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications where this attribute is available.",
              "items": {
                "type": "integer"
              }
            },
            "subscribedCatalogsIds": {
              "type": "array",
              "description": "A list of the IDs of the catalogs where this attribute is available.",
              "items": {
                "type": "integer"
              }
            },
            "allowedSubscriptions": {
              "maxItems": 2,
              "type": "array",
              "description": "A list of allowed subscription types for this attribute.\n\n**Note:** This only applies to attributes associated with the `CartItem` entity.\n",
              "items": {
                "type": "string",
                "enum": [
                  "application",
                  "catalog"
                ]
              }
            },
            "eventTypeId": {
              "type": "integer",
              "example": 22
            }
          },
          "description": ""
        },
        "NewAdditionalCost": {
          "required": [
            "description",
            "name",
            "title"
          ],
          "type": "object",
          "properties": {
            "name": {
              "pattern": "^[A-Za-z](\\w|\\s)*$",
              "type": "string",
              "description": "The additional cost name that will be used in API requests and Talang. E.g. if `name == \"shipping\"` then you would set the shipping additional cost by including an `additionalCosts.shipping` property in your request payload."
            },
            "title": {
              "pattern": "^[A-Za-z][A-Za-z0-9_.!~*'() -]*$",
              "type": "string",
              "description": "The human-readable name for the additional cost that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
            },
            "description": {
              "type": "string",
              "description": "A description of this additional cost."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this additional cost.",
              "items": {
                "type": "integer"
              }
            },
            "type": {
              "type": "string",
              "description": "The type of additional cost. The following options can be chosen:\n- `session`: Additional cost will be added per session,\n- `item`: Additional cost will be added per item,\n- `both`: Additional cost will be added per item and session.\n",
              "default": "session",
              "enum": [
                "session",
                "item",
                "both"
              ]
            }
          },
          "description": ""
        },
        "AccountAdditionalCost": {
          "required": [
            "accountId",
            "created",
            "description",
            "id",
            "name",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "name": {
              "pattern": "^[A-Za-z](\\w|\\s)*$",
              "type": "string",
              "description": "The additional cost name that will be used in API requests and Talang. E.g. if `name == \"shipping\"` then you would set the shipping additional cost by including an `additionalCosts.shipping` property in your request payload."
            },
            "title": {
              "pattern": "^[A-Za-z][A-Za-z0-9_.!~*'() -]*$",
              "type": "string",
              "description": "The human-readable name for the additional cost that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
            },
            "description": {
              "type": "string",
              "description": "A description of this additional cost."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this additional cost.",
              "items": {
                "type": "integer"
              }
            },
            "type": {
              "type": "string",
              "description": "The type of additional cost. The following options can be chosen:\n- `session`: Additional cost will be added per session,\n- `item`: Additional cost will be added per item,\n- `both`: Additional cost will be added per item and session.\n",
              "default": "session",
              "enum": [
                "session",
                "item",
                "both"
              ]
            }
          },
          "description": ""
        },
        "NewEventType": {
          "required": [
            "name",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this event type. Use a short, past-tense, description of the event."
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created."
            },
            "description": {
              "type": "string",
              "description": "An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:\n\n> The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway.\n"
            }
          },
          "description": ""
        },
        "EventType": {
          "required": [
            "created",
            "id",
            "name",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "title": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this event type. Use a short, past-tense, description of the event."
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created."
            },
            "description": {
              "type": "string",
              "description": "An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:\n\n> The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway.\n"
            }
          },
          "description": ""
        },
        "NewWebhook": {
          "required": [
            "applicationIds",
            "enabled",
            "headers",
            "params",
            "title",
            "url",
            "verb"
          ],
          "type": "object",
          "properties": {
            "applicationIds": {
              "minItems": 1,
              "type": "array",
              "description": "The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer"
              }
            },
            "title": {
              "pattern": "^[A-Za-z][A-Za-z0-9_.!~*'() -]*$",
              "type": "string",
              "description": "Friendly title for this webhook."
            },
            "verb": {
              "type": "string",
              "description": "API method for this webhook.",
              "enum": [
                "POST",
                "PUT",
                "GET",
                "DELETE",
                "PATCH"
              ]
            },
            "url": {
              "type": "string",
              "description": "API url (supports templating using parameters) for this webhook."
            },
            "headers": {
              "type": "array",
              "description": "List of API HTTP headers for this webhook.",
              "items": {
                "pattern": "^([^:,]*):([^]*|[^,]*)$",
                "type": "string"
              }
            },
            "payload": {
              "type": "string",
              "description": "API payload (supports templating using parameters) for this webhook."
            },
            "params": {
              "type": "array",
              "description": "Array of template argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            },
            "enabled": {
              "type": "boolean",
              "description": "Enables or disables webhook from showing in rule builder."
            }
          },
          "description": ""
        },
        "Webhook": {
          "required": [
            "applicationIds",
            "created",
            "enabled",
            "headers",
            "id",
            "modified",
            "params",
            "title",
            "url",
            "verb"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "applicationIds": {
              "minItems": 1,
              "type": "array",
              "description": "The IDs of the applications that are related to this entity. The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer",
                "description": ""
              }
            },
            "title": {
              "pattern": "^[A-Za-z][A-Za-z0-9_.!~*'() -]*$",
              "type": "string",
              "description": "Friendly title for this webhook."
            },
            "verb": {
              "type": "string",
              "description": "API method for this webhook.",
              "enum": [
                "POST",
                "PUT",
                "GET",
                "DELETE",
                "PATCH"
              ]
            },
            "url": {
              "type": "string",
              "description": "API url (supports templating using parameters) for this webhook."
            },
            "headers": {
              "type": "array",
              "description": "List of API HTTP headers for this webhook.",
              "items": {
                "pattern": "^([^:,]*):([^]*|[^,]*)$",
                "type": "string"
              }
            },
            "payload": {
              "type": "string",
              "description": "API payload (supports templating using parameters) for this webhook."
            },
            "params": {
              "type": "array",
              "description": "Array of template argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            },
            "enabled": {
              "type": "boolean",
              "description": "Enables or disables webhook from showing in rule builder."
            }
          },
          "description": ""
        },
        "MultipleNewAudiences": {
          "required": [
            "audiences"
          ],
          "type": "object",
          "properties": {
            "audiences": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NewMultipleAudiencesItem"
              }
            }
          }
        },
        "MultipleAudiences": {
          "required": [
            "accountId",
            "audiences"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "audiences": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MultipleAudiencesItem"
              }
            }
          }
        },
        "AudienceIntegrationID": {
          "type": "object",
          "properties": {
            "integrationId": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string",
              "description": "The ID of this audience in the third-party integration.",
              "example": "382370BKDB946"
            }
          }
        },
        "NewMultipleAudiencesItem": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this audience.",
              "example": "Travel audience"
            },
            "integrationId": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string",
              "description": "The ID of this audience in the third-party integration.",
              "example": "382370BKDB946"
            }
          },
          "description": ""
        },
        "MultipleAudiencesItem": {
          "required": [
            "created",
            "id",
            "integrationId",
            "name",
            "status"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this audience.",
              "example": "Travel audience"
            },
            "integrationId": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string",
              "description": "The ID of this audience in the third-party integration.",
              "example": "382370BKDB946"
            },
            "status": {
              "type": "string",
              "description": "Indicates whether the audience is new, updated or unmodified by the request.\n",
              "example": "new",
              "enum": [
                "unmodified",
                "updated",
                "new"
              ]
            }
          },
          "description": ""
        },
        "NewAudience": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this audience.",
              "example": "Travel audience"
            },
            "integration": {
              "type": "string",
              "description": "The Talon.One-supported [3rd-party platform](https://docs.talon.one/docs/dev/technology-partners/overview) that this audience was created in.\n\nFor example, `mParticle`, `Segment`, `Selligent`, `Braze`, or `Iterable`.\n\n**Note:** If you do not integrate with any of these platforms, do not use this property.\n",
              "example": "mparticle"
            },
            "integrationId": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string",
              "description": "The ID of this audience in the third-party integration.\n\n**Note:** To create an audience that doesn't come from a 3rd party platform, do not use this property.\n",
              "example": "382370BKDB946"
            },
            "sandbox": {
              "type": "boolean",
              "description": "Indicates if this is a live or sandbox Application."
            },
            "createdIn3rdParty": {
              "type": "boolean",
              "description": "Determines if this audience is a 3rd party audience or not."
            }
          }
        },
        "UpdateAudience": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this audience.",
              "example": "Travel audience"
            }
          }
        },
        "Audience": {
          "required": [
            "accountId",
            "created",
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "The human-friendly display name for this audience.",
              "example": "Travel audience"
            },
            "integration": {
              "type": "string",
              "description": "The Talon.One-supported [3rd-party platform](https://docs.talon.one/docs/dev/technology-partners/overview) that this audience was created in.\n\nFor example, `mParticle`, `Segment`, `Selligent`, `Braze`, or `Iterable`.\n\n**Note:** If you do not integrate with any of these platforms, do not use this property.\n",
              "example": "mparticle"
            },
            "integrationId": {
              "maxLength": 1000,
              "minLength": 1,
              "type": "string",
              "description": "The ID of this audience in the third-party integration.\n\n**Note:** To create an audience that doesn't come from a 3rd party platform, do not use this property.\n",
              "example": "382370BKDB946"
            },
            "sandbox": {
              "type": "boolean",
              "description": "Indicates if this is a live or sandbox Application."
            },
            "createdIn3rdParty": {
              "type": "boolean",
              "description": "Determines if this audience is a 3rd party audience or not."
            }
          },
          "description": ""
        },
        "AudienceAnalytics": {
          "type": "object",
          "properties": {
            "audienceId": {
              "type": "integer",
              "description": "The ID of the audience.",
              "example": 1
            },
            "membersCount": {
              "type": "integer",
              "description": "The count of members under a single audience.",
              "example": 1234
            }
          },
          "description": "The audiences and their members count."
        },
        "ManagerConfig": {
          "required": [
            "schemaVersion"
          ],
          "type": "object",
          "properties": {
            "schemaVersion": {
              "type": "integer"
            }
          }
        },
        "Export": {
          "required": [
            "accountId",
            "created",
            "entity",
            "filter",
            "id",
            "userId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "entity": {
              "type": "string",
              "description": "The name of the entity that was exported.",
              "enum": [
                "Coupon",
                "Referral",
                "Effect",
                "CustomerSession",
                "LoyaltyLedger",
                "LoyaltyLedgerLog",
                "Collection"
              ]
            },
            "filter": {
              "type": "object",
              "properties": {},
              "description": "Map of keys and values that were used to filter the exported rows."
            }
          },
          "description": ""
        },
        "Import": {
          "required": [
            "accountId",
            "amount",
            "created",
            "entity",
            "id",
            "userId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "userId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "entity": {
              "type": "string",
              "description": "The name of the entity that was imported.\n",
              "example": "AttributeAllowedList"
            },
            "amount": {
              "minimum": 0,
              "type": "integer",
              "description": "The number of values that were imported.",
              "example": 10
            }
          },
          "description": ""
        },
        "FeaturesFeed": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "pubDate": {
              "type": "string"
            }
          },
          "description": ""
        },
        "LibraryAttribute": {
          "required": [
            "description",
            "entity",
            "name",
            "presets",
            "suggestions",
            "title",
            "type"
          ],
          "type": "object",
          "properties": {
            "entity": {
              "type": "string",
              "description": "The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.",
              "enum": [
                "Application",
                "Campaign",
                "CustomerProfile",
                "CustomerSession",
                "CartItem",
                "Coupon",
                "Event"
              ]
            },
            "name": {
              "type": "string",
              "description": "The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.\n"
            },
            "title": {
              "type": "string",
              "description": "The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique."
            },
            "type": {
              "type": "string",
              "description": "The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.",
              "enum": [
                "string",
                "number",
                "boolean",
                "time"
              ]
            },
            "description": {
              "type": "string",
              "description": "A description of the attribute."
            },
            "presets": {
              "type": "array",
              "description": "The presets that indicate to which industry the attribute applies to.",
              "items": {
                "type": "string"
              }
            },
            "suggestions": {
              "type": "array",
              "description": "Short suggestions that are used to group attributes.",
              "items": {
                "type": "string"
              }
            }
          },
          "description": ""
        },
        "Role": {
          "required": [
            "accountId",
            "acl",
            "created",
            "id",
            "modified",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "campaignGroupID": {
              "type": "integer",
              "description": "The ID of the [Campaign Group](https://docs.talon.one/docs/product/account/managing-campaign-groups/)\nthis role was created for.\n"
            },
            "name": {
              "type": "string",
              "description": "Name of the role."
            },
            "description": {
              "type": "string",
              "description": "Description of the role."
            },
            "members": {
              "type": "array",
              "description": "A list of user identifiers assigned to this role.",
              "items": {
                "type": "integer"
              }
            },
            "acl": {
              "type": "object",
              "properties": {},
              "description": "Role ACL Policy."
            }
          },
          "description": ""
        },
        "NewRole": {
          "required": [
            "acl",
            "members",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the role."
            },
            "description": {
              "type": "string",
              "description": "Description of the role."
            },
            "acl": {
              "type": "string",
              "description": "Role Policy this should be a stringified blob of json."
            },
            "members": {
              "type": "array",
              "description": "An array of user identifiers.",
              "items": {
                "type": "integer"
              }
            }
          },
          "description": ""
        },
        "UpdateRole": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the role."
            },
            "description": {
              "type": "string",
              "description": "Description of the role."
            },
            "acl": {
              "type": "string",
              "description": "Role Policy this should be a stringified blob of json."
            },
            "members": {
              "type": "array",
              "description": "An array of user identifiers.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "RoleAssign": {
          "required": [
            "roles",
            "users"
          ],
          "type": "object",
          "properties": {
            "users": {
              "type": "array",
              "description": "An array of userIDs.",
              "items": {
                "type": "integer"
              }
            },
            "roles": {
              "type": "array",
              "description": "An array of roleIDs.",
              "items": {
                "type": "integer"
              }
            }
          },
          "description": ""
        },
        "RoleMembership": {
          "required": [
            "RoleID",
            "UserID"
          ],
          "type": "object",
          "properties": {
            "RoleID": {
              "type": "integer",
              "description": "ID of role."
            },
            "UserID": {
              "type": "integer",
              "description": "ID of User."
            }
          }
        },
        "CouponReservations": {
          "required": [
            "integrationIDs"
          ],
          "type": "object",
          "properties": {
            "integrationIDs": {
              "type": "array",
              "description": "List of customer integration IDs.",
              "example": [
                "ty238-32fke9",
                "3gy32-008ye9"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "LedgerEntry": {
          "required": [
            "accountId",
            "amount",
            "created",
            "eventId",
            "expiryDate",
            "id",
            "loyaltyProgramId",
            "profileId",
            "reason"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the Talon.One account that owns this profile."
            },
            "loyaltyProgramId": {
              "type": "integer",
              "description": "ID of the ledger.",
              "example": 323414846
            },
            "eventId": {
              "type": "integer",
              "description": "ID of the related event.",
              "example": 3
            },
            "amount": {
              "type": "integer",
              "description": "Amount of loyalty points.",
              "example": 100
            },
            "reason": {
              "type": "string",
              "description": "reason for awarding/deducting points.",
              "example": "Customer appeasement."
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the points.",
              "format": "date-time",
              "example": "2022-04-26T11:02:38Z"
            },
            "referenceId": {
              "type": "integer",
              "description": "The ID of the balancing ledgerEntry."
            }
          },
          "description": ""
        },
        "LoyaltyMembership": {
          "required": [
            "loyaltyProgramId"
          ],
          "type": "object",
          "properties": {
            "joined": {
              "title": "Loyalty program joined at",
              "type": "string",
              "description": "The moment in which the loyalty program was joined.",
              "format": "date-time"
            },
            "loyaltyProgramId": {
              "title": "Loyalty program ID",
              "type": "integer",
              "description": "The ID of the loyalty program belonging to this entity.",
              "example": 323414846
            }
          }
        },
        "Meta": {
          "type": "object",
          "properties": {
            "campaigns": {
              "type": "object",
              "properties": {},
              "description": "Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted."
            },
            "coupons": {
              "type": "object",
              "properties": {},
              "description": "Maps the coupon value to a key-value list of that coupons attributes."
            },
            "couponRejectionReason": {
              "$ref": "#/components/schemas/CouponRejectionReason"
            },
            "referralRejectionReason": {
              "$ref": "#/components/schemas/ReferralRejectionReason"
            },
            "warnings": {
              "type": "object",
              "properties": {},
              "description": "Contains warnings about possible misuse."
            }
          }
        },
        "CouponRejectionReason": {
          "required": [
            "campaignId",
            "couponId",
            "reason"
          ],
          "type": "object",
          "properties": {
            "campaignId": {
              "type": "integer",
              "example": 244
            },
            "couponId": {
              "type": "integer",
              "example": 4928
            },
            "reason": {
              "type": "string",
              "example": "CouponNotFound",
              "enum": [
                "CouponNotFound",
                "CouponPartOfNotRunningCampaign",
                "CouponLimitReached",
                "CampaignLimitReached",
                "ProfileLimitReached",
                "CouponRecipientDoesNotMatch",
                "CouponExpired",
                "CouponStartDateInFuture",
                "CouponRejectedByCondition",
                "EffectCouldNotBeApplied"
              ]
            }
          },
          "description": "Holds a reference to the campaign, the coupon and the reason for which that coupon was rejected. Should only be present when there is a 'rejectCoupon' effect."
        },
        "ReferralRejectionReason": {
          "required": [
            "campaignId",
            "reason",
            "referralId"
          ],
          "type": "object",
          "properties": {
            "campaignId": {
              "type": "integer"
            },
            "referralId": {
              "type": "integer"
            },
            "reason": {
              "type": "string",
              "enum": [
                "ReferralNotFound",
                "ReferralRecipientIdSameAsAdvocate",
                "ReferralPartOfNotRunningCampaign",
                "ReferralLimitReached",
                "CampaignLimitReached",
                "ProfileLimitReached",
                "ReferralRecipientDoesNotMatch",
                "ReferralExpired",
                "ReferralStartDateInFuture",
                "ReferralRejectedByCondition",
                "EffectCouldNotBeApplied"
              ]
            }
          },
          "description": "Holds a reference to the campaign, the referral and the reason for which that referral was rejected. Should only be present when there is a 'rejectReferral' effect."
        },
        "ApplicationAPIKey": {
          "required": [
            "accountID",
            "applicationID",
            "created",
            "createdBy",
            "expires",
            "id",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Title for API Key.",
              "example": "My generated key"
            },
            "expires": {
              "type": "string",
              "description": "The date the API key expired.",
              "format": "date-time",
              "example": "2023-08-24T14:00:00Z"
            },
            "platform": {
              "type": "string",
              "description": "The third-party platform the API key is valid for. Use `none` for a generic API key to be used\nfrom your own integration layer.\n",
              "example": "none",
              "enum": [
                "none",
                "segment",
                "braze",
                "mparticle",
                "selligent",
                "iterable",
                "customer_engagement",
                "customer_data",
                "salesforce"
              ]
            },
            "id": {
              "type": "integer",
              "description": "ID of the API Key.",
              "example": 34
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of user who created.",
              "example": 280
            },
            "accountID": {
              "type": "integer",
              "description": "ID of account the key is used for.",
              "example": 13
            },
            "applicationID": {
              "type": "integer",
              "description": "ID of application the key is used for.",
              "example": 54
            },
            "created": {
              "type": "string",
              "description": "The date the API key was created.",
              "format": "date-time",
              "example": "2022-03-02T16:46:17.758585Z"
            }
          },
          "description": ""
        },
        "NewApplicationAPIKey": {
          "required": [
            "accountID",
            "applicationID",
            "created",
            "createdBy",
            "expires",
            "id",
            "key",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Title for API Key.",
              "example": "My generated key"
            },
            "expires": {
              "type": "string",
              "description": "The date the API key expired.",
              "format": "date-time",
              "example": "2023-08-24T14:00:00Z"
            },
            "platform": {
              "type": "string",
              "description": "The third-party platform the API key is valid for. Use `none` for a generic API key to be used\nfrom your own integration layer.\n",
              "example": "none",
              "enum": [
                "none",
                "segment",
                "braze",
                "mparticle",
                "selligent",
                "iterable",
                "customer_engagement",
                "customer_data",
                "salesforce"
              ]
            },
            "id": {
              "type": "integer",
              "description": "ID of the API Key.",
              "example": 34
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of user who created.",
              "example": 280
            },
            "accountID": {
              "type": "integer",
              "description": "ID of account the key is used for.",
              "example": 13
            },
            "applicationID": {
              "type": "integer",
              "description": "ID of application the key is used for.",
              "example": 54
            },
            "created": {
              "type": "string",
              "description": "The date the API key was created.",
              "format": "date-time",
              "example": "2022-03-02T16:46:17.758585Z"
            },
            "key": {
              "type": "string",
              "description": "The API key.",
              "example": "f45f90d21dcd9bac965c45e547e9754a3196891d09948e35adbcbedc4e9e4b01"
            }
          },
          "description": ""
        },
        "CreateApplicationAPIKey": {
          "required": [
            "expires",
            "title"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Title for API Key.",
              "example": "My generated key"
            },
            "expires": {
              "type": "string",
              "description": "The date the API key expired.",
              "format": "date-time",
              "example": "2023-08-24T14:00:00Z"
            },
            "platform": {
              "type": "string",
              "description": "The third-party platform the API key is valid for. Use `none` for a generic API key to be used\nfrom your own integration layer.\n",
              "example": "none",
              "enum": [
                "none",
                "segment",
                "braze",
                "mparticle",
                "selligent",
                "iterable",
                "customer_engagement",
                "customer_data",
                "salesforce"
              ]
            }
          }
        },
        "Notification": {
          "required": [
            "description",
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "id of the notification."
            },
            "name": {
              "type": "string",
              "description": "name of the notification."
            },
            "description": {
              "type": "string",
              "description": "description of the notification."
            }
          }
        },
        "Notifications": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Notification"
          }
        },
        "SamlConnection": {
          "required": [
            "accountId",
            "assertionConsumerServiceURL",
            "audienceURI",
            "created",
            "enabled",
            "id",
            "issuer",
            "name",
            "signOnURL"
          ],
          "type": "object",
          "properties": {
            "assertionConsumerServiceURL": {
              "type": "string",
              "description": "The location where the SAML assertion is sent with a HTTP POST."
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "ID of the SAML service."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this SAML connection active."
            },
            "issuer": {
              "minLength": 1,
              "type": "string",
              "description": "Identity Provider Entity ID."
            },
            "signOnURL": {
              "minLength": 1,
              "type": "string",
              "description": "Single Sign-On URL."
            },
            "signOutURL": {
              "type": "string",
              "description": "Single Sign-Out URL."
            },
            "metadataURL": {
              "type": "string",
              "description": "Metadata URL."
            },
            "audienceURI": {
              "type": "string",
              "description": "The application-defined unique identifier that is the intended audience of the SAML assertion.\nThis is most often the SP Entity ID of your application. When not specified, the ACS URL will be used.\n"
            },
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            }
          },
          "description": ""
        },
        "NewSamlConnection": {
          "required": [
            "accountId",
            "enabled",
            "issuer",
            "name",
            "signOnURL",
            "x509certificate"
          ],
          "type": "object",
          "properties": {
            "x509certificate": {
              "minLength": 1,
              "type": "string",
              "description": "X.509 Certificate."
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "ID of the SAML service."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this SAML connection active."
            },
            "issuer": {
              "minLength": 1,
              "type": "string",
              "description": "Identity Provider Entity ID."
            },
            "signOnURL": {
              "minLength": 1,
              "type": "string",
              "description": "Single Sign-On URL."
            },
            "signOutURL": {
              "type": "string",
              "description": "Single Sign-Out URL."
            },
            "metadataURL": {
              "type": "string",
              "description": "Metadata URL."
            },
            "audienceURI": {
              "type": "string",
              "description": "The application-defined unique identifier that is the intended audience of the SAML assertion.\nThis is most often the SP Entity ID of your application. When not specified, the ACS URL will be used.\n"
            }
          },
          "description": ""
        },
        "SamlConnectionMetadata": {
          "required": [
            "accountId",
            "enabled",
            "metadataDocument",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "ID of the SAML service."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this SAML connection active."
            },
            "accountId": {
              "type": "number"
            },
            "metadataDocument": {
              "minLength": 1,
              "type": "string",
              "description": "Identity Provider metadata XML document."
            }
          }
        },
        "BaseSamlConnection": {
          "required": [
            "accountId",
            "enabled",
            "issuer",
            "name",
            "signOnURL"
          ],
          "type": "object",
          "properties": {
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity."
            },
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "ID of the SAML service."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this SAML connection active."
            },
            "issuer": {
              "minLength": 1,
              "type": "string",
              "description": "Identity Provider Entity ID."
            },
            "signOnURL": {
              "minLength": 1,
              "type": "string",
              "description": "Single Sign-On URL."
            },
            "signOutURL": {
              "type": "string",
              "description": "Single Sign-Out URL."
            },
            "metadataURL": {
              "type": "string",
              "description": "Metadata URL."
            },
            "audienceURI": {
              "type": "string",
              "description": "The application-defined unique identifier that is the intended audience of the SAML assertion.\nThis is most often the SP Entity ID of your application. When not specified, the ACS URL will be used.\n"
            }
          }
        },
        "SamlLoginEndpoint": {
          "required": [
            "loginURL",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "minLength": 1,
              "type": "string",
              "description": "ID of the SAML service."
            },
            "loginURL": {
              "minLength": 1,
              "type": "string",
              "description": "Single Sign-On URL."
            }
          }
        },
        "Effect": {
          "required": [
            "campaignId",
            "effectType",
            "props",
            "ruleIndex",
            "ruleName",
            "rulesetId"
          ],
          "type": "object",
          "properties": {
            "campaignId": {
              "type": "integer",
              "description": "The ID of the campaign that triggered this effect.",
              "example": 244
            },
            "rulesetId": {
              "type": "integer",
              "description": "The ID of the ruleset that was active in the campaign when this effect was triggered.",
              "example": 73
            },
            "ruleIndex": {
              "type": "integer",
              "description": "The position of the rule that triggered this effect within the ruleset.",
              "example": 2
            },
            "ruleName": {
              "type": "string",
              "description": "The name of the rule that triggered this effect.",
              "example": "Give 20% discount"
            },
            "effectType": {
              "type": "string",
              "description": "The type of effect that was triggered.",
              "example": "rejectCoupon"
            },
            "triggeredByCoupon": {
              "type": "integer",
              "description": "The ID of the coupon that was being evaluated when this effect was triggered.",
              "example": 4928
            },
            "props": {
              "$ref": "#/components/schemas/EffectProps"
            }
          },
          "description": ""
        },
        "EffectEntity": {
          "required": [
            "campaignId",
            "effectType",
            "ruleIndex",
            "ruleName",
            "rulesetId"
          ],
          "type": "object",
          "properties": {
            "campaignId": {
              "type": "integer",
              "description": "The ID of the campaign that triggered this effect.",
              "example": 244
            },
            "rulesetId": {
              "type": "integer",
              "description": "The ID of the ruleset that was active in the campaign when this effect was triggered.",
              "example": 73
            },
            "ruleIndex": {
              "type": "integer",
              "description": "The position of the rule that triggered this effect within the ruleset.",
              "example": 2
            },
            "ruleName": {
              "type": "string",
              "description": "The name of the rule that triggered this effect.",
              "example": "Give 20% discount"
            },
            "effectType": {
              "type": "string",
              "description": "The type of effect that was triggered.",
              "example": "rejectCoupon"
            },
            "triggeredByCoupon": {
              "type": "integer",
              "description": "The ID of the coupon that was being evaluated when this effect was triggered.",
              "example": 4928
            }
          },
          "description": "Definition of all properties that are present on all effects, independent of their type."
        },
        "EffectProps": {
          "type": "object"
        },
        "AcceptCouponEffectProps": {
          "required": [
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The coupon code that was accepted."
            }
          },
          "description": "The properties specific to the \"acceptCoupon\" effect. This gets triggered whenever the coupon is valid and all other conditions in the rules of its campaign are met."
        },
        "AcceptReferralEffectProps": {
          "required": [
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The referral code that was accepted."
            }
          },
          "description": "The properties specific to the \"acceptReferral\" effect. TThis gets triggered whenever the referral code is valid and all other conditions in the rules of its campaign are met."
        },
        "RedeemReferralEffectProps": {
          "required": [
            "id",
            "value"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The id of the referral code that was redeemed."
            },
            "value": {
              "type": "string",
              "description": "The referral code that was redeemed."
            }
          },
          "description": "The properties specific to the \"redeemReferral\" effect. This gets triggered whenever the referral code is valid, and a rule was triggered that contains a \"redeem referral\" effect."
        },
        "RejectCouponEffectProps": {
          "required": [
            "rejectionReason",
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The coupon code that was rejected."
            },
            "rejectionReason": {
              "type": "string",
              "description": "The reason why this coupon was rejected."
            },
            "conditionIndex": {
              "type": "integer",
              "description": "The index of the condition that caused the rejection of the coupon."
            },
            "effectIndex": {
              "type": "integer",
              "description": "The index of the effect that caused the rejection of the coupon."
            },
            "details": {
              "type": "string",
              "description": "More details about the failure."
            }
          },
          "description": "The properties specific to the \"rejectCoupon\" effect. This gets triggered whenever the coupon was rejected. See rejectionReason for more info on why."
        },
        "RejectReferralEffectProps": {
          "required": [
            "rejectionReason",
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The referral code that was rejected."
            },
            "rejectionReason": {
              "type": "string",
              "description": "The reason why this referral code was rejected."
            },
            "conditionIndex": {
              "type": "integer",
              "description": "The index of the condition that caused the rejection of the referral."
            },
            "effectIndex": {
              "type": "integer",
              "description": "The index of the effect that caused the rejection of the referral."
            },
            "details": {
              "type": "string",
              "description": "More details about the failure."
            }
          },
          "description": "The properties specific to the \"rejectReferral\" effect. This gets triggered whenever the referral code was rejected. See rejectionReason for more info on why."
        },
        "CouponCreatedEffectProps": {
          "required": [
            "profileId",
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The coupon code that was created."
            },
            "profileId": {
              "type": "string",
              "description": "The integration identifier of the customer for whom this coupon was created."
            }
          },
          "description": "The properties specific to the \"couponCreated\" effect. This gets triggered whenever a validated rule contained a \"create coupon\" effect, and a coupon was created for a customer. See \"createdCoupons\" on the response for all details of this coupon."
        },
        "ReferralCreatedEffectProps": {
          "required": [
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The referral code that was created."
            }
          },
          "description": "The properties specific to the \"referralCreated\" effect. This gets triggered whenever a validated rule contained a \"create referral\" effect, and a referral code was created for a customer. See \"createdReferrals\" on the response for all details of this referral code."
        },
        "SetDiscountEffectProps": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name/description of this discount."
            },
            "value": {
              "type": "number",
              "description": "The total monetary value of the discount."
            },
            "scope": {
              "type": "string",
              "description": "The scope which the discount was applied on, can be one of (cartItems,additionalCosts,sessionTotal)."
            },
            "desiredValue": {
              "type": "number",
              "description": "The original value of the discount."
            }
          },
          "description": "The properties specific to the \"setDiscount\" effect. This gets triggered whenever a validated rule contained a \"set discount\" effect. This is a discount that should be applied on the scope of defined with it."
        },
        "SetDiscountPerItemEffectProps": {
          "required": [
            "name",
            "position",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the discount. Contains a hashtag character indicating the index of the position of the item the discount applies\nto. It is identical to the value of the `position` property.\n"
            },
            "value": {
              "type": "number",
              "description": "The total monetary value of the discount."
            },
            "position": {
              "type": "number",
              "description": "The index of the item in the cart items list on which this discount should be applied."
            },
            "subPosition": {
              "type": "number",
              "description": "Only used when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled.\nIndicates which item the discount applies to for cart items with `quantity` > 1.\n"
            },
            "desiredValue": {
              "type": "number",
              "description": "The original value of the discount."
            },
            "scope": {
              "type": "string",
              "description": "The scope of the discount:\n- `additionalCosts`: The discount applies to all the additional costs of the item.\n- `itemTotal`: The discount applies to the price of the item + the additional costs of the item.\n- `price`: The discount applies to the price of the item.\n"
            },
            "totalDiscount": {
              "type": "number",
              "description": "The total discount given if this effect is a result of a prorated discount."
            },
            "desiredTotalDiscount": {
              "type": "number",
              "description": "The original total discount to give if this effect is a result of a prorated discount."
            },
            "bundleIndex": {
              "type": "integer",
              "description": "The position of the bundle in a list of item bundles created from the same bundle definition."
            },
            "bundleName": {
              "type": "string",
              "description": "The name of the bundle binding."
            }
          },
          "description": "The properties specific to the `setDiscountPerItem` effect, triggered whenever a validated rule contained a\n\"set per item discount\" effect.\nThis is a discount that will be applied either on a specific item, on a specific item + additional cost or on all additional costs per item.\nThis depends on the chosen scope.\n"
        },
        "SetDiscountPerAdditionalCostPerItemEffectProps": {
          "required": [
            "additionalCost",
            "additionalCostId",
            "name",
            "position",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name/description of this discount."
            },
            "additionalCostId": {
              "type": "integer",
              "description": "The ID of the additional cost."
            },
            "value": {
              "type": "number",
              "description": "The total monetary value of the discount."
            },
            "position": {
              "type": "number",
              "description": "The index of the item in the cart item list containing the additional cost to be discounted."
            },
            "subPosition": {
              "type": "number",
              "description": "Only used when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled.\nIndicates which item the discount applies to for cart items with `quantity` > 1.\n"
            },
            "additionalCost": {
              "type": "string",
              "description": "The name of the additional cost."
            },
            "desiredValue": {
              "type": "number",
              "description": "Only with [partial discounts enabled](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#partial-discounts).\nRepresents the monetary value of the discount to be applied to additional discount without considering budget limitations.\n"
            }
          },
          "description": "The properties specific to the \"setDiscountPerAdditionalCostPerItem\" effect. This gets triggered whenever a validated rule contained a \"set discount per additional cost per item\" effect. This is a discount that should be applied on a specific additional cost in a specific item."
        },
        "SetDiscountPerAdditionalCostEffectProps": {
          "required": [
            "additionalCost",
            "additionalCostId",
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name/description of this discount."
            },
            "additionalCostId": {
              "type": "integer",
              "description": "The ID of the additional cost."
            },
            "additionalCost": {
              "type": "string",
              "description": "The name of the additional cost."
            },
            "value": {
              "type": "number",
              "description": "The total monetary value of the discount."
            },
            "desiredValue": {
              "type": "number",
              "description": "The original value of the discount."
            }
          },
          "description": "The properties specific to the \"setDiscountPerAdditionalCost\" effect. This gets triggered whenever a validated rule contained a \"set per additional cost discount\" effect. This is a discount that should be applied on a specific additional cost."
        },
        "TriggerWebhookEffectProps": {
          "required": [
            "webhookId",
            "webhookName"
          ],
          "type": "object",
          "properties": {
            "webhookId": {
              "type": "number",
              "description": "The ID of the webhook that was triggered."
            },
            "webhookName": {
              "type": "string",
              "description": "The name of the webhook that was triggered."
            }
          },
          "description": "The properties specific to the \"triggerWebhook\" effect. This gets triggered whenever a validated rule contained a \"trigger webhook\" effect. This is communicated as an FYI and should usually not require action on your side."
        },
        "AddLoyaltyPointsEffectProps": {
          "required": [
            "name",
            "programId",
            "recipientIntegrationId",
            "subLedgerId",
            "transactionUUID",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name/description of this loyalty point addition."
            },
            "programId": {
              "type": "integer",
              "description": "The ID of the loyalty program where these points were added."
            },
            "subLedgerId": {
              "type": "string",
              "description": "The ID of the subledger within the loyalty program where these points were added."
            },
            "value": {
              "type": "number",
              "description": "The amount of points that were added."
            },
            "desiredValue": {
              "type": "number",
              "description": "The original amount of loyalty points to be awarded."
            },
            "recipientIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The user for whom these points were added."
            },
            "startDate": {
              "type": "string",
              "description": "Date after which points will be valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Date after which points will expire.",
              "format": "date-time"
            },
            "transactionUUID": {
              "type": "string",
              "description": "The identifier of this addition in the loyalty ledger."
            },
            "cartItemPosition": {
              "type": "number",
              "description": "The index of the item in the cart items list on which the loyal points addition should be applied."
            },
            "cartItemSubPosition": {
              "type": "number",
              "description": "The sub position is triggered when application flattening is enabled.\nIt indicates to which item the loyalty points addition applies, for cart items with `quantity` > 1.\n"
            },
            "cardIdentifier": {
              "type": "string",
              "description": "The card on which these points were added."
            }
          },
          "description": "The properties specific to the \"addLoyaltyPoints\" effect. This gets triggered whenever a validated rule contained an \"add loyalty\" effect. These points are automatically stored and managed inside Talon.One.\n"
        },
        "DeductLoyaltyPointsEffectProps": {
          "required": [
            "name",
            "programId",
            "ruleTitle",
            "subLedgerId",
            "transactionUUID",
            "value"
          ],
          "type": "object",
          "properties": {
            "ruleTitle": {
              "type": "string",
              "description": "The title of the rule that contained triggered this points deduction."
            },
            "programId": {
              "type": "integer",
              "description": "The ID of the loyalty program where these points were added."
            },
            "subLedgerId": {
              "type": "string",
              "description": "The ID of the subledger within the loyalty program where these points were added."
            },
            "value": {
              "type": "number",
              "description": "The amount of points that were deducted."
            },
            "transactionUUID": {
              "type": "string",
              "description": "The identifier of this deduction in the loyalty ledger."
            },
            "name": {
              "type": "string",
              "description": "The name property gets one of the following two values. It can be the loyalty program name or it can represent a reason for the respective deduction of loyalty points. The latter is an optional value defined in a deduction rule.\n"
            },
            "cardIdentifier": {
              "type": "string",
              "description": "The card on which these points were added."
            }
          },
          "description": "The properties specific to the \"deductLoyaltyPoints\" effect. This gets triggered whenever a validated rule contained a condition to only trigger when the given number of loyalty points could be deduced. These points are automatically stored and managed inside Talon.One."
        },
        "AddFreeItemEffectProps": {
          "required": [
            "name",
            "sku"
          ],
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "SKU of the item that needs to be added.",
              "example": "SKU1241028"
            },
            "name": {
              "type": "string",
              "description": "The name/description of the effect."
            }
          },
          "description": "The properties specific to the \"addFreeItem\" effect. This gets triggered whenever a validated rule contained an \"add free item\" effect."
        },
        "ShowNotificationEffectProps": {
          "required": [
            "body",
            "notificationType",
            "title"
          ],
          "type": "object",
          "properties": {
            "notificationType": {
              "type": "string",
              "description": "The type of notification that should be shown (e.g. error/warning/info)."
            },
            "title": {
              "type": "string",
              "description": "Title of the notification."
            },
            "body": {
              "type": "string",
              "description": "Body of the notification."
            }
          },
          "description": "The properties specific to the \"showNotification\" effect. This gets triggered whenever a validated rule contained a \"show notification\" effect."
        },
        "UpdateAttributeEffectProps": {
          "required": [
            "path",
            "value"
          ],
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The exact path of the attribute that was updated."
            },
            "value": {
              "type": "object",
              "description": "The new value of this attribute. The value can be of the following types:\n- boolean\n- location\n- number\n- string\n- time\n- list of any of those types\n"
            }
          },
          "description": "The properties specific to the \"updateAttribute\" effect. This gets triggered whenever a validated rule contained an \"update an attribute\" effect."
        },
        "RollbackCouponEffectProps": {
          "required": [
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The coupon code whose usage has been rolled back."
            }
          },
          "description": "The properties specific to the \"rollbackCoupon\" effect. This gets triggered whenever previously closed session is now cancelled and a coupon redemption was cancelled on our internal usage limit counters."
        },
        "RollbackReferralEffectProps": {
          "required": [
            "value"
          ],
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "description": "The referral code whose usage has been rolled back."
            }
          },
          "description": "The properties specific to the \"rollbackReferral\" effect. This gets triggered whenever previously closed session is now cancelled and a referral redemption was cancelled on our internal usage limit counters."
        },
        "RollbackDiscountEffectProps": {
          "required": [
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the \"setDiscount\" effect that was rolled back."
            },
            "value": {
              "type": "number",
              "description": "The value of the discount that was rolled back."
            },
            "cartItemPosition": {
              "type": "number",
              "description": "The index of the item in the cart items for which the discount was rolled back."
            },
            "cartItemSubPosition": {
              "type": "number",
              "description": "The index of the item unit in its line item. It is only used for cart items with `quantity` > 1 and is\nonly returned when cart item flattening is enabled.\n"
            },
            "additionalCostId": {
              "type": "integer",
              "description": "The ID of the additional cost that was rolled back."
            },
            "additionalCost": {
              "type": "string",
              "description": "The name of the additional cost that was rolled back."
            },
            "scope": {
              "type": "string",
              "description": "The scope of the rolled back discount\n- For a discount per session, it can be one of `cartItems`, `additionalCosts` or `sessionTotal`\n- For a discount per item, it can be one of `price`, `additionalCosts` or `itemTotal`\n"
            }
          },
          "description": "The properties specific to the \"rollbackDiscount\" effect. This gets triggered whenever previously closed session is now cancelled or partially returned and a setDiscount effect was cancelled on our internal discount limit counters."
        },
        "RollbackAddedLoyaltyPointsEffectProps": {
          "required": [
            "programId",
            "recipientIntegrationId",
            "subLedgerId",
            "transactionUUID",
            "value"
          ],
          "type": "object",
          "properties": {
            "programId": {
              "type": "integer",
              "description": "The ID of the loyalty program where the points were originally added."
            },
            "subLedgerId": {
              "type": "string",
              "description": "The ID of the subledger within the loyalty program where these points were originally added."
            },
            "value": {
              "type": "number",
              "description": "The amount of points that were rolled back."
            },
            "recipientIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The user for whom these points were originally added."
            },
            "transactionUUID": {
              "type": "string",
              "description": "The identifier of 'deduction' entry added to the ledger as the `addLoyaltyPoints` effect is rolled back."
            },
            "cartItemPosition": {
              "type": "number",
              "description": "The index of the item in the cart items for which the loyalty points were rolled back."
            },
            "cartItemSubPosition": {
              "type": "number",
              "description": "The sub-position is returned when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled.\nIt indicates to which item the loyalty points were rolled back, for cart items with `quantity` > 1.\n"
            },
            "cardIdentifier": {
              "type": "string",
              "description": "The card on which these points were originally added."
            }
          },
          "description": "The properties specific to the \"rollbackAddedLoyaltyPoints\" effect. This gets triggered whenever previously a closed session with an addLoyaltyPoints effect is cancelled."
        },
        "RollbackDeductedLoyaltyPointsEffectProps": {
          "required": [
            "programId",
            "recipientIntegrationId",
            "subLedgerId",
            "transactionUUID",
            "value"
          ],
          "type": "object",
          "properties": {
            "programId": {
              "type": "integer",
              "description": "The ID of the loyalty program where these points were reimbursed."
            },
            "subLedgerId": {
              "type": "string",
              "description": "The ID of the subledger within the loyalty program where these points were reimbursed."
            },
            "value": {
              "type": "number",
              "description": "The amount of reimbursed points that were added."
            },
            "recipientIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The user for whom these points were reimbursed."
            },
            "startDate": {
              "type": "string",
              "description": "Date after which the reimbursed points will be valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Date after which the reimbursed points will expire.",
              "format": "date-time"
            },
            "transactionUUID": {
              "type": "string",
              "description": "The identifier of 'addition' entries added to the ledger as the `deductLoyaltyPoints` effect is rolled back."
            },
            "cardIdentifier": {
              "type": "string",
              "description": "The card on which these points were added."
            }
          },
          "description": "The properties specific to the \"rollbackDeductedLoyaltyPoints\" effect. This effect is triggered whenever a previously closed session is cancelled and a deductLoyaltyPoints effect was revoked."
        },
        "ShowBundleMetadataEffectProps": {
          "required": [
            "bundleAttributes",
            "description",
            "itemsIndices"
          ],
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Description of the product bundle."
            },
            "bundleAttributes": {
              "type": "array",
              "description": "The cart item attributes that determined which items are being bundled together.",
              "items": {
                "type": "string"
              }
            },
            "itemsIndices": {
              "type": "array",
              "description": "The indices in the cart items array of the bundled items.",
              "items": {
                "type": "number"
              }
            }
          },
          "description": "The properties specific to the \"ShowBundleMetadata\" effect. This effect contains information that allows you to associate the discounts from a rule in a bundle campaign with specific cart items. This way you can distinguish from \"normal\" discounts that were not the result of a product bundle."
        },
        "AwardGiveawayEffectProps": {
          "required": [
            "code",
            "giveawayId",
            "poolId",
            "poolName",
            "recipientIntegrationId"
          ],
          "type": "object",
          "properties": {
            "poolId": {
              "type": "integer",
              "description": "The ID of the giveaways pool the code was taken from."
            },
            "poolName": {
              "type": "string",
              "description": "The name of the giveaways pool the code was taken from."
            },
            "recipientIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID of the profile that was awarded the giveaway."
            },
            "giveawayId": {
              "type": "integer",
              "description": "The internal ID for the giveaway that was awarded."
            },
            "code": {
              "type": "string",
              "description": "The giveaway code that was awarded."
            }
          },
          "description": "The properties specific to the \"awardGiveaway\" effect. This effect contains information on the giveaway item, and which profile it was awarded to."
        },
        "WillAwardGiveawayEffectProps": {
          "required": [
            "poolId",
            "poolName",
            "recipientIntegrationId"
          ],
          "type": "object",
          "properties": {
            "poolId": {
              "type": "integer",
              "description": "The ID of the giveaways pool the code will be taken from."
            },
            "poolName": {
              "type": "string",
              "description": "The name of the giveaways pool the code will be taken from."
            },
            "recipientIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID of the profile that will be awarded the giveaway."
            }
          },
          "description": "The properties specific to the \"awardGiveaway\" effect when the session is not closed yet. This effect replaces \"awardGiveaway\" only when updating a session with any state other than \"closed\". This is to ensure no giveaway codes are leaked when they are still not guaranteed to be awarded."
        },
        "ErrorEffectProps": {
          "required": [
            "message"
          ],
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "The error message."
            }
          },
          "description": "Whenever an error occurred during evaluation, we return an error effect. This should never happen for rules created in the rule builder."
        },
        "CustomEffectProps": {
          "required": [
            "effectId",
            "name",
            "payload"
          ],
          "type": "object",
          "properties": {
            "effectId": {
              "type": "integer",
              "description": "The ID of the custom effect that was triggered."
            },
            "name": {
              "type": "string",
              "description": "The type of the custom effect."
            },
            "payload": {
              "type": "object",
              "properties": {},
              "description": "The JSON payload of the custom effect.",
              "x-arbitraryJSON": true
            }
          },
          "description": "Effect containing custom payload."
        },
        "IntegrationRequest": {
          "required": [
            "customerSession"
          ],
          "type": "object",
          "properties": {
            "customerSession": {
              "$ref": "#/components/schemas/NewCustomerSessionV2"
            },
            "responseContent": {
              "type": "array",
              "description": "Optional list of extra data that you want to get in the response. Use this property to get as much data\nas you need in one request instead of sending extra requests to other endpoints.\n\n**Note:** `ruleFailureReasons` is always part of the response when the\n[Application type](https://docs.talon.one/docs/product/applications/overview#application-types) is `sandbox`.\n",
              "example": [
                "customerSession",
                "customerProfile"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "customerSession",
                  "customerProfile",
                  "coupons",
                  "triggeredCampaigns",
                  "referral",
                  "loyalty",
                  "event",
                  "awardedGiveaways",
                  "ruleFailureReasons",
                  "previousReturns"
                ]
              }
            }
          },
          "description": "The body of a V2 integration API request (customer session update). Next to the customer session details, this contains an optional listing of extra properties that should be returned in the response."
        },
        "ReturnIntegrationRequest": {
          "required": [
            "return"
          ],
          "type": "object",
          "properties": {
            "return": {
              "$ref": "#/components/schemas/NewReturn"
            },
            "responseContent": {
              "type": "array",
              "description": "Optional list of extra data that you want to get in the response. Use this property to get as much data\nas you need in one request instead of sending extra requests to other endpoints.\n\n**Note:** `ruleFailureReasons` is always part of the response when the\n[Application type](https://docs.talon.one/docs/product/applications/overview#application-types) is `sandbox`.\n",
              "example": [
                "customerSession",
                "customerProfile"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "customerSession",
                  "customerProfile",
                  "coupons",
                  "triggeredCampaigns",
                  "referral",
                  "loyalty",
                  "event",
                  "previousReturns"
                ]
              }
            }
          },
          "description": "The body of a return integration API request. Next to the cart items details, this contains an optional listing of extra properties that should be returned in the response."
        },
        "CustomerProfileIntegrationRequestV2": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item.",
              "example": {
                "Language": "english",
                "ShippingCountry": "DE"
              }
            },
            "audiencesChanges": {
              "$ref": "#/components/schemas/ProfileAudiencesChanges"
            },
            "responseContent": {
              "type": "array",
              "description": "Optional list of extra data that you want to get in the response. Use this property to get as much data\nas you need in one request instead of sending extra requests to other endpoints.\n\n**Note:** `ruleFailureReasons` is always part of the response when the\n[Application type](https://docs.talon.one/docs/product/applications/overview#application-types) is `sandbox`.\n",
              "example": [
                "triggeredCampaigns",
                "customerProfile"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "customerProfile",
                  "triggeredCampaigns",
                  "loyalty",
                  "event",
                  "awardedGiveaways",
                  "ruleFailureReasons"
                ]
              }
            }
          },
          "description": ""
        },
        "ProfileAudiencesChanges": {
          "required": [
            "adds",
            "deletes"
          ],
          "type": "object",
          "properties": {
            "adds": {
              "title": "Audiences to join",
              "type": "array",
              "description": "The IDs of the audiences for the customer to join.",
              "example": [
                2,
                4
              ],
              "items": {
                "type": "integer"
              }
            },
            "deletes": {
              "title": "Audiences to leave",
              "type": "array",
              "description": "The IDs of the audiences for the customer to leave.",
              "example": [
                7
              ],
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "AudienceMembership": {
          "required": [
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Audience ID",
              "type": "integer",
              "description": "The ID of the audience belonging to this entity.",
              "example": 2
            },
            "name": {
              "title": "Audience Name",
              "type": "string",
              "description": "The Name of the audience belonging to this entity.",
              "example": "Travel audience"
            }
          }
        },
        "MultipleCustomerProfileIntegrationRequest": {
          "type": "object",
          "properties": {
            "customerProfiles": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MultipleCustomerProfileIntegrationRequestItem"
              }
            }
          }
        },
        "MultipleCustomerProfileIntegrationRequestItem": {
          "required": [
            "integrationId"
          ],
          "type": "object",
          "properties": {
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this item.",
              "example": {
                "Language": "english",
                "ShippingCountry": "DE"
              }
            },
            "integrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The identifier of this profile, set by your integration layer. It must be unique within the account.\n\nTo get the `integrationId` of the profile from a `sessionId`, use the\n[Update customer session](/integration-api/#operation/updateCustomerSessionV2).\n",
              "example": "R195412"
            }
          },
          "description": ""
        },
        "MultipleCustomerProfileIntegrationResponseV2": {
          "type": "object",
          "properties": {
            "integrationStates": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IntegrationStateV2"
              }
            }
          }
        },
        "CustomerProfileAudienceRequest": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerProfileAudienceRequestItem"
              }
            }
          }
        },
        "CustomerProfileAudienceRequestItem": {
          "required": [
            "action",
            "audienceId",
            "profileIntegrationId"
          ],
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "Defines the action to perform:\n- `add`: Adds the customer profile to the audience.\n- `delete`: Removes the customer profile from the audience.\n",
              "example": "add",
              "enum": [
                "add",
                "delete"
              ]
            },
            "profileIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The ID of this customer profile in the third-party integration.",
              "example": "R195412"
            },
            "audienceId": {
              "type": "integer",
              "description": "The ID of the audience. You get it via the `id` property when [creating an audience](#operation/createAudienceV2).",
              "example": 748
            }
          }
        },
        "FeedNotification": {
          "required": [
            "articleUrl",
            "body",
            "created",
            "title",
            "type",
            "updated"
          ],
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Title of the feed notification."
            },
            "created": {
              "type": "string",
              "description": "Timestamp of the moment this feed notification was created.",
              "format": "date-time"
            },
            "updated": {
              "type": "string",
              "description": "Timestamp of the moment this feed notification was last updated.",
              "format": "date-time"
            },
            "articleUrl": {
              "type": "string",
              "description": "URL to the feed notification in the help center."
            },
            "type": {
              "type": "string",
              "description": "The type of the feed notification.",
              "enum": [
                "feed",
                "feature",
                "announcement",
                "alert",
                "test"
              ]
            },
            "body": {
              "type": "string",
              "description": "Body of the feed notification."
            }
          },
          "description": "A feed notification for CAMA users."
        },
        "UserFeedNotifications": {
          "required": [
            "lastUpdate",
            "notifications"
          ],
          "type": "object",
          "properties": {
            "lastUpdate": {
              "type": "string",
              "description": "Timestamp of the last request for this list.",
              "format": "date-time"
            },
            "notifications": {
              "type": "array",
              "description": "List of all notifications to notify the user about.",
              "items": {
                "$ref": "#/components/schemas/FeedNotification"
              }
            }
          },
          "description": "Notifications to notify CAMA user about."
        },
        "UpdateUserLatestFeedTimestamp": {
          "required": [
            "newLatestFeedTimestamp"
          ],
          "type": "object",
          "properties": {
            "newLatestFeedTimestamp": {
              "type": "string",
              "description": "New timestamp to update for the current user.",
              "format": "date-time"
            }
          },
          "description": "Updates current user's latest seen notifications timestamp."
        },
        "AccountCampaignStats": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/components/schemas/ApplicationCampaignStats"
          }
        },
        "ApplicationCampaignStats": {
          "required": [
            "archived",
            "disabled",
            "draft",
            "expired",
            "running",
            "scheduled"
          ],
          "type": "object",
          "properties": {
            "draft": {
              "type": "integer",
              "description": "Number of draft campaigns."
            },
            "disabled": {
              "type": "integer",
              "description": "Number of disabled campaigns."
            },
            "scheduled": {
              "type": "integer",
              "description": "Number of scheduled campaigns."
            },
            "running": {
              "type": "integer",
              "description": "Number of running campaigns."
            },
            "expired": {
              "type": "integer",
              "description": "Number of expired campaigns."
            },
            "archived": {
              "type": "integer",
              "description": "Number of archived campaigns."
            }
          },
          "description": "Provides statistics regarding an application's campaigns."
        },
        "RuleFailureReason": {
          "required": [
            "campaignID",
            "campaignName",
            "ruleIndex",
            "ruleName",
            "rulesetID"
          ],
          "type": "object",
          "properties": {
            "campaignID": {
              "type": "integer",
              "description": "The ID of the campaign that contains the rule that failed."
            },
            "campaignName": {
              "type": "string",
              "description": "The name of the campaign that contains the rule that failed."
            },
            "rulesetID": {
              "type": "integer",
              "description": "The ID of the ruleset that contains the rule that failed."
            },
            "couponID": {
              "type": "integer",
              "description": "The ID of the coupon that was being evaluated at the time of the rule failure.",
              "example": 4928
            },
            "couponValue": {
              "type": "string",
              "description": "The code of the coupon that was being evaluated at the time of the rule failure."
            },
            "referralID": {
              "type": "integer",
              "description": "The ID of the referral that was being evaluated at the time of the rule failure."
            },
            "referralValue": {
              "type": "string",
              "description": "The code of the referral that was being evaluated at the time of the rule failure."
            },
            "ruleIndex": {
              "type": "integer",
              "description": "The index of the rule that failed within the ruleset."
            },
            "ruleName": {
              "type": "string",
              "description": "The name of the rule that failed within the ruleset."
            },
            "conditionIndex": {
              "type": "integer",
              "description": "The index of the condition that failed."
            },
            "effectIndex": {
              "type": "integer",
              "description": "The index of the effect that failed."
            },
            "details": {
              "type": "string",
              "description": "More details about the failure."
            }
          },
          "description": "Details about why a rule failed."
        },
        "Giveaway": {
          "required": [
            "code",
            "created",
            "id",
            "poolId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "code": {
              "type": "string",
              "description": "The code value of this giveaway."
            },
            "poolId": {
              "type": "integer",
              "description": "The ID of the pool to return giveaway codes from."
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the giveaway becomes valid.",
              "format": "date-time"
            },
            "endDate": {
              "type": "string",
              "description": "Timestamp at which point the giveaway becomes invalid.",
              "format": "date-time"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with this giveaway."
            },
            "used": {
              "type": "boolean",
              "description": "Indicates whether this giveaway code was given before."
            },
            "importId": {
              "type": "integer",
              "description": "The ID of the Import which created this giveaway."
            }
          },
          "description": ""
        },
        "NewGiveawaysPool": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of this giveaways pool."
            },
            "description": {
              "type": "string",
              "description": "The description of this giveaways pool."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that this giveaways pool is enabled for.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "GiveawaysPool": {
          "required": [
            "accountId",
            "created",
            "createdBy",
            "id",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "name": {
              "type": "string",
              "description": "The name of this giveaways pool."
            },
            "description": {
              "type": "string",
              "description": "The description of this giveaways pool."
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that this giveaways pool is enabled for.",
              "items": {
                "type": "integer"
              }
            },
            "modified": {
              "type": "string",
              "description": "Timestamp of the most recent update to the giveaways pool.",
              "format": "date-time"
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of the user who created this giveaways pool."
            },
            "modifiedBy": {
              "type": "integer",
              "description": "ID of the user who last updated this giveaways pool if available."
            }
          },
          "description": ""
        },
        "NewCustomEffect": {
          "required": [
            "applicationIds",
            "enabled",
            "name",
            "payload",
            "title"
          ],
          "type": "object",
          "properties": {
            "applicationIds": {
              "minItems": 1,
              "type": "array",
              "description": "The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "pattern": "^[A-Za-z](\\w|\\s)*$",
              "type": "string",
              "description": "The name of this effect."
            },
            "title": {
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The title of this effect."
            },
            "payload": {
              "type": "string",
              "description": "The JSON payload of this effect."
            },
            "description": {
              "type": "string",
              "description": "The description of this effect."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this effect is active."
            },
            "params": {
              "type": "array",
              "description": "Array of template argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            }
          },
          "description": ""
        },
        "UpdateCustomEffect": {
          "required": [
            "applicationIds",
            "enabled",
            "name",
            "payload",
            "title"
          ],
          "type": "object",
          "properties": {
            "applicationIds": {
              "minItems": 1,
              "type": "array",
              "description": "The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "pattern": "^[A-Za-z](\\w|\\s)*$",
              "type": "string",
              "description": "The name of this effect."
            },
            "title": {
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The title of this effect."
            },
            "payload": {
              "type": "string",
              "description": "The JSON payload of this effect."
            },
            "description": {
              "type": "string",
              "description": "The description of this effect."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this effect is active."
            },
            "params": {
              "type": "array",
              "description": "Array of template argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            }
          },
          "description": ""
        },
        "CustomEffect": {
          "required": [
            "accountId",
            "applicationIds",
            "created",
            "createdBy",
            "enabled",
            "id",
            "modified",
            "name",
            "payload",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "applicationIds": {
              "minItems": 1,
              "type": "array",
              "description": "The IDs of the applications that are related to this entity.",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "pattern": "^[A-Za-z](\\w|\\s)*$",
              "type": "string",
              "description": "The name of this effect."
            },
            "title": {
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The title of this effect."
            },
            "payload": {
              "type": "string",
              "description": "The JSON payload of this effect."
            },
            "description": {
              "type": "string",
              "description": "The description of this effect."
            },
            "enabled": {
              "type": "boolean",
              "description": "Determines if this effect is active."
            },
            "params": {
              "type": "array",
              "description": "Array of template argument definitions.",
              "items": {
                "$ref": "#/components/schemas/TemplateArgDef"
              }
            },
            "modifiedBy": {
              "type": "integer",
              "description": "ID of the user who last updated this effect if available."
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of the user who created this effect."
            }
          },
          "description": ""
        },
        "UpdateCampaignCollection": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            }
          }
        },
        "NewCampaignCollection": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "name": {
              "minLength": 1,
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            }
          },
          "description": ""
        },
        "CampaignCollectionWithoutPayload": {
          "required": [
            "accountId",
            "created",
            "createdBy",
            "id",
            "modified",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "name": {
              "minLength": 1,
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            },
            "modifiedBy": {
              "type": "integer",
              "description": "ID of the user who last updated this effect if available.",
              "example": 48
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of the user who created this effect.",
              "example": 134
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the Application that owns this entity.",
              "example": 1
            },
            "campaignId": {
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 7
            }
          },
          "description": ""
        },
        "CampaignCollection": {
          "required": [
            "accountId",
            "created",
            "createdBy",
            "id",
            "modified",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "name": {
              "minLength": 1,
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            },
            "modifiedBy": {
              "type": "integer",
              "description": "ID of the user who last updated this effect if available.",
              "example": 48
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of the user who created this effect.",
              "example": 134
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the Application that owns this entity.",
              "example": 1
            },
            "campaignId": {
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 7
            },
            "payload": {
              "maxItems": 50,
              "type": "array",
              "description": "The content of the collection.",
              "example": [
                "KTL-WH-ET-1",
                "KTL-BL-ET-1"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "description": ""
        },
        "UpdateCollection": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the Applications where this collection is enabled.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "NewCollection": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the Applications where this collection is enabled.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "minLength": 1,
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            }
          },
          "description": ""
        },
        "CollectionWithoutPayload": {
          "required": [
            "accountId",
            "created",
            "createdBy",
            "id",
            "modified",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the Applications where this collection is enabled.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "minLength": 1,
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            },
            "modifiedBy": {
              "type": "integer",
              "description": "ID of the user who last updated this effect if available.",
              "example": 48
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of the user who created this effect.",
              "example": 134
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the Application that owns this entity.",
              "example": 1
            },
            "campaignId": {
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 7
            }
          },
          "description": ""
        },
        "Collection": {
          "required": [
            "accountId",
            "created",
            "createdBy",
            "id",
            "modified",
            "name"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "description": {
              "type": "string",
              "description": "A short description of the purpose of this collection.",
              "example": "My collection of SKUs"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the Applications where this collection is enabled.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "minLength": 1,
              "pattern": "^[^[:cntrl:]\\s][^[:cntrl:]]*$",
              "type": "string",
              "description": "The name of this collection.",
              "example": "My collection"
            },
            "modifiedBy": {
              "type": "integer",
              "description": "ID of the user who last updated this effect if available.",
              "example": 48
            },
            "createdBy": {
              "type": "integer",
              "description": "ID of the user who created this effect.",
              "example": 134
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the Application that owns this entity.",
              "example": 1
            },
            "campaignId": {
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 7
            },
            "payload": {
              "maxItems": 50,
              "type": "array",
              "description": "The content of the collection.",
              "example": [
                "KTL-WH-ET-1",
                "KTL-BL-ET-1"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "description": ""
        },
        "CollectionItem": {
          "required": [
            "item"
          ],
          "type": "object",
          "properties": {
            "item": {
              "type": "string"
            }
          },
          "description": ""
        },
        "NewCouponCreationJob": {
          "required": [
            "attributes",
            "numberOfCoupons",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "numberOfCoupons": {
              "maximum": 5000000,
              "type": "integer",
              "description": "The number of new coupon codes to generate for the campaign. Must be between 20,001 and 5,000,000.",
              "example": 200000
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with coupons."
            }
          },
          "description": ""
        },
        "CouponCreationJob": {
          "required": [
            "accountId",
            "applicationId",
            "attributes",
            "batchId",
            "campaignId",
            "chunkExecutionCount",
            "communicated",
            "created",
            "createdAmount",
            "createdBy",
            "errors",
            "failCount",
            "id",
            "numberOfCoupons",
            "status",
            "usageLimit"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "campaignId": {
              "title": "Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 211
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "usageLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "integer",
              "description": "The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply.\n",
              "example": 100
            },
            "discountLimit": {
              "maximum": 999999,
              "minimum": 0,
              "type": "number",
              "description": "The amount of discounts that can be given with this coupon code.\n",
              "example": 30
            },
            "startDate": {
              "type": "string",
              "description": "Timestamp at which point the coupon becomes valid.",
              "format": "date-time"
            },
            "expiryDate": {
              "type": "string",
              "description": "Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.",
              "format": "date-time"
            },
            "numberOfCoupons": {
              "maximum": 5000000,
              "type": "integer",
              "description": "The number of new coupon codes to generate for the campaign. Must be between 20,001 and 5,000,000.",
              "example": 200000
            },
            "couponSettings": {
              "$ref": "#/components/schemas/CodeGeneratorSettings"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary properties associated with coupons."
            },
            "batchId": {
              "title": "Batch ID",
              "type": "string",
              "description": "The batch ID coupons created by this job will bear.",
              "example": "tqyrgahe"
            },
            "status": {
              "title": "Job Status",
              "type": "string",
              "description": "The current status of this request. Possible values:\n- `pending`\n- `completed`\n- `failed`\n- `coupon pattern full`\n",
              "example": "pending"
            },
            "createdAmount": {
              "title": "Created Amount",
              "type": "integer",
              "description": "The number of coupon codes that were already created for this request.",
              "example": 1000000
            },
            "failCount": {
              "title": "Fail Count",
              "type": "integer",
              "description": "The number of times this job failed.",
              "example": 10
            },
            "errors": {
              "title": "Errors",
              "type": "array",
              "description": "An array of individual problems encountered during the request.",
              "example": [
                "Connection to database was reset",
                "failed to generate enough unique codes",
                "attribute 'PizzaLover' not found on entity 'Coupons'"
              ],
              "items": {
                "type": "string"
              }
            },
            "createdBy": {
              "title": "Created By",
              "type": "integer",
              "description": "ID of the user who created this effect.",
              "example": 1
            },
            "communicated": {
              "type": "boolean",
              "description": "Whether or not the user that created this job was notified of its final state.",
              "example": false
            },
            "chunkExecutionCount": {
              "title": "Iterations",
              "type": "integer",
              "description": "The number of times an attempt to create a chunk of coupons was made during the processing of the job.",
              "example": 0
            },
            "chunkSize": {
              "title": "Chunk size",
              "type": "integer",
              "description": "The number of coupons that will be created in a single transactions. Coupons will be created in chunks until arriving at the requested amount.",
              "example": 20000
            }
          },
          "description": ""
        },
        "AsyncCouponCreationResponse": {
          "required": [
            "batchId"
          ],
          "type": "object",
          "properties": {
            "batchId": {
              "type": "string",
              "description": "The batch ID that all coupons created by the request will have.",
              "example": "tqyrgahe"
            }
          }
        },
        "LimitCounter": {
          "required": [
            "accountId",
            "action",
            "applicationId",
            "campaignId",
            "counter",
            "id",
            "limit"
          ],
          "type": "object",
          "properties": {
            "campaignId": {
              "title": "Campaign ID",
              "type": "integer",
              "description": "The ID of the campaign that owns this entity.",
              "example": 211
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity.",
              "example": 6
            },
            "action": {
              "type": "string",
              "description": "The limitable action of the limit counter.",
              "example": "setDiscount"
            },
            "profileId": {
              "type": "integer",
              "description": "The profile ID for which this limit counter is used."
            },
            "profileIntegrationId": {
              "maxLength": 1000,
              "type": "string",
              "description": "The profile integration ID for which this limit counter is used."
            },
            "couponId": {
              "type": "integer",
              "description": "The coupon ID for which this limit counter is used."
            },
            "couponValue": {
              "type": "string",
              "description": "The coupon value for which this limit counter is used."
            },
            "referralId": {
              "type": "integer",
              "description": "The referral ID for which this limit counter is used."
            },
            "referralValue": {
              "type": "string",
              "description": "The referral value for which this limit counter is used."
            },
            "identifier": {
              "type": "integer",
              "description": "The arbitrary identifier for which this limit counter is used."
            },
            "period": {
              "type": "string",
              "description": "The time period for which this limit counter is used.",
              "example": "Y2021M8"
            },
            "limit": {
              "type": "number",
              "description": "The highest possible value for this limit counter.",
              "example": 10
            },
            "counter": {
              "type": "number",
              "description": "The current value for this limit counter.",
              "example": 5
            }
          },
          "description": ""
        },
        "BulkCampaignNotification": {
          "required": [
            "data",
            "totalResultSize"
          ],
          "type": "object",
          "properties": {
            "totalResultSize": {
              "type": "integer"
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignNotification"
              }
            }
          }
        },
        "CampaignNotification": {
          "required": [
            "event"
          ],
          "type": "object",
          "properties": {
            "event": {
              "type": "string",
              "description": "The type of the event. Can be one of the following: ['campaign_state_changed', 'campaign_ruleset_changed', 'campaign_edited', 'campaign_created', 'campaign_deleted']\n"
            }
          }
        },
        "BulkApplicationNotification": {
          "required": [
            "data",
            "totalResultSize"
          ],
          "type": "object",
          "properties": {
            "totalResultSize": {
              "type": "integer"
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApplicationNotification"
              }
            }
          }
        },
        "ApplicationNotification": {
          "required": [
            "event"
          ],
          "type": "object",
          "properties": {
            "event": {
              "type": "string",
              "description": "Event type. It can be one of the following: ['campaign_priorities_changed']\n"
            }
          }
        },
        "CampaignStateChangedNotification": {
          "required": [
            "campaign",
            "newState",
            "oldState"
          ],
          "type": "object",
          "properties": {
            "campaign": {
              "$ref": "#/components/schemas/Campaign"
            },
            "oldState": {
              "type": "string",
              "description": "The campaign's old state. Can be one of the following: ['running', 'disabled', 'scheduled', 'expired', 'draft', 'archived']\n"
            },
            "newState": {
              "type": "string",
              "description": "The campaign's new state. Can be one of the following: ['running', 'disabled', 'scheduled', 'expired', 'draft', 'archived']\n"
            }
          },
          "description": "A notification regarding a campaign whose state changed."
        },
        "CampaignRulesetChangedNotification": {
          "required": [
            "campaign",
            "ruleset"
          ],
          "type": "object",
          "properties": {
            "campaign": {
              "$ref": "#/components/schemas/Campaign"
            },
            "oldRuleset": {
              "$ref": "#/components/schemas/Ruleset"
            },
            "ruleset": {
              "$ref": "#/components/schemas/Ruleset"
            }
          },
          "description": "A notification regarding a campaign whose ruleset was changed."
        },
        "CampaignEditedNotification": {
          "required": [
            "campaign",
            "oldCampaign"
          ],
          "type": "object",
          "properties": {
            "campaign": {
              "$ref": "#/components/schemas/Campaign"
            },
            "oldCampaign": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "description": "A notification regarding a campaign which was edited."
        },
        "CampaignCreatedNotification": {
          "required": [
            "campaign"
          ],
          "type": "object",
          "properties": {
            "campaign": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "description": "A notification regarding a campaign that was created."
        },
        "CampaignDeletedNotification": {
          "required": [
            "campaign"
          ],
          "type": "object",
          "properties": {
            "campaign": {
              "$ref": "#/components/schemas/Campaign"
            }
          },
          "description": "A notification regarding a campaign that was deleted."
        },
        "CampaignPrioritiesChangedNotification": {
          "required": [
            "application",
            "priorities"
          ],
          "type": "object",
          "properties": {
            "application": {
              "$ref": "#/components/schemas/Application"
            },
            "oldPriorities": {
              "$ref": "#/components/schemas/CampaignPriorities"
            },
            "priorities": {
              "$ref": "#/components/schemas/CampaignPriorities"
            }
          },
          "description": "Notification about an Application whose campaigns' priorities changed."
        },
        "CampaignPriorities": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "description": "Campaign IDs for each priority. The priority can be one of: ['universal', 'stackable', 'exclusive']\n"
        },
        "NewNotificationWebhook": {
          "required": [
            "headers",
            "url"
          ],
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "API url for this notification webhook."
            },
            "headers": {
              "type": "array",
              "description": "List of API HTTP headers for this notification webhook.",
              "items": {
                "pattern": "^[^:,]+:[^,]*$",
                "type": "string"
              }
            }
          }
        },
        "NotificationWebhook": {
          "required": [
            "applicationId",
            "created",
            "headers",
            "id",
            "modified",
            "url"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "url": {
              "type": "string",
              "description": "API url for this notification webhook."
            },
            "headers": {
              "type": "array",
              "description": "List of API HTTP headers for this notification webhook.",
              "items": {
                "pattern": "^[^:,]+:[^,]*$",
                "type": "string"
              }
            }
          },
          "description": ""
        },
        "CouponLimitConfigs": {
          "type": "object",
          "properties": {
            "limits": {
              "type": "array",
              "description": "Limits configuration for a coupon. These limits will override the limits\nset from the campaign.\n\n**Note:** Only usable when creating a single coupon which is not tied to a specific recipient.\nOnly per-profile limits are allowed to be configured.\n",
              "items": {
                "$ref": "#/components/schemas/LimitConfig"
              }
            }
          }
        },
        "Return": {
          "required": [
            "accountId",
            "applicationId",
            "created",
            "eventId",
            "id",
            "returnedCartItems",
            "sessionId",
            "sessionIntegrationId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "applicationId": {
              "type": "integer",
              "description": "The ID of the application that owns this entity.",
              "example": 322
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "returnedCartItems": {
              "type": "array",
              "description": "List of cart items to be returned.",
              "items": {
                "$ref": "#/components/schemas/ReturnedCartItem"
              }
            },
            "eventId": {
              "title": "Event ID",
              "type": "integer",
              "description": "The event ID of that was generated for this return.",
              "example": 123
            },
            "sessionId": {
              "title": "Session ID",
              "type": "integer",
              "description": "The internal ID of the session this return was requested on.",
              "example": 123
            },
            "sessionIntegrationId": {
              "title": "Session Integration ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID of the session this return was requested on.",
              "example": "0c0e0207-eb30-4e06-a56c-2b7c8a64953c"
            },
            "profileId": {
              "title": "Profile ID",
              "type": "integer",
              "description": "The internal ID of the profile this return was requested on.",
              "example": 123
            },
            "profileIntegrationId": {
              "title": "Profile Integration ID",
              "maxLength": 1000,
              "type": "string",
              "description": "The integration ID of the profile this return was requested on.",
              "example": "0c0e0207-eb30-4e06-a56c-2b7c8a64953c"
            },
            "createdBy": {
              "title": "Created By",
              "type": "integer",
              "description": "ID of the user who requested this return.",
              "example": 123
            }
          },
          "description": ""
        },
        "NewReturn": {
          "required": [
            "returnedCartItems"
          ],
          "type": "object",
          "properties": {
            "returnedCartItems": {
              "type": "array",
              "description": "List of cart items to be returned.",
              "items": {
                "$ref": "#/components/schemas/ReturnedCartItem"
              }
            }
          }
        },
        "ReturnedCartItem": {
          "required": [
            "position"
          ],
          "type": "object",
          "properties": {
            "position": {
              "type": "integer",
              "description": "The index of the cart item in the provided customer session's `cartItems` property.",
              "example": 2
            },
            "quantity": {
              "type": "integer",
              "description": "Number of cart items to return. It is only available when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items)\nis enabled. If cart item flattening is disabled, the cart item can only be returned in its entirety.\n",
              "example": 1
            }
          }
        },
        "EventV2": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "type": {
              "title": "Event Type",
              "minLength": 1,
              "type": "string",
              "description": "A string representing the event. Must not be a reserved event name.",
              "example": "email_opened"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary additional JSON data associated with the event.",
              "example": {
                "myAttribute": "myValue"
              }
            }
          },
          "description": ""
        },
        "IntegrationEventV2Request": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "profileId": {
              "type": "string",
              "description": "ID of the customer profile set by your integration layer.\n\n**Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`.\n",
              "example": "URNGV8294NV"
            },
            "type": {
              "title": "Event Type",
              "minLength": 1,
              "type": "string",
              "description": "A string representing the event. Must not be a reserved event name.",
              "example": "email_opened"
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "Arbitrary additional JSON data associated with the event.",
              "example": {
                "myAttribute": "myValue"
              }
            },
            "responseContent": {
              "type": "array",
              "description": "Optional list of requested information to be present on the response related to the tracking custom event.\n",
              "example": [
                "triggeredCampaigns",
                "customerProfile"
              ],
              "items": {
                "type": "string",
                "enum": [
                  "customerProfile",
                  "triggeredCampaigns",
                  "loyalty",
                  "event",
                  "awardedGiveaways",
                  "ruleFailureReasons"
                ]
              }
            }
          },
          "description": ""
        },
        "MultipleNewAttribute": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NewAttribute"
              }
            }
          }
        },
        "MultipleAttribute": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        },
        "UpdateCatalog": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "A description of this cart item catalog.",
              "example": "seafood catalog"
            },
            "name": {
              "type": "string",
              "description": "Name of this cart item catalog.",
              "example": "seafood"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this catalog.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "NewCatalog": {
          "required": [
            "description",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The cart item catalog name.",
              "example": "seafood"
            },
            "description": {
              "type": "string",
              "description": "A description of this cart item catalog.",
              "example": "seafood catalog"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this catalog.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            }
          },
          "description": ""
        },
        "Catalog": {
          "required": [
            "accountId",
            "created",
            "createdBy",
            "description",
            "id",
            "modified",
            "name",
            "version"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "accountId": {
              "type": "integer",
              "description": "The ID of the account that owns this entity.",
              "example": 3886
            },
            "modified": {
              "type": "string",
              "description": "The exact moment this entity was last modified.",
              "format": "date-time",
              "example": "2021-09-12T10:12:42Z"
            },
            "name": {
              "type": "string",
              "description": "The cart item catalog name.",
              "example": "seafood"
            },
            "description": {
              "type": "string",
              "description": "A description of this cart item catalog.",
              "example": "seafood catalog"
            },
            "subscribedApplicationsIds": {
              "type": "array",
              "description": "A list of the IDs of the applications that are subscribed to this catalog.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            },
            "version": {
              "type": "integer",
              "description": "The current version of this catalog.",
              "example": 6
            },
            "createdBy": {
              "type": "integer",
              "description": "The ID of user who created this catalog.",
              "example": 6
            }
          },
          "description": ""
        },
        "CatalogSyncRequest": {
          "required": [
            "actions"
          ],
          "type": "object",
          "properties": {
            "actions": {
              "maxItems": 1000,
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CatalogAction"
              }
            },
            "version": {
              "type": "integer",
              "description": "The version number of the catalog to apply the actions on.",
              "example": 244
            }
          }
        },
        "CatalogAction": {
          "required": [
            "payload",
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of sync action.",
              "example": "ADD",
              "enum": [
                "ADD",
                "PATCH",
                "PATCH_MANY",
                "REMOVE",
                "REMOVE_MANY"
              ]
            },
            "payload": {
              "$ref": "#/components/schemas/CatalogActionPayload"
            }
          },
          "description": "Definition of all the properties that are needed for a single catalog sync action."
        },
        "CatalogActionPayload": {
          "type": "object"
        },
        "CatalogActionFilter": {
          "required": [
            "attr",
            "op",
            "value"
          ],
          "type": "object",
          "properties": {
            "attr": {
              "type": "string",
              "description": "The name of the attribute to filter on."
            },
            "op": {
              "type": "string",
              "description": "The filtering operator.",
              "enum": [
                "EQ",
                "LT",
                "LE",
                "GT",
                "GE",
                "IN"
              ]
            },
            "value": {
              "type": "object",
              "description": "The value to filter for."
            }
          },
          "description": "The properties for a single filtering condition in a catalog sync action."
        },
        "AddItemCatalogAction": {
          "required": [
            "sku"
          ],
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "The unique SKU of the item to add.",
              "example": "SKU1241028"
            },
            "price": {
              "type": "number",
              "description": "Price of the item.",
              "example": 99.99
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "The attributes of the item to add.",
              "example": {
                "origin": "germany",
                "color": "blue"
              }
            },
            "replaceIfExists": {
              "type": "boolean",
              "description": "Indicates whether to replace the attributes of the item if the same SKU exists.",
              "example": false,
              "default": false
            }
          },
          "description": "The specific properties of the \"ADD\" catalog sync action."
        },
        "PatchItemCatalogAction": {
          "required": [
            "attributes",
            "sku"
          ],
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "The unique SKU of the item to patch."
            },
            "price": {
              "type": "number",
              "description": "Price of the item.",
              "example": 99.99
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "The attributes of the item to patch."
            },
            "createIfNotExists": {
              "type": "boolean",
              "description": "Indicates whether to create an item if the SKU does not exist.",
              "default": false
            }
          },
          "description": "The specific properties of the \"PATCH\" catalog sync action."
        },
        "PatchManyItemsCatalogAction": {
          "required": [
            "attributes"
          ],
          "type": "object",
          "properties": {
            "price": {
              "type": "number",
              "description": "Price of the item.",
              "example": 99.99
            },
            "filters": {
              "type": "array",
              "description": "The list of filters used to select the items to patch, joined by `AND`.\n\n**Note:** Every item in the catalog will be modified if there are no filters.\n",
              "items": {
                "$ref": "#/components/schemas/CatalogActionFilter"
              }
            },
            "attributes": {
              "type": "object",
              "properties": {},
              "description": "The attributes of the items to patch."
            }
          },
          "description": "The specific properties of the \"PATCH_MANY\" catalog sync action."
        },
        "RemoveItemCatalogAction": {
          "required": [
            "sku"
          ],
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "The unique SKU of the item to remove."
            }
          },
          "description": "The specific properties of the \"REMOVE\" catalog sync action."
        },
        "RemoveManyItemsCatalogAction": {
          "type": "object",
          "properties": {
            "filters": {
              "type": "array",
              "description": "The list of filters used to select the items to patch, joined by `AND`.\n\n**Note:** Every item in the catalog will be removed if there are no filters.\n",
              "items": {
                "$ref": "#/components/schemas/CatalogActionFilter"
              }
            }
          },
          "description": "The specific properties of the \"REMOVE_MANY\" catalog sync action."
        },
        "CatalogItem": {
          "required": [
            "catalogid",
            "created",
            "id",
            "sku",
            "version"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.",
              "example": 6
            },
            "created": {
              "type": "string",
              "description": "The exact moment this entity was created.",
              "format": "date-time",
              "example": "2020-06-10T09:05:27.993483Z"
            },
            "sku": {
              "type": "string",
              "description": "The stock keeping unit of the item.",
              "example": "SKU1241028"
            },
            "price": {
              "type": "number",
              "description": "Price of the item.",
              "example": 99.99,
              "x-fieldType": "NullDecimal"
            },
            "catalogid": {
              "type": "integer",
              "description": "The ID of the catalog the item belongs to.",
              "example": 6
            },
            "version": {
              "minimum": 1,
              "type": "integer",
              "description": "The version of the catalog item."
            },
            "attributes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ItemAttribute"
              }
            }
          },
          "description": ""
        },
        "ItemAttribute": {
          "required": [
            "attributeid",
            "name",
            "value"
          ],
          "type": "object",
          "properties": {
            "attributeid": {
              "type": "integer",
              "description": "The ID of the attribute of the item.",
              "example": 6
            },
            "name": {
              "type": "string",
              "description": "The name of the attribute."
            },
            "value": {
              "type": "object",
              "description": "The value of the attribute."
            }
          },
          "description": ""
        },
        "CampaignActivationRequest": {
          "required": [
            "userIds"
          ],
          "type": "object",
          "properties": {
            "userIds": {
              "maxItems": 5,
              "type": "array",
              "description": "The list of IDs of the users who will receive the activation request.",
              "example": [
                1,
                2,
                3
              ],
              "items": {
                "type": "integer"
              }
            }
          }
        }
      },
      "securitySchemes": {
        "api_key_v1": {
          "type": "apiKey",
          "description": "To authenticate in order to use the Integration API, generate an API key in the Campaign Manager\nthen prefix it with `ApiKey-v1`.\n\nTo generate an API key:\n\n1. Log on to the Campaign Manager and open the Application of your choice, or create one.\n1. Click **Settings** > **Developer settings**.\n1. Click **Create API Key** and give it a title and an expiration date, then click **Create API Key**.\n\nYou can now use the API key in the HTTP header, prefixing it with `ApiKey-v1`:\n\n```\nAuthorization: ApiKey-v1 dbc644d33aa74d582bd9479c59e16f970fe13bf3\n```\n\nOr use it inside [an SDK](/docs/dev/sdks/overview), for example, with the JAVA SDK:\n\n```\niApi.getApiClient().setApiKeyPrefix(\"ApiKey-v1\");\niApi.getApiClient().setApiKey(\"dbc644d33aa74d582bd9479c59e16f970fe13bf3\");\n```\n",
          "name": "Authorization",
          "in": "header"
        }
      }
    }
  }
