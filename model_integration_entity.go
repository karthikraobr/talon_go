/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// IntegrationEntity struct for IntegrationEntity
type IntegrationEntity struct {
	// The integration ID set by your integration layer.
	IntegrationId string `json:"integrationId"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
}

// NewIntegrationEntity instantiates a new IntegrationEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationEntity(integrationId string, created time.Time) *IntegrationEntity {
	this := IntegrationEntity{}
	this.IntegrationId = integrationId
	this.Created = created
	return &this
}

// NewIntegrationEntityWithDefaults instantiates a new IntegrationEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationEntityWithDefaults() *IntegrationEntity {
	this := IntegrationEntity{}
	return &this
}

// GetIntegrationId returns the IntegrationId field value
func (o *IntegrationEntity) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *IntegrationEntity) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetCreated returns the Created field value
func (o *IntegrationEntity) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *IntegrationEntity) SetCreated(v time.Time) {
	o.Created = v
}

func (o IntegrationEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if true {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationEntity struct {
	value *IntegrationEntity
	isSet bool
}

func (v NullableIntegrationEntity) Get() *IntegrationEntity {
	return v.value
}

func (v *NullableIntegrationEntity) Set(val *IntegrationEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationEntity(val *IntegrationEntity) *NullableIntegrationEntity {
	return &NullableIntegrationEntity{value: val, isSet: true}
}

func (v NullableIntegrationEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


