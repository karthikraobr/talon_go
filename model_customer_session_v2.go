/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// CustomerSessionV2 
type CustomerSessionV2 struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created. The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The integration ID set by your integration layer.
	IntegrationId string `json:"integrationId"`
	// The ID of the application that owns this entity.
	ApplicationId int32 `json:"applicationId"`
	// ID of the customer profile set by your integration layer.  **Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`. 
	ProfileId string `json:"profileId"`
	// Any coupon codes entered.  **Important**: If you [create a coupon budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types) for your campaign, ensure the session contains a coupon code by the time you close it. 
	CouponCodes []string `json:"couponCodes,omitempty"`
	// Any referral code entered.  **Important**: If you [create a referral budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types) for your campaign, ensure the session contains a referral code by the time you close it. 
	ReferralCode *string `json:"referralCode,omitempty"`
	// Any loyalty cards used.
	LoyaltyCards []string `json:"loyaltyCards,omitempty"`
	// Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:  1. `open` → `closed` 2. `open` → `cancelled` 3. Either:    - `closed` → `cancelled` (**only** via [Update customer session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2)) or    - `closed` → `partially_returned` (**only** via [Return cart items](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/returnCartItems)) 4. `partially_returned` → `cancelled`  For more information, see [Customer session states](/docs/dev/concepts/entities#customer-session). 
	State string `json:"state"`
	// The items to add to this sessions. - If cart item flattening is disabled: **Do not exceed 1000 items** (regardless of their `quantity`) per request. - If cart item flattening is enabled: **Do not exceed 1000 items** and ensure the sum of all cart item's `quantity` **does not exceed 10.000** per request. 
	CartItems []CartItem `json:"cartItems"`
	// Use this property to set a value for the additional costs of this session, such as a shipping cost.  They must be created in the Campaign Manager before you set them with this property. See [Managing additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs/). 
	AdditionalCosts *map[string]AdditionalCost `json:"additionalCosts,omitempty"`
	// Session custom identifiers that you can set limits on or use inside your rules.  For example, you can use IP addresses as identifiers to potentially identify devices and limit discounts abuse in case of customers creating multiple accounts. See the [tutorial](https://docs.talon.one/docs/dev/tutorials/using-identifiers/).  **Important**: If you [create a unique identifier budget](https://docs.talon.one/docs/product/campaigns/settings/managing-campaign-budgets/#budget-types) for your campaign, ensure the session contains an identifier by the time you close it. 
	Identifiers []string `json:"identifiers,omitempty"`
	// Use this property to set a value for the attributes of your choice. Attributes represent any information to attach to your session, like the shipping city.  You can use [built-in attributes](https://docs.talon.one/docs/dev/concepts/attributes#built-in-attributes) or [custom ones](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes). Custom attributes must be created in the Campaign Manager before you set them with this property. 
	Attributes map[string]interface{} `json:"attributes"`
	// Indicates whether this is the first session for the customer's profile. Will always be true for anonymous sessions.
	FirstSession bool `json:"firstSession"`
	// The total sum of cart-items, as well as additional costs, before any discounts applied.
	Total float32 `json:"total"`
	// The total sum of cart-items before any discounts applied.
	CartItemTotal float32 `json:"cartItemTotal"`
	// The total sum of additional costs before any discounts applied.
	AdditionalCostTotal float32 `json:"additionalCostTotal"`
	// Timestamp of the most recent event received on this session.
	Updated time.Time `json:"updated"`
}

// NewCustomerSessionV2 instantiates a new CustomerSessionV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerSessionV2(id int32, created time.Time, integrationId string, applicationId int32, profileId string, state string, cartItems []CartItem, attributes map[string]interface{}, firstSession bool, total float32, cartItemTotal float32, additionalCostTotal float32, updated time.Time) *CustomerSessionV2 {
	this := CustomerSessionV2{}
	this.Id = id
	this.Created = created
	this.IntegrationId = integrationId
	this.ApplicationId = applicationId
	this.ProfileId = profileId
	this.State = state
	this.CartItems = cartItems
	this.Attributes = attributes
	this.FirstSession = firstSession
	this.Total = total
	this.CartItemTotal = cartItemTotal
	this.AdditionalCostTotal = additionalCostTotal
	this.Updated = updated
	return &this
}

// NewCustomerSessionV2WithDefaults instantiates a new CustomerSessionV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerSessionV2WithDefaults() *CustomerSessionV2 {
	this := CustomerSessionV2{}
	var state string = "open"
	this.State = state
	return &this
}

// GetId returns the Id field value
func (o *CustomerSessionV2) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomerSessionV2) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *CustomerSessionV2) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CustomerSessionV2) SetCreated(v time.Time) {
	o.Created = v
}

// GetIntegrationId returns the IntegrationId field value
func (o *CustomerSessionV2) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *CustomerSessionV2) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetApplicationId returns the ApplicationId field value
func (o *CustomerSessionV2) GetApplicationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetApplicationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *CustomerSessionV2) SetApplicationId(v int32) {
	o.ApplicationId = v
}

// GetProfileId returns the ProfileId field value
func (o *CustomerSessionV2) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *CustomerSessionV2) SetProfileId(v string) {
	o.ProfileId = v
}

// GetCouponCodes returns the CouponCodes field value if set, zero value otherwise.
func (o *CustomerSessionV2) GetCouponCodes() []string {
	if o == nil || o.CouponCodes == nil {
		var ret []string
		return ret
	}
	return o.CouponCodes
}

// GetCouponCodesOk returns a tuple with the CouponCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetCouponCodesOk() ([]string, bool) {
	if o == nil || o.CouponCodes == nil {
		return nil, false
	}
	return o.CouponCodes, true
}

// HasCouponCodes returns a boolean if a field has been set.
func (o *CustomerSessionV2) HasCouponCodes() bool {
	if o != nil && o.CouponCodes != nil {
		return true
	}

	return false
}

// SetCouponCodes gets a reference to the given []string and assigns it to the CouponCodes field.
func (o *CustomerSessionV2) SetCouponCodes(v []string) {
	o.CouponCodes = v
}

// GetReferralCode returns the ReferralCode field value if set, zero value otherwise.
func (o *CustomerSessionV2) GetReferralCode() string {
	if o == nil || o.ReferralCode == nil {
		var ret string
		return ret
	}
	return *o.ReferralCode
}

// GetReferralCodeOk returns a tuple with the ReferralCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetReferralCodeOk() (*string, bool) {
	if o == nil || o.ReferralCode == nil {
		return nil, false
	}
	return o.ReferralCode, true
}

// HasReferralCode returns a boolean if a field has been set.
func (o *CustomerSessionV2) HasReferralCode() bool {
	if o != nil && o.ReferralCode != nil {
		return true
	}

	return false
}

// SetReferralCode gets a reference to the given string and assigns it to the ReferralCode field.
func (o *CustomerSessionV2) SetReferralCode(v string) {
	o.ReferralCode = &v
}

// GetLoyaltyCards returns the LoyaltyCards field value if set, zero value otherwise.
func (o *CustomerSessionV2) GetLoyaltyCards() []string {
	if o == nil || o.LoyaltyCards == nil {
		var ret []string
		return ret
	}
	return o.LoyaltyCards
}

// GetLoyaltyCardsOk returns a tuple with the LoyaltyCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetLoyaltyCardsOk() ([]string, bool) {
	if o == nil || o.LoyaltyCards == nil {
		return nil, false
	}
	return o.LoyaltyCards, true
}

// HasLoyaltyCards returns a boolean if a field has been set.
func (o *CustomerSessionV2) HasLoyaltyCards() bool {
	if o != nil && o.LoyaltyCards != nil {
		return true
	}

	return false
}

// SetLoyaltyCards gets a reference to the given []string and assigns it to the LoyaltyCards field.
func (o *CustomerSessionV2) SetLoyaltyCards(v []string) {
	o.LoyaltyCards = v
}

// GetState returns the State field value
func (o *CustomerSessionV2) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CustomerSessionV2) SetState(v string) {
	o.State = v
}

// GetCartItems returns the CartItems field value
func (o *CustomerSessionV2) GetCartItems() []CartItem {
	if o == nil {
		var ret []CartItem
		return ret
	}

	return o.CartItems
}

// GetCartItemsOk returns a tuple with the CartItems field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetCartItemsOk() ([]CartItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.CartItems, true
}

// SetCartItems sets field value
func (o *CustomerSessionV2) SetCartItems(v []CartItem) {
	o.CartItems = v
}

// GetAdditionalCosts returns the AdditionalCosts field value if set, zero value otherwise.
func (o *CustomerSessionV2) GetAdditionalCosts() map[string]AdditionalCost {
	if o == nil || o.AdditionalCosts == nil {
		var ret map[string]AdditionalCost
		return ret
	}
	return *o.AdditionalCosts
}

// GetAdditionalCostsOk returns a tuple with the AdditionalCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetAdditionalCostsOk() (*map[string]AdditionalCost, bool) {
	if o == nil || o.AdditionalCosts == nil {
		return nil, false
	}
	return o.AdditionalCosts, true
}

// HasAdditionalCosts returns a boolean if a field has been set.
func (o *CustomerSessionV2) HasAdditionalCosts() bool {
	if o != nil && o.AdditionalCosts != nil {
		return true
	}

	return false
}

// SetAdditionalCosts gets a reference to the given map[string]AdditionalCost and assigns it to the AdditionalCosts field.
func (o *CustomerSessionV2) SetAdditionalCosts(v map[string]AdditionalCost) {
	o.AdditionalCosts = &v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *CustomerSessionV2) GetIdentifiers() []string {
	if o == nil || o.Identifiers == nil {
		var ret []string
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetIdentifiersOk() ([]string, bool) {
	if o == nil || o.Identifiers == nil {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *CustomerSessionV2) HasIdentifiers() bool {
	if o != nil && o.Identifiers != nil {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given []string and assigns it to the Identifiers field.
func (o *CustomerSessionV2) SetIdentifiers(v []string) {
	o.Identifiers = v
}

// GetAttributes returns the Attributes field value
func (o *CustomerSessionV2) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *CustomerSessionV2) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetFirstSession returns the FirstSession field value
func (o *CustomerSessionV2) GetFirstSession() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FirstSession
}

// GetFirstSessionOk returns a tuple with the FirstSession field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetFirstSessionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstSession, true
}

// SetFirstSession sets field value
func (o *CustomerSessionV2) SetFirstSession(v bool) {
	o.FirstSession = v
}

// GetTotal returns the Total field value
func (o *CustomerSessionV2) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CustomerSessionV2) SetTotal(v float32) {
	o.Total = v
}

// GetCartItemTotal returns the CartItemTotal field value
func (o *CustomerSessionV2) GetCartItemTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CartItemTotal
}

// GetCartItemTotalOk returns a tuple with the CartItemTotal field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetCartItemTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CartItemTotal, true
}

// SetCartItemTotal sets field value
func (o *CustomerSessionV2) SetCartItemTotal(v float32) {
	o.CartItemTotal = v
}

// GetAdditionalCostTotal returns the AdditionalCostTotal field value
func (o *CustomerSessionV2) GetAdditionalCostTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AdditionalCostTotal
}

// GetAdditionalCostTotalOk returns a tuple with the AdditionalCostTotal field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetAdditionalCostTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalCostTotal, true
}

// SetAdditionalCostTotal sets field value
func (o *CustomerSessionV2) SetAdditionalCostTotal(v float32) {
	o.AdditionalCostTotal = v
}

// GetUpdated returns the Updated field value
func (o *CustomerSessionV2) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *CustomerSessionV2) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *CustomerSessionV2) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o CustomerSessionV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if true {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if true {
		toSerialize["profileId"] = o.ProfileId
	}
	if o.CouponCodes != nil {
		toSerialize["couponCodes"] = o.CouponCodes
	}
	if o.ReferralCode != nil {
		toSerialize["referralCode"] = o.ReferralCode
	}
	if o.LoyaltyCards != nil {
		toSerialize["loyaltyCards"] = o.LoyaltyCards
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["cartItems"] = o.CartItems
	}
	if o.AdditionalCosts != nil {
		toSerialize["additionalCosts"] = o.AdditionalCosts
	}
	if o.Identifiers != nil {
		toSerialize["identifiers"] = o.Identifiers
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["firstSession"] = o.FirstSession
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["cartItemTotal"] = o.CartItemTotal
	}
	if true {
		toSerialize["additionalCostTotal"] = o.AdditionalCostTotal
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerSessionV2 struct {
	value *CustomerSessionV2
	isSet bool
}

func (v NullableCustomerSessionV2) Get() *CustomerSessionV2 {
	return v.value
}

func (v *NullableCustomerSessionV2) Set(val *CustomerSessionV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerSessionV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerSessionV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerSessionV2(val *CustomerSessionV2) *NullableCustomerSessionV2 {
	return &NullableCustomerSessionV2{value: val, isSet: true}
}

func (v NullableCustomerSessionV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerSessionV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


