/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// PatchManyItemsCatalogAction The specific properties of the \"PATCH_MANY\" catalog sync action.
type PatchManyItemsCatalogAction struct {
	// Price of the item.
	Price *float32 `json:"price,omitempty"`
	// The list of filters used to select the items to patch, joined by `AND`.  **Note:** Every item in the catalog will be modified if there are no filters. 
	Filters []CatalogActionFilter `json:"filters,omitempty"`
	// The attributes of the items to patch.
	Attributes map[string]interface{} `json:"attributes"`
}

// NewPatchManyItemsCatalogAction instantiates a new PatchManyItemsCatalogAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchManyItemsCatalogAction(attributes map[string]interface{}) *PatchManyItemsCatalogAction {
	this := PatchManyItemsCatalogAction{}
	this.Attributes = attributes
	return &this
}

// NewPatchManyItemsCatalogActionWithDefaults instantiates a new PatchManyItemsCatalogAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchManyItemsCatalogActionWithDefaults() *PatchManyItemsCatalogAction {
	this := PatchManyItemsCatalogAction{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PatchManyItemsCatalogAction) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchManyItemsCatalogAction) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PatchManyItemsCatalogAction) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *PatchManyItemsCatalogAction) SetPrice(v float32) {
	o.Price = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PatchManyItemsCatalogAction) GetFilters() []CatalogActionFilter {
	if o == nil || o.Filters == nil {
		var ret []CatalogActionFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchManyItemsCatalogAction) GetFiltersOk() ([]CatalogActionFilter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PatchManyItemsCatalogAction) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []CatalogActionFilter and assigns it to the Filters field.
func (o *PatchManyItemsCatalogAction) SetFilters(v []CatalogActionFilter) {
	o.Filters = v
}

// GetAttributes returns the Attributes field value
func (o *PatchManyItemsCatalogAction) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *PatchManyItemsCatalogAction) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *PatchManyItemsCatalogAction) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o PatchManyItemsCatalogAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullablePatchManyItemsCatalogAction struct {
	value *PatchManyItemsCatalogAction
	isSet bool
}

func (v NullablePatchManyItemsCatalogAction) Get() *PatchManyItemsCatalogAction {
	return v.value
}

func (v *NullablePatchManyItemsCatalogAction) Set(val *PatchManyItemsCatalogAction) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchManyItemsCatalogAction) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchManyItemsCatalogAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchManyItemsCatalogAction(val *PatchManyItemsCatalogAction) *NullablePatchManyItemsCatalogAction {
	return &NullablePatchManyItemsCatalogAction{value: val, isSet: true}
}

func (v NullablePatchManyItemsCatalogAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchManyItemsCatalogAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


