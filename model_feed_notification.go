/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// FeedNotification A feed notification for CAMA users.
type FeedNotification struct {
	// Title of the feed notification.
	Title string `json:"title"`
	// Timestamp of the moment this feed notification was created.
	Created time.Time `json:"created"`
	// Timestamp of the moment this feed notification was last updated.
	Updated time.Time `json:"updated"`
	// URL to the feed notification in the help center.
	ArticleUrl string `json:"articleUrl"`
	// The type of the feed notification.
	Type string `json:"type"`
	// Body of the feed notification.
	Body string `json:"body"`
}

// NewFeedNotification instantiates a new FeedNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedNotification(title string, created time.Time, updated time.Time, articleUrl string, type_ string, body string) *FeedNotification {
	this := FeedNotification{}
	this.Title = title
	this.Created = created
	this.Updated = updated
	this.ArticleUrl = articleUrl
	this.Type = type_
	this.Body = body
	return &this
}

// NewFeedNotificationWithDefaults instantiates a new FeedNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedNotificationWithDefaults() *FeedNotification {
	this := FeedNotification{}
	return &this
}

// GetTitle returns the Title field value
func (o *FeedNotification) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *FeedNotification) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *FeedNotification) SetTitle(v string) {
	o.Title = v
}

// GetCreated returns the Created field value
func (o *FeedNotification) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *FeedNotification) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *FeedNotification) SetCreated(v time.Time) {
	o.Created = v
}

// GetUpdated returns the Updated field value
func (o *FeedNotification) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *FeedNotification) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *FeedNotification) SetUpdated(v time.Time) {
	o.Updated = v
}

// GetArticleUrl returns the ArticleUrl field value
func (o *FeedNotification) GetArticleUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArticleUrl
}

// GetArticleUrlOk returns a tuple with the ArticleUrl field value
// and a boolean to check if the value has been set.
func (o *FeedNotification) GetArticleUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArticleUrl, true
}

// SetArticleUrl sets field value
func (o *FeedNotification) SetArticleUrl(v string) {
	o.ArticleUrl = v
}

// GetType returns the Type field value
func (o *FeedNotification) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FeedNotification) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FeedNotification) SetType(v string) {
	o.Type = v
}

// GetBody returns the Body field value
func (o *FeedNotification) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *FeedNotification) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *FeedNotification) SetBody(v string) {
	o.Body = v
}

func (o FeedNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	if true {
		toSerialize["articleUrl"] = o.ArticleUrl
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["body"] = o.Body
	}
	return json.Marshal(toSerialize)
}

type NullableFeedNotification struct {
	value *FeedNotification
	isSet bool
}

func (v NullableFeedNotification) Get() *FeedNotification {
	return v.value
}

func (v *NullableFeedNotification) Set(val *FeedNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedNotification(val *FeedNotification) *NullableFeedNotification {
	return &NullableFeedNotification{value: val, isSet: true}
}

func (v NullableFeedNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


