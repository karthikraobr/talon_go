/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CampaignGroupEntity struct for CampaignGroupEntity
type CampaignGroupEntity struct {
	// The IDs of the campaign groups that own this entity.
	CampaignGroups []int32 `json:"campaignGroups,omitempty"`
}

// NewCampaignGroupEntity instantiates a new CampaignGroupEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignGroupEntity() *CampaignGroupEntity {
	this := CampaignGroupEntity{}
	return &this
}

// NewCampaignGroupEntityWithDefaults instantiates a new CampaignGroupEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignGroupEntityWithDefaults() *CampaignGroupEntity {
	this := CampaignGroupEntity{}
	return &this
}

// GetCampaignGroups returns the CampaignGroups field value if set, zero value otherwise.
func (o *CampaignGroupEntity) GetCampaignGroups() []int32 {
	if o == nil || o.CampaignGroups == nil {
		var ret []int32
		return ret
	}
	return o.CampaignGroups
}

// GetCampaignGroupsOk returns a tuple with the CampaignGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignGroupEntity) GetCampaignGroupsOk() ([]int32, bool) {
	if o == nil || o.CampaignGroups == nil {
		return nil, false
	}
	return o.CampaignGroups, true
}

// HasCampaignGroups returns a boolean if a field has been set.
func (o *CampaignGroupEntity) HasCampaignGroups() bool {
	if o != nil && o.CampaignGroups != nil {
		return true
	}

	return false
}

// SetCampaignGroups gets a reference to the given []int32 and assigns it to the CampaignGroups field.
func (o *CampaignGroupEntity) SetCampaignGroups(v []int32) {
	o.CampaignGroups = v
}

func (o CampaignGroupEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CampaignGroups != nil {
		toSerialize["campaignGroups"] = o.CampaignGroups
	}
	return json.Marshal(toSerialize)
}

type NullableCampaignGroupEntity struct {
	value *CampaignGroupEntity
	isSet bool
}

func (v NullableCampaignGroupEntity) Get() *CampaignGroupEntity {
	return v.value
}

func (v *NullableCampaignGroupEntity) Set(val *CampaignGroupEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignGroupEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignGroupEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignGroupEntity(val *CampaignGroupEntity) *NullableCampaignGroupEntity {
	return &NullableCampaignGroupEntity{value: val, isSet: true}
}

func (v NullableCampaignGroupEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignGroupEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


