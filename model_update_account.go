/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// UpdateAccount struct for UpdateAccount
type UpdateAccount struct {
	// Arbitrary properties associated with this campaign.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Name of your company.
	CompanyName string `json:"companyName"`
	// The billing email address associated with your company account.
	BillingEmail string `json:"billingEmail"`
	// State of the account (active, deactivated).
	State *string `json:"state,omitempty"`
	// The point in time at which your current plan expires.
	PlanExpires *time.Time `json:"planExpires,omitempty"`
}

// NewUpdateAccount instantiates a new UpdateAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccount(companyName string, billingEmail string) *UpdateAccount {
	this := UpdateAccount{}
	this.CompanyName = companyName
	this.BillingEmail = billingEmail
	return &this
}

// NewUpdateAccountWithDefaults instantiates a new UpdateAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccountWithDefaults() *UpdateAccount {
	this := UpdateAccount{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *UpdateAccount) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *UpdateAccount) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *UpdateAccount) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetCompanyName returns the CompanyName field value
func (o *UpdateAccount) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *UpdateAccount) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetBillingEmail returns the BillingEmail field value
func (o *UpdateAccount) GetBillingEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingEmail
}

// GetBillingEmailOk returns a tuple with the BillingEmail field value
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetBillingEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingEmail, true
}

// SetBillingEmail sets field value
func (o *UpdateAccount) SetBillingEmail(v string) {
	o.BillingEmail = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UpdateAccount) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UpdateAccount) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UpdateAccount) SetState(v string) {
	o.State = &v
}

// GetPlanExpires returns the PlanExpires field value if set, zero value otherwise.
func (o *UpdateAccount) GetPlanExpires() time.Time {
	if o == nil || o.PlanExpires == nil {
		var ret time.Time
		return ret
	}
	return *o.PlanExpires
}

// GetPlanExpiresOk returns a tuple with the PlanExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetPlanExpiresOk() (*time.Time, bool) {
	if o == nil || o.PlanExpires == nil {
		return nil, false
	}
	return o.PlanExpires, true
}

// HasPlanExpires returns a boolean if a field has been set.
func (o *UpdateAccount) HasPlanExpires() bool {
	if o != nil && o.PlanExpires != nil {
		return true
	}

	return false
}

// SetPlanExpires gets a reference to the given time.Time and assigns it to the PlanExpires field.
func (o *UpdateAccount) SetPlanExpires(v time.Time) {
	o.PlanExpires = &v
}

func (o UpdateAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["companyName"] = o.CompanyName
	}
	if true {
		toSerialize["billingEmail"] = o.BillingEmail
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.PlanExpires != nil {
		toSerialize["planExpires"] = o.PlanExpires
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAccount struct {
	value *UpdateAccount
	isSet bool
}

func (v NullableUpdateAccount) Get() *UpdateAccount {
	return v.value
}

func (v *NullableUpdateAccount) Set(val *UpdateAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccount(val *UpdateAccount) *NullableUpdateAccount {
	return &NullableUpdateAccount{value: val, isSet: true}
}

func (v NullableUpdateAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


