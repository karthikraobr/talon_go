/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// Environment 
type Environment struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The ID of the application that owns this entity.
	ApplicationId int32 `json:"applicationId"`
	// The slots defined for this application.
	Slots []SlotDef `json:"slots"`
	// The functions defined for this application.
	Functions []FunctionDef `json:"functions"`
	// The templates defined for this application.
	Templates []TemplateDef `json:"templates"`
	// A stringified version of the environment's Talang variables scope.
	Variables string `json:"variables"`
	// The giveaways pools that the application is subscribed to.
	GiveawaysPools []GiveawaysPool `json:"giveawaysPools,omitempty"`
	// The loyalty programs that the application is subscribed to.
	LoyaltyPrograms []LoyaltyProgram `json:"loyaltyPrograms,omitempty"`
	// The attributes that the application is subscribed to.
	Attributes []Attribute `json:"attributes,omitempty"`
	// The additional costs that the application is subscribed to.
	AdditionalCosts []AccountAdditionalCost `json:"additionalCosts,omitempty"`
	// The audiences contained in the account which the application belongs to.
	Audiences []Audience `json:"audiences,omitempty"`
	// The account-level collections that the application is subscribed to.
	Collections []Collection `json:"collections,omitempty"`
}

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment(id int32, created time.Time, applicationId int32, slots []SlotDef, functions []FunctionDef, templates []TemplateDef, variables string) *Environment {
	this := Environment{}
	this.Id = id
	this.Created = created
	this.ApplicationId = applicationId
	this.Slots = slots
	this.Functions = functions
	this.Templates = templates
	this.Variables = variables
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	return &this
}

// GetId returns the Id field value
func (o *Environment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Environment) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Environment) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Environment) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Environment) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Environment) SetCreated(v time.Time) {
	o.Created = v
}

// GetApplicationId returns the ApplicationId field value
func (o *Environment) GetApplicationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *Environment) GetApplicationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *Environment) SetApplicationId(v int32) {
	o.ApplicationId = v
}

// GetSlots returns the Slots field value
func (o *Environment) GetSlots() []SlotDef {
	if o == nil {
		var ret []SlotDef
		return ret
	}

	return o.Slots
}

// GetSlotsOk returns a tuple with the Slots field value
// and a boolean to check if the value has been set.
func (o *Environment) GetSlotsOk() ([]SlotDef, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slots, true
}

// SetSlots sets field value
func (o *Environment) SetSlots(v []SlotDef) {
	o.Slots = v
}

// GetFunctions returns the Functions field value
func (o *Environment) GetFunctions() []FunctionDef {
	if o == nil {
		var ret []FunctionDef
		return ret
	}

	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value
// and a boolean to check if the value has been set.
func (o *Environment) GetFunctionsOk() ([]FunctionDef, bool) {
	if o == nil {
		return nil, false
	}
	return o.Functions, true
}

// SetFunctions sets field value
func (o *Environment) SetFunctions(v []FunctionDef) {
	o.Functions = v
}

// GetTemplates returns the Templates field value
func (o *Environment) GetTemplates() []TemplateDef {
	if o == nil {
		var ret []TemplateDef
		return ret
	}

	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value
// and a boolean to check if the value has been set.
func (o *Environment) GetTemplatesOk() ([]TemplateDef, bool) {
	if o == nil {
		return nil, false
	}
	return o.Templates, true
}

// SetTemplates sets field value
func (o *Environment) SetTemplates(v []TemplateDef) {
	o.Templates = v
}

// GetVariables returns the Variables field value
func (o *Environment) GetVariables() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *Environment) GetVariablesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variables, true
}

// SetVariables sets field value
func (o *Environment) SetVariables(v string) {
	o.Variables = v
}

// GetGiveawaysPools returns the GiveawaysPools field value if set, zero value otherwise.
func (o *Environment) GetGiveawaysPools() []GiveawaysPool {
	if o == nil || o.GiveawaysPools == nil {
		var ret []GiveawaysPool
		return ret
	}
	return o.GiveawaysPools
}

// GetGiveawaysPoolsOk returns a tuple with the GiveawaysPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetGiveawaysPoolsOk() ([]GiveawaysPool, bool) {
	if o == nil || o.GiveawaysPools == nil {
		return nil, false
	}
	return o.GiveawaysPools, true
}

// HasGiveawaysPools returns a boolean if a field has been set.
func (o *Environment) HasGiveawaysPools() bool {
	if o != nil && o.GiveawaysPools != nil {
		return true
	}

	return false
}

// SetGiveawaysPools gets a reference to the given []GiveawaysPool and assigns it to the GiveawaysPools field.
func (o *Environment) SetGiveawaysPools(v []GiveawaysPool) {
	o.GiveawaysPools = v
}

// GetLoyaltyPrograms returns the LoyaltyPrograms field value if set, zero value otherwise.
func (o *Environment) GetLoyaltyPrograms() []LoyaltyProgram {
	if o == nil || o.LoyaltyPrograms == nil {
		var ret []LoyaltyProgram
		return ret
	}
	return o.LoyaltyPrograms
}

// GetLoyaltyProgramsOk returns a tuple with the LoyaltyPrograms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetLoyaltyProgramsOk() ([]LoyaltyProgram, bool) {
	if o == nil || o.LoyaltyPrograms == nil {
		return nil, false
	}
	return o.LoyaltyPrograms, true
}

// HasLoyaltyPrograms returns a boolean if a field has been set.
func (o *Environment) HasLoyaltyPrograms() bool {
	if o != nil && o.LoyaltyPrograms != nil {
		return true
	}

	return false
}

// SetLoyaltyPrograms gets a reference to the given []LoyaltyProgram and assigns it to the LoyaltyPrograms field.
func (o *Environment) SetLoyaltyPrograms(v []LoyaltyProgram) {
	o.LoyaltyPrograms = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Environment) GetAttributes() []Attribute {
	if o == nil || o.Attributes == nil {
		var ret []Attribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetAttributesOk() ([]Attribute, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Environment) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []Attribute and assigns it to the Attributes field.
func (o *Environment) SetAttributes(v []Attribute) {
	o.Attributes = v
}

// GetAdditionalCosts returns the AdditionalCosts field value if set, zero value otherwise.
func (o *Environment) GetAdditionalCosts() []AccountAdditionalCost {
	if o == nil || o.AdditionalCosts == nil {
		var ret []AccountAdditionalCost
		return ret
	}
	return o.AdditionalCosts
}

// GetAdditionalCostsOk returns a tuple with the AdditionalCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetAdditionalCostsOk() ([]AccountAdditionalCost, bool) {
	if o == nil || o.AdditionalCosts == nil {
		return nil, false
	}
	return o.AdditionalCosts, true
}

// HasAdditionalCosts returns a boolean if a field has been set.
func (o *Environment) HasAdditionalCosts() bool {
	if o != nil && o.AdditionalCosts != nil {
		return true
	}

	return false
}

// SetAdditionalCosts gets a reference to the given []AccountAdditionalCost and assigns it to the AdditionalCosts field.
func (o *Environment) SetAdditionalCosts(v []AccountAdditionalCost) {
	o.AdditionalCosts = v
}

// GetAudiences returns the Audiences field value if set, zero value otherwise.
func (o *Environment) GetAudiences() []Audience {
	if o == nil || o.Audiences == nil {
		var ret []Audience
		return ret
	}
	return o.Audiences
}

// GetAudiencesOk returns a tuple with the Audiences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetAudiencesOk() ([]Audience, bool) {
	if o == nil || o.Audiences == nil {
		return nil, false
	}
	return o.Audiences, true
}

// HasAudiences returns a boolean if a field has been set.
func (o *Environment) HasAudiences() bool {
	if o != nil && o.Audiences != nil {
		return true
	}

	return false
}

// SetAudiences gets a reference to the given []Audience and assigns it to the Audiences field.
func (o *Environment) SetAudiences(v []Audience) {
	o.Audiences = v
}

// GetCollections returns the Collections field value if set, zero value otherwise.
func (o *Environment) GetCollections() []Collection {
	if o == nil || o.Collections == nil {
		var ret []Collection
		return ret
	}
	return o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetCollectionsOk() ([]Collection, bool) {
	if o == nil || o.Collections == nil {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *Environment) HasCollections() bool {
	if o != nil && o.Collections != nil {
		return true
	}

	return false
}

// SetCollections gets a reference to the given []Collection and assigns it to the Collections field.
func (o *Environment) SetCollections(v []Collection) {
	o.Collections = v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if true {
		toSerialize["slots"] = o.Slots
	}
	if true {
		toSerialize["functions"] = o.Functions
	}
	if true {
		toSerialize["templates"] = o.Templates
	}
	if true {
		toSerialize["variables"] = o.Variables
	}
	if o.GiveawaysPools != nil {
		toSerialize["giveawaysPools"] = o.GiveawaysPools
	}
	if o.LoyaltyPrograms != nil {
		toSerialize["loyaltyPrograms"] = o.LoyaltyPrograms
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.AdditionalCosts != nil {
		toSerialize["additionalCosts"] = o.AdditionalCosts
	}
	if o.Audiences != nil {
		toSerialize["audiences"] = o.Audiences
	}
	if o.Collections != nil {
		toSerialize["collections"] = o.Collections
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


