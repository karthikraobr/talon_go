/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CampaignEditedNotification A notification regarding a campaign which was edited.
type CampaignEditedNotification struct {
	Campaign Campaign `json:"campaign"`
	OldCampaign Campaign `json:"oldCampaign"`
}

// NewCampaignEditedNotification instantiates a new CampaignEditedNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignEditedNotification(campaign Campaign, oldCampaign Campaign) *CampaignEditedNotification {
	this := CampaignEditedNotification{}
	this.Campaign = campaign
	this.OldCampaign = oldCampaign
	return &this
}

// NewCampaignEditedNotificationWithDefaults instantiates a new CampaignEditedNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignEditedNotificationWithDefaults() *CampaignEditedNotification {
	this := CampaignEditedNotification{}
	return &this
}

// GetCampaign returns the Campaign field value
func (o *CampaignEditedNotification) GetCampaign() Campaign {
	if o == nil {
		var ret Campaign
		return ret
	}

	return o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value
// and a boolean to check if the value has been set.
func (o *CampaignEditedNotification) GetCampaignOk() (*Campaign, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Campaign, true
}

// SetCampaign sets field value
func (o *CampaignEditedNotification) SetCampaign(v Campaign) {
	o.Campaign = v
}

// GetOldCampaign returns the OldCampaign field value
func (o *CampaignEditedNotification) GetOldCampaign() Campaign {
	if o == nil {
		var ret Campaign
		return ret
	}

	return o.OldCampaign
}

// GetOldCampaignOk returns a tuple with the OldCampaign field value
// and a boolean to check if the value has been set.
func (o *CampaignEditedNotification) GetOldCampaignOk() (*Campaign, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldCampaign, true
}

// SetOldCampaign sets field value
func (o *CampaignEditedNotification) SetOldCampaign(v Campaign) {
	o.OldCampaign = v
}

func (o CampaignEditedNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["campaign"] = o.Campaign
	}
	if true {
		toSerialize["oldCampaign"] = o.OldCampaign
	}
	return json.Marshal(toSerialize)
}

type NullableCampaignEditedNotification struct {
	value *CampaignEditedNotification
	isSet bool
}

func (v NullableCampaignEditedNotification) Get() *CampaignEditedNotification {
	return v.value
}

func (v *NullableCampaignEditedNotification) Set(val *CampaignEditedNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignEditedNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignEditedNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignEditedNotification(val *CampaignEditedNotification) *NullableCampaignEditedNotification {
	return &NullableCampaignEditedNotification{value: val, isSet: true}
}

func (v NullableCampaignEditedNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignEditedNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


