/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewInvitation Parameters for inviting a new user.
type NewInvitation struct {
	// Name of the user being invited.
	Name *string `json:"name,omitempty"`
	Email string `json:"email"`
	// The `Access Control List` json defining the role of the user. This represents the actual access control on the user level. Use one of the following: - normal user: `{\"Role\": 0}` - admin: `{\"Role\": 127}` 
	Acl string `json:"acl"`
	// An array of roleIDs to assign the new user to.
	Roles []int32 `json:"roles,omitempty"`
}

// NewNewInvitation instantiates a new NewInvitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewInvitation(email string, acl string) *NewInvitation {
	this := NewInvitation{}
	this.Email = email
	this.Acl = acl
	return &this
}

// NewNewInvitationWithDefaults instantiates a new NewInvitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewInvitationWithDefaults() *NewInvitation {
	this := NewInvitation{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NewInvitation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewInvitation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NewInvitation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NewInvitation) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value
func (o *NewInvitation) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *NewInvitation) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *NewInvitation) SetEmail(v string) {
	o.Email = v
}

// GetAcl returns the Acl field value
func (o *NewInvitation) GetAcl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Acl
}

// GetAclOk returns a tuple with the Acl field value
// and a boolean to check if the value has been set.
func (o *NewInvitation) GetAclOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Acl, true
}

// SetAcl sets field value
func (o *NewInvitation) SetAcl(v string) {
	o.Acl = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *NewInvitation) GetRoles() []int32 {
	if o == nil || o.Roles == nil {
		var ret []int32
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewInvitation) GetRolesOk() ([]int32, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *NewInvitation) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []int32 and assigns it to the Roles field.
func (o *NewInvitation) SetRoles(v []int32) {
	o.Roles = v
}

func (o NewInvitation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["acl"] = o.Acl
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableNewInvitation struct {
	value *NewInvitation
	isSet bool
}

func (v NullableNewInvitation) Get() *NewInvitation {
	return v.value
}

func (v *NullableNewInvitation) Set(val *NewInvitation) {
	v.value = val
	v.isSet = true
}

func (v NullableNewInvitation) IsSet() bool {
	return v.isSet
}

func (v *NullableNewInvitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewInvitation(val *NewInvitation) *NullableNewInvitation {
	return &NullableNewInvitation{value: val, isSet: true}
}

func (v NullableNewInvitation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewInvitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


