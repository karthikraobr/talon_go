/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CodeGeneratorSettings struct for CodeGeneratorSettings
type CodeGeneratorSettings struct {
	// List of characters used to generate the random parts of a code. Defaults to a list equivalent to the `[A-Z, 0-9]` regexp. 
	ValidCharacters []string `json:"validCharacters"`
	// The pattern used to generate coupon codes. The character `#` is a placeholder and is replaced by a random character from the `validCharacters` set. 
	CouponPattern string `json:"couponPattern"`
}

// NewCodeGeneratorSettings instantiates a new CodeGeneratorSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeGeneratorSettings(validCharacters []string, couponPattern string) *CodeGeneratorSettings {
	this := CodeGeneratorSettings{}
	this.ValidCharacters = validCharacters
	this.CouponPattern = couponPattern
	return &this
}

// NewCodeGeneratorSettingsWithDefaults instantiates a new CodeGeneratorSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeGeneratorSettingsWithDefaults() *CodeGeneratorSettings {
	this := CodeGeneratorSettings{}
	return &this
}

// GetValidCharacters returns the ValidCharacters field value
func (o *CodeGeneratorSettings) GetValidCharacters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ValidCharacters
}

// GetValidCharactersOk returns a tuple with the ValidCharacters field value
// and a boolean to check if the value has been set.
func (o *CodeGeneratorSettings) GetValidCharactersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValidCharacters, true
}

// SetValidCharacters sets field value
func (o *CodeGeneratorSettings) SetValidCharacters(v []string) {
	o.ValidCharacters = v
}

// GetCouponPattern returns the CouponPattern field value
func (o *CodeGeneratorSettings) GetCouponPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CouponPattern
}

// GetCouponPatternOk returns a tuple with the CouponPattern field value
// and a boolean to check if the value has been set.
func (o *CodeGeneratorSettings) GetCouponPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CouponPattern, true
}

// SetCouponPattern sets field value
func (o *CodeGeneratorSettings) SetCouponPattern(v string) {
	o.CouponPattern = v
}

func (o CodeGeneratorSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["validCharacters"] = o.ValidCharacters
	}
	if true {
		toSerialize["couponPattern"] = o.CouponPattern
	}
	return json.Marshal(toSerialize)
}

type NullableCodeGeneratorSettings struct {
	value *CodeGeneratorSettings
	isSet bool
}

func (v NullableCodeGeneratorSettings) Get() *CodeGeneratorSettings {
	return v.value
}

func (v *NullableCodeGeneratorSettings) Set(val *CodeGeneratorSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeGeneratorSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeGeneratorSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeGeneratorSettings(val *CodeGeneratorSettings) *NullableCodeGeneratorSettings {
	return &NullableCodeGeneratorSettings{value: val, isSet: true}
}

func (v NullableCodeGeneratorSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeGeneratorSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


