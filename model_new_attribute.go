/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewAttribute 
type NewAttribute struct {
	// The name of the entity that can have this attribute. When creating or updating the entities of a given type, you can include an `attributes` object with keys corresponding to the `name` of the custom attributes for that type.
	Entity string `json:"entity"`
	EventType *string `json:"eventType,omitempty"`
	// The attribute name that will be used in API requests and Talang. E.g. if `name == \"region\"` then you would set the region attribute by including an `attributes.region` property in your request payload.
	Name string `json:"name"`
	// The human-readable name for the attribute that will be shown in the Campaign Manager. Like `name`, the combination of entity and title must also be unique.
	Title string `json:"title"`
	// The data type of the attribute, a `time` attribute must be sent as a string that conforms to the [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) timestamp format.
	Type string `json:"type"`
	// A description of this attribute.
	Description string `json:"description"`
	// A list of suggestions for the attribute.
	Suggestions []string `json:"suggestions"`
	// Whether or not this attribute has an allowed list of values associated with it.
	HasAllowedList *bool `json:"hasAllowedList,omitempty"`
	// Whether or not this attribute's value is restricted by suggestions (`suggestions` property) or by an allowed list of value (`hasAllowedList` property). 
	RestrictedBySuggestions *bool `json:"restrictedBySuggestions,omitempty"`
	// Whether or not this attribute can be edited.
	Editable bool `json:"editable"`
	// A list of the IDs of the applications where this attribute is available.
	SubscribedApplicationsIds []int32 `json:"subscribedApplicationsIds,omitempty"`
	// A list of the IDs of the catalogs where this attribute is available.
	SubscribedCatalogsIds []int32 `json:"subscribedCatalogsIds,omitempty"`
	// A list of allowed subscription types for this attribute.  **Note:** This only applies to attributes associated with the `CartItem` entity. 
	AllowedSubscriptions []string `json:"allowedSubscriptions,omitempty"`
}

// NewNewAttribute instantiates a new NewAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewAttribute(entity string, name string, title string, type_ string, description string, suggestions []string, editable bool) *NewAttribute {
	this := NewAttribute{}
	this.Entity = entity
	this.Name = name
	this.Title = title
	this.Type = type_
	this.Description = description
	this.Suggestions = suggestions
	var hasAllowedList bool = false
	this.HasAllowedList = &hasAllowedList
	var restrictedBySuggestions bool = false
	this.RestrictedBySuggestions = &restrictedBySuggestions
	this.Editable = editable
	return &this
}

// NewNewAttributeWithDefaults instantiates a new NewAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewAttributeWithDefaults() *NewAttribute {
	this := NewAttribute{}
	var hasAllowedList bool = false
	this.HasAllowedList = &hasAllowedList
	var restrictedBySuggestions bool = false
	this.RestrictedBySuggestions = &restrictedBySuggestions
	return &this
}

// GetEntity returns the Entity field value
func (o *NewAttribute) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *NewAttribute) SetEntity(v string) {
	o.Entity = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *NewAttribute) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *NewAttribute) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *NewAttribute) SetEventType(v string) {
	o.EventType = &v
}

// GetName returns the Name field value
func (o *NewAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewAttribute) SetName(v string) {
	o.Name = v
}

// GetTitle returns the Title field value
func (o *NewAttribute) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NewAttribute) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *NewAttribute) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NewAttribute) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *NewAttribute) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NewAttribute) SetDescription(v string) {
	o.Description = v
}

// GetSuggestions returns the Suggestions field value
func (o *NewAttribute) GetSuggestions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetSuggestionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suggestions, true
}

// SetSuggestions sets field value
func (o *NewAttribute) SetSuggestions(v []string) {
	o.Suggestions = v
}

// GetHasAllowedList returns the HasAllowedList field value if set, zero value otherwise.
func (o *NewAttribute) GetHasAllowedList() bool {
	if o == nil || o.HasAllowedList == nil {
		var ret bool
		return ret
	}
	return *o.HasAllowedList
}

// GetHasAllowedListOk returns a tuple with the HasAllowedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetHasAllowedListOk() (*bool, bool) {
	if o == nil || o.HasAllowedList == nil {
		return nil, false
	}
	return o.HasAllowedList, true
}

// HasHasAllowedList returns a boolean if a field has been set.
func (o *NewAttribute) HasHasAllowedList() bool {
	if o != nil && o.HasAllowedList != nil {
		return true
	}

	return false
}

// SetHasAllowedList gets a reference to the given bool and assigns it to the HasAllowedList field.
func (o *NewAttribute) SetHasAllowedList(v bool) {
	o.HasAllowedList = &v
}

// GetRestrictedBySuggestions returns the RestrictedBySuggestions field value if set, zero value otherwise.
func (o *NewAttribute) GetRestrictedBySuggestions() bool {
	if o == nil || o.RestrictedBySuggestions == nil {
		var ret bool
		return ret
	}
	return *o.RestrictedBySuggestions
}

// GetRestrictedBySuggestionsOk returns a tuple with the RestrictedBySuggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetRestrictedBySuggestionsOk() (*bool, bool) {
	if o == nil || o.RestrictedBySuggestions == nil {
		return nil, false
	}
	return o.RestrictedBySuggestions, true
}

// HasRestrictedBySuggestions returns a boolean if a field has been set.
func (o *NewAttribute) HasRestrictedBySuggestions() bool {
	if o != nil && o.RestrictedBySuggestions != nil {
		return true
	}

	return false
}

// SetRestrictedBySuggestions gets a reference to the given bool and assigns it to the RestrictedBySuggestions field.
func (o *NewAttribute) SetRestrictedBySuggestions(v bool) {
	o.RestrictedBySuggestions = &v
}

// GetEditable returns the Editable field value
func (o *NewAttribute) GetEditable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Editable
}

// GetEditableOk returns a tuple with the Editable field value
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetEditableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Editable, true
}

// SetEditable sets field value
func (o *NewAttribute) SetEditable(v bool) {
	o.Editable = v
}

// GetSubscribedApplicationsIds returns the SubscribedApplicationsIds field value if set, zero value otherwise.
func (o *NewAttribute) GetSubscribedApplicationsIds() []int32 {
	if o == nil || o.SubscribedApplicationsIds == nil {
		var ret []int32
		return ret
	}
	return o.SubscribedApplicationsIds
}

// GetSubscribedApplicationsIdsOk returns a tuple with the SubscribedApplicationsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetSubscribedApplicationsIdsOk() ([]int32, bool) {
	if o == nil || o.SubscribedApplicationsIds == nil {
		return nil, false
	}
	return o.SubscribedApplicationsIds, true
}

// HasSubscribedApplicationsIds returns a boolean if a field has been set.
func (o *NewAttribute) HasSubscribedApplicationsIds() bool {
	if o != nil && o.SubscribedApplicationsIds != nil {
		return true
	}

	return false
}

// SetSubscribedApplicationsIds gets a reference to the given []int32 and assigns it to the SubscribedApplicationsIds field.
func (o *NewAttribute) SetSubscribedApplicationsIds(v []int32) {
	o.SubscribedApplicationsIds = v
}

// GetSubscribedCatalogsIds returns the SubscribedCatalogsIds field value if set, zero value otherwise.
func (o *NewAttribute) GetSubscribedCatalogsIds() []int32 {
	if o == nil || o.SubscribedCatalogsIds == nil {
		var ret []int32
		return ret
	}
	return o.SubscribedCatalogsIds
}

// GetSubscribedCatalogsIdsOk returns a tuple with the SubscribedCatalogsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetSubscribedCatalogsIdsOk() ([]int32, bool) {
	if o == nil || o.SubscribedCatalogsIds == nil {
		return nil, false
	}
	return o.SubscribedCatalogsIds, true
}

// HasSubscribedCatalogsIds returns a boolean if a field has been set.
func (o *NewAttribute) HasSubscribedCatalogsIds() bool {
	if o != nil && o.SubscribedCatalogsIds != nil {
		return true
	}

	return false
}

// SetSubscribedCatalogsIds gets a reference to the given []int32 and assigns it to the SubscribedCatalogsIds field.
func (o *NewAttribute) SetSubscribedCatalogsIds(v []int32) {
	o.SubscribedCatalogsIds = v
}

// GetAllowedSubscriptions returns the AllowedSubscriptions field value if set, zero value otherwise.
func (o *NewAttribute) GetAllowedSubscriptions() []string {
	if o == nil || o.AllowedSubscriptions == nil {
		var ret []string
		return ret
	}
	return o.AllowedSubscriptions
}

// GetAllowedSubscriptionsOk returns a tuple with the AllowedSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewAttribute) GetAllowedSubscriptionsOk() ([]string, bool) {
	if o == nil || o.AllowedSubscriptions == nil {
		return nil, false
	}
	return o.AllowedSubscriptions, true
}

// HasAllowedSubscriptions returns a boolean if a field has been set.
func (o *NewAttribute) HasAllowedSubscriptions() bool {
	if o != nil && o.AllowedSubscriptions != nil {
		return true
	}

	return false
}

// SetAllowedSubscriptions gets a reference to the given []string and assigns it to the AllowedSubscriptions field.
func (o *NewAttribute) SetAllowedSubscriptions(v []string) {
	o.AllowedSubscriptions = v
}

func (o NewAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entity"] = o.Entity
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["suggestions"] = o.Suggestions
	}
	if o.HasAllowedList != nil {
		toSerialize["hasAllowedList"] = o.HasAllowedList
	}
	if o.RestrictedBySuggestions != nil {
		toSerialize["restrictedBySuggestions"] = o.RestrictedBySuggestions
	}
	if true {
		toSerialize["editable"] = o.Editable
	}
	if o.SubscribedApplicationsIds != nil {
		toSerialize["subscribedApplicationsIds"] = o.SubscribedApplicationsIds
	}
	if o.SubscribedCatalogsIds != nil {
		toSerialize["subscribedCatalogsIds"] = o.SubscribedCatalogsIds
	}
	if o.AllowedSubscriptions != nil {
		toSerialize["allowedSubscriptions"] = o.AllowedSubscriptions
	}
	return json.Marshal(toSerialize)
}

type NullableNewAttribute struct {
	value *NewAttribute
	isSet bool
}

func (v NullableNewAttribute) Get() *NewAttribute {
	return v.value
}

func (v *NullableNewAttribute) Set(val *NewAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableNewAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableNewAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewAttribute(val *NewAttribute) *NullableNewAttribute {
	return &NullableNewAttribute{value: val, isSet: true}
}

func (v NullableNewAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


