/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// ApplicationSession 
type ApplicationSession struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created. The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The ID of the application that owns this entity.
	ApplicationId int32 `json:"applicationId"`
	// The globally unique Talon.One ID of the customer that created this entity.
	ProfileId *int32 `json:"profileId,omitempty"`
	// The integration ID set by your integration layer.
	IntegrationId string `json:"integrationId"`
	// Integration ID of the customer for the session.
	Profileintegrationid *string `json:"profileintegrationid,omitempty"`
	// Any coupon code entered.
	Coupon string `json:"coupon"`
	// Any referral code entered.
	Referral string `json:"referral"`
	// Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:  1. `open` → `closed` 2. `open` → `cancelled` 3. `closed` → `cancelled` or `partially_returned` 4. `partially_returned` → `cancelled`  For more information, see [Customer session states](/docs/dev/concepts/entities#customer-session). 
	State string `json:"state"`
	// Serialized JSON representation.
	CartItems []CartItem `json:"cartItems"`
	// **API V1 only.** A map of labeled discount values, in the same currency as the session.  If you are using the V2 endpoints, refer to the `totalDiscounts` property instead. 
	Discounts map[string]float32 `json:"discounts"`
	// The total sum of the discounts applied to this session.
	TotalDiscounts float32 `json:"totalDiscounts"`
	// The total sum of the session before any discounts applied.
	Total float32 `json:"total"`
	// Arbitrary properties associated with this item.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

// NewApplicationSession instantiates a new ApplicationSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSession(id int32, created time.Time, applicationId int32, integrationId string, coupon string, referral string, state string, cartItems []CartItem, discounts map[string]float32, totalDiscounts float32, total float32) *ApplicationSession {
	this := ApplicationSession{}
	this.Id = id
	this.Created = created
	this.ApplicationId = applicationId
	this.IntegrationId = integrationId
	this.Coupon = coupon
	this.Referral = referral
	this.State = state
	this.CartItems = cartItems
	this.Discounts = discounts
	this.TotalDiscounts = totalDiscounts
	this.Total = total
	return &this
}

// NewApplicationSessionWithDefaults instantiates a new ApplicationSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSessionWithDefaults() *ApplicationSession {
	this := ApplicationSession{}
	return &this
}

// GetId returns the Id field value
func (o *ApplicationSession) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationSession) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *ApplicationSession) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ApplicationSession) SetCreated(v time.Time) {
	o.Created = v
}

// GetApplicationId returns the ApplicationId field value
func (o *ApplicationSession) GetApplicationId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetApplicationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *ApplicationSession) SetApplicationId(v int32) {
	o.ApplicationId = v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ApplicationSession) GetProfileId() int32 {
	if o == nil || o.ProfileId == nil {
		var ret int32
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetProfileIdOk() (*int32, bool) {
	if o == nil || o.ProfileId == nil {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ApplicationSession) HasProfileId() bool {
	if o != nil && o.ProfileId != nil {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given int32 and assigns it to the ProfileId field.
func (o *ApplicationSession) SetProfileId(v int32) {
	o.ProfileId = &v
}

// GetIntegrationId returns the IntegrationId field value
func (o *ApplicationSession) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *ApplicationSession) SetIntegrationId(v string) {
	o.IntegrationId = v
}

// GetProfileintegrationid returns the Profileintegrationid field value if set, zero value otherwise.
func (o *ApplicationSession) GetProfileintegrationid() string {
	if o == nil || o.Profileintegrationid == nil {
		var ret string
		return ret
	}
	return *o.Profileintegrationid
}

// GetProfileintegrationidOk returns a tuple with the Profileintegrationid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetProfileintegrationidOk() (*string, bool) {
	if o == nil || o.Profileintegrationid == nil {
		return nil, false
	}
	return o.Profileintegrationid, true
}

// HasProfileintegrationid returns a boolean if a field has been set.
func (o *ApplicationSession) HasProfileintegrationid() bool {
	if o != nil && o.Profileintegrationid != nil {
		return true
	}

	return false
}

// SetProfileintegrationid gets a reference to the given string and assigns it to the Profileintegrationid field.
func (o *ApplicationSession) SetProfileintegrationid(v string) {
	o.Profileintegrationid = &v
}

// GetCoupon returns the Coupon field value
func (o *ApplicationSession) GetCoupon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Coupon
}

// GetCouponOk returns a tuple with the Coupon field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetCouponOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Coupon, true
}

// SetCoupon sets field value
func (o *ApplicationSession) SetCoupon(v string) {
	o.Coupon = v
}

// GetReferral returns the Referral field value
func (o *ApplicationSession) GetReferral() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Referral
}

// GetReferralOk returns a tuple with the Referral field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetReferralOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Referral, true
}

// SetReferral sets field value
func (o *ApplicationSession) SetReferral(v string) {
	o.Referral = v
}

// GetState returns the State field value
func (o *ApplicationSession) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ApplicationSession) SetState(v string) {
	o.State = v
}

// GetCartItems returns the CartItems field value
func (o *ApplicationSession) GetCartItems() []CartItem {
	if o == nil {
		var ret []CartItem
		return ret
	}

	return o.CartItems
}

// GetCartItemsOk returns a tuple with the CartItems field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetCartItemsOk() ([]CartItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.CartItems, true
}

// SetCartItems sets field value
func (o *ApplicationSession) SetCartItems(v []CartItem) {
	o.CartItems = v
}

// GetDiscounts returns the Discounts field value
func (o *ApplicationSession) GetDiscounts() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetDiscountsOk() (*map[string]float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discounts, true
}

// SetDiscounts sets field value
func (o *ApplicationSession) SetDiscounts(v map[string]float32) {
	o.Discounts = v
}

// GetTotalDiscounts returns the TotalDiscounts field value
func (o *ApplicationSession) GetTotalDiscounts() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalDiscounts
}

// GetTotalDiscountsOk returns a tuple with the TotalDiscounts field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetTotalDiscountsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDiscounts, true
}

// SetTotalDiscounts sets field value
func (o *ApplicationSession) SetTotalDiscounts(v float32) {
	o.TotalDiscounts = v
}

// GetTotal returns the Total field value
func (o *ApplicationSession) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ApplicationSession) SetTotal(v float32) {
	o.Total = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ApplicationSession) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSession) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ApplicationSession) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *ApplicationSession) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o ApplicationSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if o.ProfileId != nil {
		toSerialize["profileId"] = o.ProfileId
	}
	if true {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if o.Profileintegrationid != nil {
		toSerialize["profileintegrationid"] = o.Profileintegrationid
	}
	if true {
		toSerialize["coupon"] = o.Coupon
	}
	if true {
		toSerialize["referral"] = o.Referral
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["cartItems"] = o.CartItems
	}
	if true {
		toSerialize["discounts"] = o.Discounts
	}
	if true {
		toSerialize["totalDiscounts"] = o.TotalDiscounts
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationSession struct {
	value *ApplicationSession
	isSet bool
}

func (v NullableApplicationSession) Get() *ApplicationSession {
	return v.value
}

func (v *NullableApplicationSession) Set(val *ApplicationSession) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSession) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSession(val *ApplicationSession) *NullableApplicationSession {
	return &NullableApplicationSession{value: val, isSet: true}
}

func (v NullableApplicationSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


