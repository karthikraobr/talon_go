/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// ReturnedCartItem struct for ReturnedCartItem
type ReturnedCartItem struct {
	// The index of the cart item in the provided customer session's `cartItems` property.
	Position int32 `json:"position"`
	// Number of cart items to return. It is only available when [cart item flattening](https://docs.talon.one/docs/product/campaigns/campaign-evaluation/#flattened-cart-items) is enabled. If cart item flattening is disabled, the cart item can only be returned in its entirety. 
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewReturnedCartItem instantiates a new ReturnedCartItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReturnedCartItem(position int32) *ReturnedCartItem {
	this := ReturnedCartItem{}
	this.Position = position
	return &this
}

// NewReturnedCartItemWithDefaults instantiates a new ReturnedCartItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReturnedCartItemWithDefaults() *ReturnedCartItem {
	this := ReturnedCartItem{}
	return &this
}

// GetPosition returns the Position field value
func (o *ReturnedCartItem) GetPosition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *ReturnedCartItem) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *ReturnedCartItem) SetPosition(v int32) {
	o.Position = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ReturnedCartItem) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReturnedCartItem) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ReturnedCartItem) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ReturnedCartItem) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o ReturnedCartItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["position"] = o.Position
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableReturnedCartItem struct {
	value *ReturnedCartItem
	isSet bool
}

func (v NullableReturnedCartItem) Get() *ReturnedCartItem {
	return v.value
}

func (v *NullableReturnedCartItem) Set(val *ReturnedCartItem) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnedCartItem) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnedCartItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnedCartItem(val *ReturnedCartItem) *NullableReturnedCartItem {
	return &NullableReturnedCartItem{value: val, isSet: true}
}

func (v NullableReturnedCartItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnedCartItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


