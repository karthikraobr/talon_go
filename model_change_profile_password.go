/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// ChangeProfilePassword struct for ChangeProfilePassword
type ChangeProfilePassword struct {
	// Your old password.
	Password string `json:"password"`
	// Your new password.
	NewPassword string `json:"newPassword"`
}

// NewChangeProfilePassword instantiates a new ChangeProfilePassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeProfilePassword(password string, newPassword string) *ChangeProfilePassword {
	this := ChangeProfilePassword{}
	this.Password = password
	this.NewPassword = newPassword
	return &this
}

// NewChangeProfilePasswordWithDefaults instantiates a new ChangeProfilePassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeProfilePasswordWithDefaults() *ChangeProfilePassword {
	this := ChangeProfilePassword{}
	return &this
}

// GetPassword returns the Password field value
func (o *ChangeProfilePassword) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *ChangeProfilePassword) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *ChangeProfilePassword) SetPassword(v string) {
	o.Password = v
}

// GetNewPassword returns the NewPassword field value
func (o *ChangeProfilePassword) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *ChangeProfilePassword) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *ChangeProfilePassword) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o ChangeProfilePassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["newPassword"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullableChangeProfilePassword struct {
	value *ChangeProfilePassword
	isSet bool
}

func (v NullableChangeProfilePassword) Get() *ChangeProfilePassword {
	return v.value
}

func (v *NullableChangeProfilePassword) Set(val *ChangeProfilePassword) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeProfilePassword) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeProfilePassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeProfilePassword(val *ChangeProfilePassword) *NullableChangeProfilePassword {
	return &NullableChangeProfilePassword{value: val, isSet: true}
}

func (v NullableChangeProfilePassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeProfilePassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


