/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// LoyaltyProgramLedgers Customer specific information about loyalty points.
type LoyaltyProgramLedgers struct {
	// The internal ID of loyalty program.
	Id int32 `json:"id"`
	// Visible name of loyalty program.
	Title string `json:"title"`
	// Internal name of loyalty program.
	Name string `json:"name"`
	Ledger LedgerInfo `json:"ledger"`
	// A map containing information about each loyalty subledger.
	SubLedgers *map[string]LedgerInfo `json:"subLedgers,omitempty"`
}

// NewLoyaltyProgramLedgers instantiates a new LoyaltyProgramLedgers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyProgramLedgers(id int32, title string, name string, ledger LedgerInfo) *LoyaltyProgramLedgers {
	this := LoyaltyProgramLedgers{}
	this.Id = id
	this.Title = title
	this.Name = name
	this.Ledger = ledger
	return &this
}

// NewLoyaltyProgramLedgersWithDefaults instantiates a new LoyaltyProgramLedgers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyProgramLedgersWithDefaults() *LoyaltyProgramLedgers {
	this := LoyaltyProgramLedgers{}
	return &this
}

// GetId returns the Id field value
func (o *LoyaltyProgramLedgers) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramLedgers) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LoyaltyProgramLedgers) SetId(v int32) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *LoyaltyProgramLedgers) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramLedgers) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *LoyaltyProgramLedgers) SetTitle(v string) {
	o.Title = v
}

// GetName returns the Name field value
func (o *LoyaltyProgramLedgers) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramLedgers) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LoyaltyProgramLedgers) SetName(v string) {
	o.Name = v
}

// GetLedger returns the Ledger field value
func (o *LoyaltyProgramLedgers) GetLedger() LedgerInfo {
	if o == nil {
		var ret LedgerInfo
		return ret
	}

	return o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramLedgers) GetLedgerOk() (*LedgerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ledger, true
}

// SetLedger sets field value
func (o *LoyaltyProgramLedgers) SetLedger(v LedgerInfo) {
	o.Ledger = v
}

// GetSubLedgers returns the SubLedgers field value if set, zero value otherwise.
func (o *LoyaltyProgramLedgers) GetSubLedgers() map[string]LedgerInfo {
	if o == nil || o.SubLedgers == nil {
		var ret map[string]LedgerInfo
		return ret
	}
	return *o.SubLedgers
}

// GetSubLedgersOk returns a tuple with the SubLedgers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyProgramLedgers) GetSubLedgersOk() (*map[string]LedgerInfo, bool) {
	if o == nil || o.SubLedgers == nil {
		return nil, false
	}
	return o.SubLedgers, true
}

// HasSubLedgers returns a boolean if a field has been set.
func (o *LoyaltyProgramLedgers) HasSubLedgers() bool {
	if o != nil && o.SubLedgers != nil {
		return true
	}

	return false
}

// SetSubLedgers gets a reference to the given map[string]LedgerInfo and assigns it to the SubLedgers field.
func (o *LoyaltyProgramLedgers) SetSubLedgers(v map[string]LedgerInfo) {
	o.SubLedgers = &v
}

func (o LoyaltyProgramLedgers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["ledger"] = o.Ledger
	}
	if o.SubLedgers != nil {
		toSerialize["subLedgers"] = o.SubLedgers
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyProgramLedgers struct {
	value *LoyaltyProgramLedgers
	isSet bool
}

func (v NullableLoyaltyProgramLedgers) Get() *LoyaltyProgramLedgers {
	return v.value
}

func (v *NullableLoyaltyProgramLedgers) Set(val *LoyaltyProgramLedgers) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyProgramLedgers) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyProgramLedgers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyProgramLedgers(val *LoyaltyProgramLedgers) *NullableLoyaltyProgramLedgers {
	return &NullableLoyaltyProgramLedgers{value: val, isSet: true}
}

func (v NullableLoyaltyProgramLedgers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyProgramLedgers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


