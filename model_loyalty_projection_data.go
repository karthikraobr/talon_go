/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// LoyaltyProjectionData struct for LoyaltyProjectionData
type LoyaltyProjectionData struct {
	// Specific date of projection.
	Date time.Time `json:"date"`
	// Points that will be expired by the specified date.
	ExpiringPoints float32 `json:"expiringPoints"`
	// Points that will be active by the specified date.
	ActivatingPoints float32 `json:"activatingPoints"`
	// Current balance plus projected active points, minus expiring points.
	ProjectedBalance float32 `json:"projectedBalance"`
}

// NewLoyaltyProjectionData instantiates a new LoyaltyProjectionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyProjectionData(date time.Time, expiringPoints float32, activatingPoints float32, projectedBalance float32) *LoyaltyProjectionData {
	this := LoyaltyProjectionData{}
	this.Date = date
	this.ExpiringPoints = expiringPoints
	this.ActivatingPoints = activatingPoints
	this.ProjectedBalance = projectedBalance
	return &this
}

// NewLoyaltyProjectionDataWithDefaults instantiates a new LoyaltyProjectionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyProjectionDataWithDefaults() *LoyaltyProjectionData {
	this := LoyaltyProjectionData{}
	return &this
}

// GetDate returns the Date field value
func (o *LoyaltyProjectionData) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProjectionData) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *LoyaltyProjectionData) SetDate(v time.Time) {
	o.Date = v
}

// GetExpiringPoints returns the ExpiringPoints field value
func (o *LoyaltyProjectionData) GetExpiringPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpiringPoints
}

// GetExpiringPointsOk returns a tuple with the ExpiringPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProjectionData) GetExpiringPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiringPoints, true
}

// SetExpiringPoints sets field value
func (o *LoyaltyProjectionData) SetExpiringPoints(v float32) {
	o.ExpiringPoints = v
}

// GetActivatingPoints returns the ActivatingPoints field value
func (o *LoyaltyProjectionData) GetActivatingPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ActivatingPoints
}

// GetActivatingPointsOk returns a tuple with the ActivatingPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProjectionData) GetActivatingPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivatingPoints, true
}

// SetActivatingPoints sets field value
func (o *LoyaltyProjectionData) SetActivatingPoints(v float32) {
	o.ActivatingPoints = v
}

// GetProjectedBalance returns the ProjectedBalance field value
func (o *LoyaltyProjectionData) GetProjectedBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectedBalance
}

// GetProjectedBalanceOk returns a tuple with the ProjectedBalance field value
// and a boolean to check if the value has been set.
func (o *LoyaltyProjectionData) GetProjectedBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectedBalance, true
}

// SetProjectedBalance sets field value
func (o *LoyaltyProjectionData) SetProjectedBalance(v float32) {
	o.ProjectedBalance = v
}

func (o LoyaltyProjectionData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["expiringPoints"] = o.ExpiringPoints
	}
	if true {
		toSerialize["activatingPoints"] = o.ActivatingPoints
	}
	if true {
		toSerialize["projectedBalance"] = o.ProjectedBalance
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyProjectionData struct {
	value *LoyaltyProjectionData
	isSet bool
}

func (v NullableLoyaltyProjectionData) Get() *LoyaltyProjectionData {
	return v.value
}

func (v *NullableLoyaltyProjectionData) Set(val *LoyaltyProjectionData) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyProjectionData) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyProjectionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyProjectionData(val *LoyaltyProjectionData) *NullableLoyaltyProjectionData {
	return &NullableLoyaltyProjectionData{value: val, isSet: true}
}

func (v NullableLoyaltyProjectionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyProjectionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


