/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CustomerInventory struct for CustomerInventory
type CustomerInventory struct {
	Profile *CustomerProfile `json:"profile,omitempty"`
	Loyalty *Loyalty `json:"loyalty,omitempty"`
	Referrals []InventoryReferral `json:"referrals,omitempty"`
	// The coupons reserved by this profile. This array includes hard and soft reservations. See each coupon's `reservation` property. 
	Coupons []InventoryCoupon `json:"coupons,omitempty"`
	Giveaways []Giveaway `json:"giveaways,omitempty"`
}

// NewCustomerInventory instantiates a new CustomerInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerInventory() *CustomerInventory {
	this := CustomerInventory{}
	return &this
}

// NewCustomerInventoryWithDefaults instantiates a new CustomerInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerInventoryWithDefaults() *CustomerInventory {
	this := CustomerInventory{}
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CustomerInventory) GetProfile() CustomerProfile {
	if o == nil || o.Profile == nil {
		var ret CustomerProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInventory) GetProfileOk() (*CustomerProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CustomerInventory) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given CustomerProfile and assigns it to the Profile field.
func (o *CustomerInventory) SetProfile(v CustomerProfile) {
	o.Profile = &v
}

// GetLoyalty returns the Loyalty field value if set, zero value otherwise.
func (o *CustomerInventory) GetLoyalty() Loyalty {
	if o == nil || o.Loyalty == nil {
		var ret Loyalty
		return ret
	}
	return *o.Loyalty
}

// GetLoyaltyOk returns a tuple with the Loyalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInventory) GetLoyaltyOk() (*Loyalty, bool) {
	if o == nil || o.Loyalty == nil {
		return nil, false
	}
	return o.Loyalty, true
}

// HasLoyalty returns a boolean if a field has been set.
func (o *CustomerInventory) HasLoyalty() bool {
	if o != nil && o.Loyalty != nil {
		return true
	}

	return false
}

// SetLoyalty gets a reference to the given Loyalty and assigns it to the Loyalty field.
func (o *CustomerInventory) SetLoyalty(v Loyalty) {
	o.Loyalty = &v
}

// GetReferrals returns the Referrals field value if set, zero value otherwise.
func (o *CustomerInventory) GetReferrals() []InventoryReferral {
	if o == nil || o.Referrals == nil {
		var ret []InventoryReferral
		return ret
	}
	return o.Referrals
}

// GetReferralsOk returns a tuple with the Referrals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInventory) GetReferralsOk() ([]InventoryReferral, bool) {
	if o == nil || o.Referrals == nil {
		return nil, false
	}
	return o.Referrals, true
}

// HasReferrals returns a boolean if a field has been set.
func (o *CustomerInventory) HasReferrals() bool {
	if o != nil && o.Referrals != nil {
		return true
	}

	return false
}

// SetReferrals gets a reference to the given []InventoryReferral and assigns it to the Referrals field.
func (o *CustomerInventory) SetReferrals(v []InventoryReferral) {
	o.Referrals = v
}

// GetCoupons returns the Coupons field value if set, zero value otherwise.
func (o *CustomerInventory) GetCoupons() []InventoryCoupon {
	if o == nil || o.Coupons == nil {
		var ret []InventoryCoupon
		return ret
	}
	return o.Coupons
}

// GetCouponsOk returns a tuple with the Coupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInventory) GetCouponsOk() ([]InventoryCoupon, bool) {
	if o == nil || o.Coupons == nil {
		return nil, false
	}
	return o.Coupons, true
}

// HasCoupons returns a boolean if a field has been set.
func (o *CustomerInventory) HasCoupons() bool {
	if o != nil && o.Coupons != nil {
		return true
	}

	return false
}

// SetCoupons gets a reference to the given []InventoryCoupon and assigns it to the Coupons field.
func (o *CustomerInventory) SetCoupons(v []InventoryCoupon) {
	o.Coupons = v
}

// GetGiveaways returns the Giveaways field value if set, zero value otherwise.
func (o *CustomerInventory) GetGiveaways() []Giveaway {
	if o == nil || o.Giveaways == nil {
		var ret []Giveaway
		return ret
	}
	return o.Giveaways
}

// GetGiveawaysOk returns a tuple with the Giveaways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInventory) GetGiveawaysOk() ([]Giveaway, bool) {
	if o == nil || o.Giveaways == nil {
		return nil, false
	}
	return o.Giveaways, true
}

// HasGiveaways returns a boolean if a field has been set.
func (o *CustomerInventory) HasGiveaways() bool {
	if o != nil && o.Giveaways != nil {
		return true
	}

	return false
}

// SetGiveaways gets a reference to the given []Giveaway and assigns it to the Giveaways field.
func (o *CustomerInventory) SetGiveaways(v []Giveaway) {
	o.Giveaways = v
}

func (o CustomerInventory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.Loyalty != nil {
		toSerialize["loyalty"] = o.Loyalty
	}
	if o.Referrals != nil {
		toSerialize["referrals"] = o.Referrals
	}
	if o.Coupons != nil {
		toSerialize["coupons"] = o.Coupons
	}
	if o.Giveaways != nil {
		toSerialize["giveaways"] = o.Giveaways
	}
	return json.Marshal(toSerialize)
}

type NullableCustomerInventory struct {
	value *CustomerInventory
	isSet bool
}

func (v NullableCustomerInventory) Get() *CustomerInventory {
	return v.value
}

func (v *NullableCustomerInventory) Set(val *CustomerInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerInventory(val *CustomerInventory) *NullableCustomerInventory {
	return &NullableCustomerInventory{value: val, isSet: true}
}

func (v NullableCustomerInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


