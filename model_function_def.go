/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// FunctionDef struct for FunctionDef
type FunctionDef struct {
	// The function name used in Talang.
	Name string `json:"name"`
	// The type of this function argument.
	Type string `json:"type"`
	// A short description of the function.
	Description *string `json:"description,omitempty"`
	// Extended help text for the function.
	Help *string `json:"help,omitempty"`
	// An array of argument definitions.
	Args []FuncArgDef `json:"args"`
}

// NewFunctionDef instantiates a new FunctionDef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionDef(name string, type_ string, args []FuncArgDef) *FunctionDef {
	this := FunctionDef{}
	this.Name = name
	this.Type = type_
	this.Args = args
	return &this
}

// NewFunctionDefWithDefaults instantiates a new FunctionDef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionDefWithDefaults() *FunctionDef {
	this := FunctionDef{}
	return &this
}

// GetName returns the Name field value
func (o *FunctionDef) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FunctionDef) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FunctionDef) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *FunctionDef) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FunctionDef) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FunctionDef) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FunctionDef) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDef) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FunctionDef) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FunctionDef) SetDescription(v string) {
	o.Description = &v
}

// GetHelp returns the Help field value if set, zero value otherwise.
func (o *FunctionDef) GetHelp() string {
	if o == nil || o.Help == nil {
		var ret string
		return ret
	}
	return *o.Help
}

// GetHelpOk returns a tuple with the Help field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionDef) GetHelpOk() (*string, bool) {
	if o == nil || o.Help == nil {
		return nil, false
	}
	return o.Help, true
}

// HasHelp returns a boolean if a field has been set.
func (o *FunctionDef) HasHelp() bool {
	if o != nil && o.Help != nil {
		return true
	}

	return false
}

// SetHelp gets a reference to the given string and assigns it to the Help field.
func (o *FunctionDef) SetHelp(v string) {
	o.Help = &v
}

// GetArgs returns the Args field value
func (o *FunctionDef) GetArgs() []FuncArgDef {
	if o == nil {
		var ret []FuncArgDef
		return ret
	}

	return o.Args
}

// GetArgsOk returns a tuple with the Args field value
// and a boolean to check if the value has been set.
func (o *FunctionDef) GetArgsOk() ([]FuncArgDef, bool) {
	if o == nil {
		return nil, false
	}
	return o.Args, true
}

// SetArgs sets field value
func (o *FunctionDef) SetArgs(v []FuncArgDef) {
	o.Args = v
}

func (o FunctionDef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Help != nil {
		toSerialize["help"] = o.Help
	}
	if true {
		toSerialize["args"] = o.Args
	}
	return json.Marshal(toSerialize)
}

type NullableFunctionDef struct {
	value *FunctionDef
	isSet bool
}

func (v NullableFunctionDef) Get() *FunctionDef {
	return v.value
}

func (v *NullableFunctionDef) Set(val *FunctionDef) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionDef) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionDef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionDef(val *FunctionDef) *NullableFunctionDef {
	return &NullableFunctionDef{value: val, isSet: true}
}

func (v NullableFunctionDef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionDef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


