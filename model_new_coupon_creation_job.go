/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// NewCouponCreationJob 
type NewCouponCreationJob struct {
	// The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply. 
	UsageLimit int32 `json:"usageLimit"`
	// The amount of discounts that can be given with this coupon code. 
	DiscountLimit *float32 `json:"discountLimit,omitempty"`
	// Timestamp at which point the coupon becomes valid.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	// The number of new coupon codes to generate for the campaign. Must be between 20,001 and 5,000,000.
	NumberOfCoupons int32 `json:"numberOfCoupons"`
	CouponSettings *CodeGeneratorSettings `json:"couponSettings,omitempty"`
	// Arbitrary properties associated with coupons.
	Attributes map[string]interface{} `json:"attributes"`
}

// NewNewCouponCreationJob instantiates a new NewCouponCreationJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewCouponCreationJob(usageLimit int32, numberOfCoupons int32, attributes map[string]interface{}) *NewCouponCreationJob {
	this := NewCouponCreationJob{}
	this.UsageLimit = usageLimit
	this.NumberOfCoupons = numberOfCoupons
	this.Attributes = attributes
	return &this
}

// NewNewCouponCreationJobWithDefaults instantiates a new NewCouponCreationJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewCouponCreationJobWithDefaults() *NewCouponCreationJob {
	this := NewCouponCreationJob{}
	return &this
}

// GetUsageLimit returns the UsageLimit field value
func (o *NewCouponCreationJob) GetUsageLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetUsageLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageLimit, true
}

// SetUsageLimit sets field value
func (o *NewCouponCreationJob) SetUsageLimit(v int32) {
	o.UsageLimit = v
}

// GetDiscountLimit returns the DiscountLimit field value if set, zero value otherwise.
func (o *NewCouponCreationJob) GetDiscountLimit() float32 {
	if o == nil || o.DiscountLimit == nil {
		var ret float32
		return ret
	}
	return *o.DiscountLimit
}

// GetDiscountLimitOk returns a tuple with the DiscountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetDiscountLimitOk() (*float32, bool) {
	if o == nil || o.DiscountLimit == nil {
		return nil, false
	}
	return o.DiscountLimit, true
}

// HasDiscountLimit returns a boolean if a field has been set.
func (o *NewCouponCreationJob) HasDiscountLimit() bool {
	if o != nil && o.DiscountLimit != nil {
		return true
	}

	return false
}

// SetDiscountLimit gets a reference to the given float32 and assigns it to the DiscountLimit field.
func (o *NewCouponCreationJob) SetDiscountLimit(v float32) {
	o.DiscountLimit = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *NewCouponCreationJob) GetStartDate() time.Time {
	if o == nil || o.StartDate == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetStartDateOk() (*time.Time, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *NewCouponCreationJob) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *NewCouponCreationJob) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *NewCouponCreationJob) GetExpiryDate() time.Time {
	if o == nil || o.ExpiryDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil || o.ExpiryDate == nil {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *NewCouponCreationJob) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate != nil {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *NewCouponCreationJob) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetNumberOfCoupons returns the NumberOfCoupons field value
func (o *NewCouponCreationJob) GetNumberOfCoupons() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfCoupons
}

// GetNumberOfCouponsOk returns a tuple with the NumberOfCoupons field value
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetNumberOfCouponsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfCoupons, true
}

// SetNumberOfCoupons sets field value
func (o *NewCouponCreationJob) SetNumberOfCoupons(v int32) {
	o.NumberOfCoupons = v
}

// GetCouponSettings returns the CouponSettings field value if set, zero value otherwise.
func (o *NewCouponCreationJob) GetCouponSettings() CodeGeneratorSettings {
	if o == nil || o.CouponSettings == nil {
		var ret CodeGeneratorSettings
		return ret
	}
	return *o.CouponSettings
}

// GetCouponSettingsOk returns a tuple with the CouponSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetCouponSettingsOk() (*CodeGeneratorSettings, bool) {
	if o == nil || o.CouponSettings == nil {
		return nil, false
	}
	return o.CouponSettings, true
}

// HasCouponSettings returns a boolean if a field has been set.
func (o *NewCouponCreationJob) HasCouponSettings() bool {
	if o != nil && o.CouponSettings != nil {
		return true
	}

	return false
}

// SetCouponSettings gets a reference to the given CodeGeneratorSettings and assigns it to the CouponSettings field.
func (o *NewCouponCreationJob) SetCouponSettings(v CodeGeneratorSettings) {
	o.CouponSettings = &v
}

// GetAttributes returns the Attributes field value
func (o *NewCouponCreationJob) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *NewCouponCreationJob) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *NewCouponCreationJob) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o NewCouponCreationJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["usageLimit"] = o.UsageLimit
	}
	if o.DiscountLimit != nil {
		toSerialize["discountLimit"] = o.DiscountLimit
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.ExpiryDate != nil {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if true {
		toSerialize["numberOfCoupons"] = o.NumberOfCoupons
	}
	if o.CouponSettings != nil {
		toSerialize["couponSettings"] = o.CouponSettings
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableNewCouponCreationJob struct {
	value *NewCouponCreationJob
	isSet bool
}

func (v NullableNewCouponCreationJob) Get() *NewCouponCreationJob {
	return v.value
}

func (v *NullableNewCouponCreationJob) Set(val *NewCouponCreationJob) {
	v.value = val
	v.isSet = true
}

func (v NullableNewCouponCreationJob) IsSet() bool {
	return v.isSet
}

func (v *NullableNewCouponCreationJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewCouponCreationJob(val *NewCouponCreationJob) *NullableNewCouponCreationJob {
	return &NullableNewCouponCreationJob{value: val, isSet: true}
}

func (v NullableNewCouponCreationJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewCouponCreationJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


