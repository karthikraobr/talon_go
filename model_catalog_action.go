/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CatalogAction Definition of all the properties that are needed for a single catalog sync action.
type CatalogAction struct {
	// The type of sync action.
	Type string `json:"type"`
	Payload map[string]interface{} `json:"payload"`
}

// NewCatalogAction instantiates a new CatalogAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogAction(type_ string, payload map[string]interface{}) *CatalogAction {
	this := CatalogAction{}
	this.Type = type_
	this.Payload = payload
	return &this
}

// NewCatalogActionWithDefaults instantiates a new CatalogAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogActionWithDefaults() *CatalogAction {
	this := CatalogAction{}
	return &this
}

// GetType returns the Type field value
func (o *CatalogAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogAction) SetType(v string) {
	o.Type = v
}

// GetPayload returns the Payload field value
func (o *CatalogAction) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *CatalogAction) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *CatalogAction) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o CatalogAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogAction struct {
	value *CatalogAction
	isSet bool
}

func (v NullableCatalogAction) Get() *CatalogAction {
	return v.value
}

func (v *NullableCatalogAction) Set(val *CatalogAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogAction(val *CatalogAction) *NullableCatalogAction {
	return &NullableCatalogAction{value: val, isSet: true}
}

func (v NullableCatalogAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


