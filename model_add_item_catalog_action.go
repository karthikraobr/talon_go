/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// AddItemCatalogAction The specific properties of the \"ADD\" catalog sync action.
type AddItemCatalogAction struct {
	// The unique SKU of the item to add.
	Sku string `json:"sku"`
	// Price of the item.
	Price *float32 `json:"price,omitempty"`
	// The attributes of the item to add.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// Indicates whether to replace the attributes of the item if the same SKU exists.
	ReplaceIfExists *bool `json:"replaceIfExists,omitempty"`
}

// NewAddItemCatalogAction instantiates a new AddItemCatalogAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddItemCatalogAction(sku string) *AddItemCatalogAction {
	this := AddItemCatalogAction{}
	this.Sku = sku
	var replaceIfExists bool = false
	this.ReplaceIfExists = &replaceIfExists
	return &this
}

// NewAddItemCatalogActionWithDefaults instantiates a new AddItemCatalogAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddItemCatalogActionWithDefaults() *AddItemCatalogAction {
	this := AddItemCatalogAction{}
	var replaceIfExists bool = false
	this.ReplaceIfExists = &replaceIfExists
	return &this
}

// GetSku returns the Sku field value
func (o *AddItemCatalogAction) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *AddItemCatalogAction) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *AddItemCatalogAction) SetSku(v string) {
	o.Sku = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AddItemCatalogAction) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddItemCatalogAction) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AddItemCatalogAction) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *AddItemCatalogAction) SetPrice(v float32) {
	o.Price = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AddItemCatalogAction) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddItemCatalogAction) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AddItemCatalogAction) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *AddItemCatalogAction) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetReplaceIfExists returns the ReplaceIfExists field value if set, zero value otherwise.
func (o *AddItemCatalogAction) GetReplaceIfExists() bool {
	if o == nil || o.ReplaceIfExists == nil {
		var ret bool
		return ret
	}
	return *o.ReplaceIfExists
}

// GetReplaceIfExistsOk returns a tuple with the ReplaceIfExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddItemCatalogAction) GetReplaceIfExistsOk() (*bool, bool) {
	if o == nil || o.ReplaceIfExists == nil {
		return nil, false
	}
	return o.ReplaceIfExists, true
}

// HasReplaceIfExists returns a boolean if a field has been set.
func (o *AddItemCatalogAction) HasReplaceIfExists() bool {
	if o != nil && o.ReplaceIfExists != nil {
		return true
	}

	return false
}

// SetReplaceIfExists gets a reference to the given bool and assigns it to the ReplaceIfExists field.
func (o *AddItemCatalogAction) SetReplaceIfExists(v bool) {
	o.ReplaceIfExists = &v
}

func (o AddItemCatalogAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sku"] = o.Sku
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.ReplaceIfExists != nil {
		toSerialize["replaceIfExists"] = o.ReplaceIfExists
	}
	return json.Marshal(toSerialize)
}

type NullableAddItemCatalogAction struct {
	value *AddItemCatalogAction
	isSet bool
}

func (v NullableAddItemCatalogAction) Get() *AddItemCatalogAction {
	return v.value
}

func (v *NullableAddItemCatalogAction) Set(val *AddItemCatalogAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAddItemCatalogAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAddItemCatalogAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddItemCatalogAction(val *AddItemCatalogAction) *NullableAddItemCatalogAction {
	return &NullableAddItemCatalogAction{value: val, isSet: true}
}

func (v NullableAddItemCatalogAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddItemCatalogAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


