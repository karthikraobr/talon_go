/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// IntegrationStateV2 Contains all entities that might interest Talon.One integrations. This is the response type returned by the V2 PUT customer_session endpoint 
type IntegrationStateV2 struct {
	CustomerSession *CustomerSessionV2 `json:"customerSession,omitempty"`
	CustomerProfile *CustomerProfile `json:"customerProfile,omitempty"`
	Event *Event `json:"event,omitempty"`
	Loyalty *Loyalty `json:"loyalty,omitempty"`
	Referral *InventoryReferral `json:"referral,omitempty"`
	Coupons []Coupon `json:"coupons,omitempty"`
	TriggeredCampaigns []Campaign `json:"triggeredCampaigns,omitempty"`
	Effects []Effect `json:"effects"`
	RuleFailureReasons []RuleFailureReason `json:"ruleFailureReasons,omitempty"`
	CreatedCoupons []Coupon `json:"createdCoupons"`
	CreatedReferrals []Referral `json:"createdReferrals"`
	AwardedGiveaways []Giveaway `json:"awardedGiveaways,omitempty"`
	Return *Return `json:"return,omitempty"`
	PreviousReturns []Return `json:"previousReturns,omitempty"`
}

// NewIntegrationStateV2 instantiates a new IntegrationStateV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationStateV2(effects []Effect, createdCoupons []Coupon, createdReferrals []Referral) *IntegrationStateV2 {
	this := IntegrationStateV2{}
	this.Effects = effects
	this.CreatedCoupons = createdCoupons
	this.CreatedReferrals = createdReferrals
	return &this
}

// NewIntegrationStateV2WithDefaults instantiates a new IntegrationStateV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationStateV2WithDefaults() *IntegrationStateV2 {
	this := IntegrationStateV2{}
	return &this
}

// GetCustomerSession returns the CustomerSession field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetCustomerSession() CustomerSessionV2 {
	if o == nil || o.CustomerSession == nil {
		var ret CustomerSessionV2
		return ret
	}
	return *o.CustomerSession
}

// GetCustomerSessionOk returns a tuple with the CustomerSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetCustomerSessionOk() (*CustomerSessionV2, bool) {
	if o == nil || o.CustomerSession == nil {
		return nil, false
	}
	return o.CustomerSession, true
}

// HasCustomerSession returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasCustomerSession() bool {
	if o != nil && o.CustomerSession != nil {
		return true
	}

	return false
}

// SetCustomerSession gets a reference to the given CustomerSessionV2 and assigns it to the CustomerSession field.
func (o *IntegrationStateV2) SetCustomerSession(v CustomerSessionV2) {
	o.CustomerSession = &v
}

// GetCustomerProfile returns the CustomerProfile field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetCustomerProfile() CustomerProfile {
	if o == nil || o.CustomerProfile == nil {
		var ret CustomerProfile
		return ret
	}
	return *o.CustomerProfile
}

// GetCustomerProfileOk returns a tuple with the CustomerProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetCustomerProfileOk() (*CustomerProfile, bool) {
	if o == nil || o.CustomerProfile == nil {
		return nil, false
	}
	return o.CustomerProfile, true
}

// HasCustomerProfile returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasCustomerProfile() bool {
	if o != nil && o.CustomerProfile != nil {
		return true
	}

	return false
}

// SetCustomerProfile gets a reference to the given CustomerProfile and assigns it to the CustomerProfile field.
func (o *IntegrationStateV2) SetCustomerProfile(v CustomerProfile) {
	o.CustomerProfile = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetEvent() Event {
	if o == nil || o.Event == nil {
		var ret Event
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetEventOk() (*Event, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given Event and assigns it to the Event field.
func (o *IntegrationStateV2) SetEvent(v Event) {
	o.Event = &v
}

// GetLoyalty returns the Loyalty field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetLoyalty() Loyalty {
	if o == nil || o.Loyalty == nil {
		var ret Loyalty
		return ret
	}
	return *o.Loyalty
}

// GetLoyaltyOk returns a tuple with the Loyalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetLoyaltyOk() (*Loyalty, bool) {
	if o == nil || o.Loyalty == nil {
		return nil, false
	}
	return o.Loyalty, true
}

// HasLoyalty returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasLoyalty() bool {
	if o != nil && o.Loyalty != nil {
		return true
	}

	return false
}

// SetLoyalty gets a reference to the given Loyalty and assigns it to the Loyalty field.
func (o *IntegrationStateV2) SetLoyalty(v Loyalty) {
	o.Loyalty = &v
}

// GetReferral returns the Referral field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetReferral() InventoryReferral {
	if o == nil || o.Referral == nil {
		var ret InventoryReferral
		return ret
	}
	return *o.Referral
}

// GetReferralOk returns a tuple with the Referral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetReferralOk() (*InventoryReferral, bool) {
	if o == nil || o.Referral == nil {
		return nil, false
	}
	return o.Referral, true
}

// HasReferral returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasReferral() bool {
	if o != nil && o.Referral != nil {
		return true
	}

	return false
}

// SetReferral gets a reference to the given InventoryReferral and assigns it to the Referral field.
func (o *IntegrationStateV2) SetReferral(v InventoryReferral) {
	o.Referral = &v
}

// GetCoupons returns the Coupons field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetCoupons() []Coupon {
	if o == nil || o.Coupons == nil {
		var ret []Coupon
		return ret
	}
	return o.Coupons
}

// GetCouponsOk returns a tuple with the Coupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetCouponsOk() ([]Coupon, bool) {
	if o == nil || o.Coupons == nil {
		return nil, false
	}
	return o.Coupons, true
}

// HasCoupons returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasCoupons() bool {
	if o != nil && o.Coupons != nil {
		return true
	}

	return false
}

// SetCoupons gets a reference to the given []Coupon and assigns it to the Coupons field.
func (o *IntegrationStateV2) SetCoupons(v []Coupon) {
	o.Coupons = v
}

// GetTriggeredCampaigns returns the TriggeredCampaigns field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetTriggeredCampaigns() []Campaign {
	if o == nil || o.TriggeredCampaigns == nil {
		var ret []Campaign
		return ret
	}
	return o.TriggeredCampaigns
}

// GetTriggeredCampaignsOk returns a tuple with the TriggeredCampaigns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetTriggeredCampaignsOk() ([]Campaign, bool) {
	if o == nil || o.TriggeredCampaigns == nil {
		return nil, false
	}
	return o.TriggeredCampaigns, true
}

// HasTriggeredCampaigns returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasTriggeredCampaigns() bool {
	if o != nil && o.TriggeredCampaigns != nil {
		return true
	}

	return false
}

// SetTriggeredCampaigns gets a reference to the given []Campaign and assigns it to the TriggeredCampaigns field.
func (o *IntegrationStateV2) SetTriggeredCampaigns(v []Campaign) {
	o.TriggeredCampaigns = v
}

// GetEffects returns the Effects field value
func (o *IntegrationStateV2) GetEffects() []Effect {
	if o == nil {
		var ret []Effect
		return ret
	}

	return o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetEffectsOk() ([]Effect, bool) {
	if o == nil {
		return nil, false
	}
	return o.Effects, true
}

// SetEffects sets field value
func (o *IntegrationStateV2) SetEffects(v []Effect) {
	o.Effects = v
}

// GetRuleFailureReasons returns the RuleFailureReasons field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetRuleFailureReasons() []RuleFailureReason {
	if o == nil || o.RuleFailureReasons == nil {
		var ret []RuleFailureReason
		return ret
	}
	return o.RuleFailureReasons
}

// GetRuleFailureReasonsOk returns a tuple with the RuleFailureReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetRuleFailureReasonsOk() ([]RuleFailureReason, bool) {
	if o == nil || o.RuleFailureReasons == nil {
		return nil, false
	}
	return o.RuleFailureReasons, true
}

// HasRuleFailureReasons returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasRuleFailureReasons() bool {
	if o != nil && o.RuleFailureReasons != nil {
		return true
	}

	return false
}

// SetRuleFailureReasons gets a reference to the given []RuleFailureReason and assigns it to the RuleFailureReasons field.
func (o *IntegrationStateV2) SetRuleFailureReasons(v []RuleFailureReason) {
	o.RuleFailureReasons = v
}

// GetCreatedCoupons returns the CreatedCoupons field value
func (o *IntegrationStateV2) GetCreatedCoupons() []Coupon {
	if o == nil {
		var ret []Coupon
		return ret
	}

	return o.CreatedCoupons
}

// GetCreatedCouponsOk returns a tuple with the CreatedCoupons field value
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetCreatedCouponsOk() ([]Coupon, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedCoupons, true
}

// SetCreatedCoupons sets field value
func (o *IntegrationStateV2) SetCreatedCoupons(v []Coupon) {
	o.CreatedCoupons = v
}

// GetCreatedReferrals returns the CreatedReferrals field value
func (o *IntegrationStateV2) GetCreatedReferrals() []Referral {
	if o == nil {
		var ret []Referral
		return ret
	}

	return o.CreatedReferrals
}

// GetCreatedReferralsOk returns a tuple with the CreatedReferrals field value
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetCreatedReferralsOk() ([]Referral, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedReferrals, true
}

// SetCreatedReferrals sets field value
func (o *IntegrationStateV2) SetCreatedReferrals(v []Referral) {
	o.CreatedReferrals = v
}

// GetAwardedGiveaways returns the AwardedGiveaways field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetAwardedGiveaways() []Giveaway {
	if o == nil || o.AwardedGiveaways == nil {
		var ret []Giveaway
		return ret
	}
	return o.AwardedGiveaways
}

// GetAwardedGiveawaysOk returns a tuple with the AwardedGiveaways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetAwardedGiveawaysOk() ([]Giveaway, bool) {
	if o == nil || o.AwardedGiveaways == nil {
		return nil, false
	}
	return o.AwardedGiveaways, true
}

// HasAwardedGiveaways returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasAwardedGiveaways() bool {
	if o != nil && o.AwardedGiveaways != nil {
		return true
	}

	return false
}

// SetAwardedGiveaways gets a reference to the given []Giveaway and assigns it to the AwardedGiveaways field.
func (o *IntegrationStateV2) SetAwardedGiveaways(v []Giveaway) {
	o.AwardedGiveaways = v
}

// GetReturn returns the Return field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetReturn() Return {
	if o == nil || o.Return == nil {
		var ret Return
		return ret
	}
	return *o.Return
}

// GetReturnOk returns a tuple with the Return field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetReturnOk() (*Return, bool) {
	if o == nil || o.Return == nil {
		return nil, false
	}
	return o.Return, true
}

// HasReturn returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasReturn() bool {
	if o != nil && o.Return != nil {
		return true
	}

	return false
}

// SetReturn gets a reference to the given Return and assigns it to the Return field.
func (o *IntegrationStateV2) SetReturn(v Return) {
	o.Return = &v
}

// GetPreviousReturns returns the PreviousReturns field value if set, zero value otherwise.
func (o *IntegrationStateV2) GetPreviousReturns() []Return {
	if o == nil || o.PreviousReturns == nil {
		var ret []Return
		return ret
	}
	return o.PreviousReturns
}

// GetPreviousReturnsOk returns a tuple with the PreviousReturns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationStateV2) GetPreviousReturnsOk() ([]Return, bool) {
	if o == nil || o.PreviousReturns == nil {
		return nil, false
	}
	return o.PreviousReturns, true
}

// HasPreviousReturns returns a boolean if a field has been set.
func (o *IntegrationStateV2) HasPreviousReturns() bool {
	if o != nil && o.PreviousReturns != nil {
		return true
	}

	return false
}

// SetPreviousReturns gets a reference to the given []Return and assigns it to the PreviousReturns field.
func (o *IntegrationStateV2) SetPreviousReturns(v []Return) {
	o.PreviousReturns = v
}

func (o IntegrationStateV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomerSession != nil {
		toSerialize["customerSession"] = o.CustomerSession
	}
	if o.CustomerProfile != nil {
		toSerialize["customerProfile"] = o.CustomerProfile
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.Loyalty != nil {
		toSerialize["loyalty"] = o.Loyalty
	}
	if o.Referral != nil {
		toSerialize["referral"] = o.Referral
	}
	if o.Coupons != nil {
		toSerialize["coupons"] = o.Coupons
	}
	if o.TriggeredCampaigns != nil {
		toSerialize["triggeredCampaigns"] = o.TriggeredCampaigns
	}
	if true {
		toSerialize["effects"] = o.Effects
	}
	if o.RuleFailureReasons != nil {
		toSerialize["ruleFailureReasons"] = o.RuleFailureReasons
	}
	if true {
		toSerialize["createdCoupons"] = o.CreatedCoupons
	}
	if true {
		toSerialize["createdReferrals"] = o.CreatedReferrals
	}
	if o.AwardedGiveaways != nil {
		toSerialize["awardedGiveaways"] = o.AwardedGiveaways
	}
	if o.Return != nil {
		toSerialize["return"] = o.Return
	}
	if o.PreviousReturns != nil {
		toSerialize["previousReturns"] = o.PreviousReturns
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationStateV2 struct {
	value *IntegrationStateV2
	isSet bool
}

func (v NullableIntegrationStateV2) Get() *IntegrationStateV2 {
	return v.value
}

func (v *NullableIntegrationStateV2) Set(val *IntegrationStateV2) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationStateV2) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationStateV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationStateV2(val *IntegrationStateV2) *NullableIntegrationStateV2 {
	return &NullableIntegrationStateV2{value: val, isSet: true}
}

func (v NullableIntegrationStateV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationStateV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


