/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewCustomerSession 
type NewCustomerSession struct {
	// ID of the customer profile set by your integration layer.  **Note:** If the customer does not yet have a known `profileId`, we recommend you use a guest `profileId`. 
	ProfileId *string `json:"profileId,omitempty"`
	// Any coupon code entered.
	Coupon *string `json:"coupon,omitempty"`
	// Any referral code entered.
	Referral *string `json:"referral,omitempty"`
	// Indicates the current state of the session. Sessions can be created as `open` or `closed`. The state transitions are:  1. `open` → `closed` 2. `open` → `cancelled` 3. `closed` → `cancelled` or `partially_returned` 4. `partially_returned` → `cancelled`  For more information, see [Customer session states](/docs/dev/concepts/entities#customer-session). 
	State *string `json:"state,omitempty"`
	// Serialized JSON representation.
	CartItems []CartItem `json:"cartItems,omitempty"`
	// Session custom identifiers that you can set limits on or use inside your rules.  For example, you can use IP addresses as identifiers to potentially identify devices and limit discounts abuse in case of customers creating multiple accounts. See the [tutorial](https://docs.talon.one/docs/dev/tutorials/using-identifiers/). 
	Identifiers []string `json:"identifiers,omitempty"`
	// The total sum of the cart in one session.
	Total *float32 `json:"total,omitempty"`
	// A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. 
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

// NewNewCustomerSession instantiates a new NewCustomerSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewCustomerSession() *NewCustomerSession {
	this := NewCustomerSession{}
	var state string = "open"
	this.State = &state
	return &this
}

// NewNewCustomerSessionWithDefaults instantiates a new NewCustomerSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewCustomerSessionWithDefaults() *NewCustomerSession {
	this := NewCustomerSession{}
	var state string = "open"
	this.State = &state
	return &this
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *NewCustomerSession) GetProfileId() string {
	if o == nil || o.ProfileId == nil {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetProfileIdOk() (*string, bool) {
	if o == nil || o.ProfileId == nil {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *NewCustomerSession) HasProfileId() bool {
	if o != nil && o.ProfileId != nil {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *NewCustomerSession) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetCoupon returns the Coupon field value if set, zero value otherwise.
func (o *NewCustomerSession) GetCoupon() string {
	if o == nil || o.Coupon == nil {
		var ret string
		return ret
	}
	return *o.Coupon
}

// GetCouponOk returns a tuple with the Coupon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetCouponOk() (*string, bool) {
	if o == nil || o.Coupon == nil {
		return nil, false
	}
	return o.Coupon, true
}

// HasCoupon returns a boolean if a field has been set.
func (o *NewCustomerSession) HasCoupon() bool {
	if o != nil && o.Coupon != nil {
		return true
	}

	return false
}

// SetCoupon gets a reference to the given string and assigns it to the Coupon field.
func (o *NewCustomerSession) SetCoupon(v string) {
	o.Coupon = &v
}

// GetReferral returns the Referral field value if set, zero value otherwise.
func (o *NewCustomerSession) GetReferral() string {
	if o == nil || o.Referral == nil {
		var ret string
		return ret
	}
	return *o.Referral
}

// GetReferralOk returns a tuple with the Referral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetReferralOk() (*string, bool) {
	if o == nil || o.Referral == nil {
		return nil, false
	}
	return o.Referral, true
}

// HasReferral returns a boolean if a field has been set.
func (o *NewCustomerSession) HasReferral() bool {
	if o != nil && o.Referral != nil {
		return true
	}

	return false
}

// SetReferral gets a reference to the given string and assigns it to the Referral field.
func (o *NewCustomerSession) SetReferral(v string) {
	o.Referral = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *NewCustomerSession) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *NewCustomerSession) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *NewCustomerSession) SetState(v string) {
	o.State = &v
}

// GetCartItems returns the CartItems field value if set, zero value otherwise.
func (o *NewCustomerSession) GetCartItems() []CartItem {
	if o == nil || o.CartItems == nil {
		var ret []CartItem
		return ret
	}
	return o.CartItems
}

// GetCartItemsOk returns a tuple with the CartItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetCartItemsOk() ([]CartItem, bool) {
	if o == nil || o.CartItems == nil {
		return nil, false
	}
	return o.CartItems, true
}

// HasCartItems returns a boolean if a field has been set.
func (o *NewCustomerSession) HasCartItems() bool {
	if o != nil && o.CartItems != nil {
		return true
	}

	return false
}

// SetCartItems gets a reference to the given []CartItem and assigns it to the CartItems field.
func (o *NewCustomerSession) SetCartItems(v []CartItem) {
	o.CartItems = v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *NewCustomerSession) GetIdentifiers() []string {
	if o == nil || o.Identifiers == nil {
		var ret []string
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetIdentifiersOk() ([]string, bool) {
	if o == nil || o.Identifiers == nil {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *NewCustomerSession) HasIdentifiers() bool {
	if o != nil && o.Identifiers != nil {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given []string and assigns it to the Identifiers field.
func (o *NewCustomerSession) SetIdentifiers(v []string) {
	o.Identifiers = v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *NewCustomerSession) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *NewCustomerSession) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *NewCustomerSession) SetTotal(v float32) {
	o.Total = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *NewCustomerSession) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewCustomerSession) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *NewCustomerSession) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *NewCustomerSession) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o NewCustomerSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProfileId != nil {
		toSerialize["profileId"] = o.ProfileId
	}
	if o.Coupon != nil {
		toSerialize["coupon"] = o.Coupon
	}
	if o.Referral != nil {
		toSerialize["referral"] = o.Referral
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.CartItems != nil {
		toSerialize["cartItems"] = o.CartItems
	}
	if o.Identifiers != nil {
		toSerialize["identifiers"] = o.Identifiers
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableNewCustomerSession struct {
	value *NewCustomerSession
	isSet bool
}

func (v NullableNewCustomerSession) Get() *NewCustomerSession {
	return v.value
}

func (v *NullableNewCustomerSession) Set(val *NewCustomerSession) {
	v.value = val
	v.isSet = true
}

func (v NullableNewCustomerSession) IsSet() bool {
	return v.isSet
}

func (v *NullableNewCustomerSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewCustomerSession(val *NewCustomerSession) *NullableNewCustomerSession {
	return &NullableNewCustomerSession{value: val, isSet: true}
}

func (v NullableNewCustomerSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewCustomerSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


