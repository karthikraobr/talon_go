/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// SamlConnection 
type SamlConnection struct {
	// The location where the SAML assertion is sent with a HTTP POST.
	AssertionConsumerServiceURL string `json:"assertionConsumerServiceURL"`
	// The ID of the account that owns this entity.
	AccountId int32 `json:"accountId"`
	// ID of the SAML service.
	Name string `json:"name"`
	// Determines if this SAML connection active.
	Enabled bool `json:"enabled"`
	// Identity Provider Entity ID.
	Issuer string `json:"issuer"`
	// Single Sign-On URL.
	SignOnURL string `json:"signOnURL"`
	// Single Sign-Out URL.
	SignOutURL *string `json:"signOutURL,omitempty"`
	// Metadata URL.
	MetadataURL *string `json:"metadataURL,omitempty"`
	// The application-defined unique identifier that is the intended audience of the SAML assertion. This is most often the SP Entity ID of your application. When not specified, the ACS URL will be used. 
	AudienceURI string `json:"audienceURI"`
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
}

// NewSamlConnection instantiates a new SamlConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlConnection(assertionConsumerServiceURL string, accountId int32, name string, enabled bool, issuer string, signOnURL string, audienceURI string, id int32, created time.Time) *SamlConnection {
	this := SamlConnection{}
	this.AssertionConsumerServiceURL = assertionConsumerServiceURL
	this.AccountId = accountId
	this.Name = name
	this.Enabled = enabled
	this.Issuer = issuer
	this.SignOnURL = signOnURL
	this.AudienceURI = audienceURI
	this.Id = id
	this.Created = created
	return &this
}

// NewSamlConnectionWithDefaults instantiates a new SamlConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlConnectionWithDefaults() *SamlConnection {
	this := SamlConnection{}
	return &this
}

// GetAssertionConsumerServiceURL returns the AssertionConsumerServiceURL field value
func (o *SamlConnection) GetAssertionConsumerServiceURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssertionConsumerServiceURL
}

// GetAssertionConsumerServiceURLOk returns a tuple with the AssertionConsumerServiceURL field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetAssertionConsumerServiceURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssertionConsumerServiceURL, true
}

// SetAssertionConsumerServiceURL sets field value
func (o *SamlConnection) SetAssertionConsumerServiceURL(v string) {
	o.AssertionConsumerServiceURL = v
}

// GetAccountId returns the AccountId field value
func (o *SamlConnection) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *SamlConnection) SetAccountId(v int32) {
	o.AccountId = v
}

// GetName returns the Name field value
func (o *SamlConnection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SamlConnection) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *SamlConnection) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SamlConnection) SetEnabled(v bool) {
	o.Enabled = v
}

// GetIssuer returns the Issuer field value
func (o *SamlConnection) GetIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *SamlConnection) SetIssuer(v string) {
	o.Issuer = v
}

// GetSignOnURL returns the SignOnURL field value
func (o *SamlConnection) GetSignOnURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignOnURL
}

// GetSignOnURLOk returns a tuple with the SignOnURL field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetSignOnURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignOnURL, true
}

// SetSignOnURL sets field value
func (o *SamlConnection) SetSignOnURL(v string) {
	o.SignOnURL = v
}

// GetSignOutURL returns the SignOutURL field value if set, zero value otherwise.
func (o *SamlConnection) GetSignOutURL() string {
	if o == nil || o.SignOutURL == nil {
		var ret string
		return ret
	}
	return *o.SignOutURL
}

// GetSignOutURLOk returns a tuple with the SignOutURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetSignOutURLOk() (*string, bool) {
	if o == nil || o.SignOutURL == nil {
		return nil, false
	}
	return o.SignOutURL, true
}

// HasSignOutURL returns a boolean if a field has been set.
func (o *SamlConnection) HasSignOutURL() bool {
	if o != nil && o.SignOutURL != nil {
		return true
	}

	return false
}

// SetSignOutURL gets a reference to the given string and assigns it to the SignOutURL field.
func (o *SamlConnection) SetSignOutURL(v string) {
	o.SignOutURL = &v
}

// GetMetadataURL returns the MetadataURL field value if set, zero value otherwise.
func (o *SamlConnection) GetMetadataURL() string {
	if o == nil || o.MetadataURL == nil {
		var ret string
		return ret
	}
	return *o.MetadataURL
}

// GetMetadataURLOk returns a tuple with the MetadataURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetMetadataURLOk() (*string, bool) {
	if o == nil || o.MetadataURL == nil {
		return nil, false
	}
	return o.MetadataURL, true
}

// HasMetadataURL returns a boolean if a field has been set.
func (o *SamlConnection) HasMetadataURL() bool {
	if o != nil && o.MetadataURL != nil {
		return true
	}

	return false
}

// SetMetadataURL gets a reference to the given string and assigns it to the MetadataURL field.
func (o *SamlConnection) SetMetadataURL(v string) {
	o.MetadataURL = &v
}

// GetAudienceURI returns the AudienceURI field value
func (o *SamlConnection) GetAudienceURI() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AudienceURI
}

// GetAudienceURIOk returns a tuple with the AudienceURI field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetAudienceURIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudienceURI, true
}

// SetAudienceURI sets field value
func (o *SamlConnection) SetAudienceURI(v string) {
	o.AudienceURI = v
}

// GetId returns the Id field value
func (o *SamlConnection) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SamlConnection) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *SamlConnection) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *SamlConnection) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *SamlConnection) SetCreated(v time.Time) {
	o.Created = v
}

func (o SamlConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assertionConsumerServiceURL"] = o.AssertionConsumerServiceURL
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["issuer"] = o.Issuer
	}
	if true {
		toSerialize["signOnURL"] = o.SignOnURL
	}
	if o.SignOutURL != nil {
		toSerialize["signOutURL"] = o.SignOutURL
	}
	if o.MetadataURL != nil {
		toSerialize["metadataURL"] = o.MetadataURL
	}
	if true {
		toSerialize["audienceURI"] = o.AudienceURI
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableSamlConnection struct {
	value *SamlConnection
	isSet bool
}

func (v NullableSamlConnection) Get() *SamlConnection {
	return v.value
}

func (v *NullableSamlConnection) Set(val *SamlConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlConnection(val *SamlConnection) *NullableSamlConnection {
	return &NullableSamlConnection{value: val, isSet: true}
}

func (v NullableSamlConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


