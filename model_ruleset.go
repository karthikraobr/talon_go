/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// Ruleset 
type Ruleset struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The ID of the account that owns this entity.
	UserId int32 `json:"userId"`
	// Set of rules to apply.
	Rules []Rule `json:"rules"`
	// An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.
	Bindings []Binding `json:"bindings"`
	// The version of the rulebuilder used to create this ruleset.
	RbVersion *string `json:"rbVersion,omitempty"`
	// Indicates whether this created ruleset should be activated for the campaign that owns it.
	Activate *bool `json:"activate,omitempty"`
	// The ID of the campaign that owns this entity.
	CampaignId *int32 `json:"campaignId,omitempty"`
	// The ID of the campaign template that owns this entity.
	TemplateId *int32 `json:"templateId,omitempty"`
	// Timestamp indicating when this Ruleset was activated.
	ActivatedAt *time.Time `json:"activatedAt,omitempty"`
}

// NewRuleset instantiates a new Ruleset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleset(id int32, created time.Time, userId int32, rules []Rule, bindings []Binding) *Ruleset {
	this := Ruleset{}
	this.Id = id
	this.Created = created
	this.UserId = userId
	this.Rules = rules
	this.Bindings = bindings
	return &this
}

// NewRulesetWithDefaults instantiates a new Ruleset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesetWithDefaults() *Ruleset {
	this := Ruleset{}
	return &this
}

// GetId returns the Id field value
func (o *Ruleset) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Ruleset) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Ruleset) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Ruleset) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Ruleset) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Ruleset) SetCreated(v time.Time) {
	o.Created = v
}

// GetUserId returns the UserId field value
func (o *Ruleset) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Ruleset) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Ruleset) SetUserId(v int32) {
	o.UserId = v
}

// GetRules returns the Rules field value
func (o *Ruleset) GetRules() []Rule {
	if o == nil {
		var ret []Rule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *Ruleset) GetRulesOk() ([]Rule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *Ruleset) SetRules(v []Rule) {
	o.Rules = v
}

// GetBindings returns the Bindings field value
func (o *Ruleset) GetBindings() []Binding {
	if o == nil {
		var ret []Binding
		return ret
	}

	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value
// and a boolean to check if the value has been set.
func (o *Ruleset) GetBindingsOk() ([]Binding, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bindings, true
}

// SetBindings sets field value
func (o *Ruleset) SetBindings(v []Binding) {
	o.Bindings = v
}

// GetRbVersion returns the RbVersion field value if set, zero value otherwise.
func (o *Ruleset) GetRbVersion() string {
	if o == nil || o.RbVersion == nil {
		var ret string
		return ret
	}
	return *o.RbVersion
}

// GetRbVersionOk returns a tuple with the RbVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetRbVersionOk() (*string, bool) {
	if o == nil || o.RbVersion == nil {
		return nil, false
	}
	return o.RbVersion, true
}

// HasRbVersion returns a boolean if a field has been set.
func (o *Ruleset) HasRbVersion() bool {
	if o != nil && o.RbVersion != nil {
		return true
	}

	return false
}

// SetRbVersion gets a reference to the given string and assigns it to the RbVersion field.
func (o *Ruleset) SetRbVersion(v string) {
	o.RbVersion = &v
}

// GetActivate returns the Activate field value if set, zero value otherwise.
func (o *Ruleset) GetActivate() bool {
	if o == nil || o.Activate == nil {
		var ret bool
		return ret
	}
	return *o.Activate
}

// GetActivateOk returns a tuple with the Activate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetActivateOk() (*bool, bool) {
	if o == nil || o.Activate == nil {
		return nil, false
	}
	return o.Activate, true
}

// HasActivate returns a boolean if a field has been set.
func (o *Ruleset) HasActivate() bool {
	if o != nil && o.Activate != nil {
		return true
	}

	return false
}

// SetActivate gets a reference to the given bool and assigns it to the Activate field.
func (o *Ruleset) SetActivate(v bool) {
	o.Activate = &v
}

// GetCampaignId returns the CampaignId field value if set, zero value otherwise.
func (o *Ruleset) GetCampaignId() int32 {
	if o == nil || o.CampaignId == nil {
		var ret int32
		return ret
	}
	return *o.CampaignId
}

// GetCampaignIdOk returns a tuple with the CampaignId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetCampaignIdOk() (*int32, bool) {
	if o == nil || o.CampaignId == nil {
		return nil, false
	}
	return o.CampaignId, true
}

// HasCampaignId returns a boolean if a field has been set.
func (o *Ruleset) HasCampaignId() bool {
	if o != nil && o.CampaignId != nil {
		return true
	}

	return false
}

// SetCampaignId gets a reference to the given int32 and assigns it to the CampaignId field.
func (o *Ruleset) SetCampaignId(v int32) {
	o.CampaignId = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *Ruleset) GetTemplateId() int32 {
	if o == nil || o.TemplateId == nil {
		var ret int32
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetTemplateIdOk() (*int32, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *Ruleset) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given int32 and assigns it to the TemplateId field.
func (o *Ruleset) SetTemplateId(v int32) {
	o.TemplateId = &v
}

// GetActivatedAt returns the ActivatedAt field value if set, zero value otherwise.
func (o *Ruleset) GetActivatedAt() time.Time {
	if o == nil || o.ActivatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ActivatedAt
}

// GetActivatedAtOk returns a tuple with the ActivatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetActivatedAtOk() (*time.Time, bool) {
	if o == nil || o.ActivatedAt == nil {
		return nil, false
	}
	return o.ActivatedAt, true
}

// HasActivatedAt returns a boolean if a field has been set.
func (o *Ruleset) HasActivatedAt() bool {
	if o != nil && o.ActivatedAt != nil {
		return true
	}

	return false
}

// SetActivatedAt gets a reference to the given time.Time and assigns it to the ActivatedAt field.
func (o *Ruleset) SetActivatedAt(v time.Time) {
	o.ActivatedAt = &v
}

func (o Ruleset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["userId"] = o.UserId
	}
	if true {
		toSerialize["rules"] = o.Rules
	}
	if true {
		toSerialize["bindings"] = o.Bindings
	}
	if o.RbVersion != nil {
		toSerialize["rbVersion"] = o.RbVersion
	}
	if o.Activate != nil {
		toSerialize["activate"] = o.Activate
	}
	if o.CampaignId != nil {
		toSerialize["campaignId"] = o.CampaignId
	}
	if o.TemplateId != nil {
		toSerialize["templateId"] = o.TemplateId
	}
	if o.ActivatedAt != nil {
		toSerialize["activatedAt"] = o.ActivatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableRuleset struct {
	value *Ruleset
	isSet bool
}

func (v NullableRuleset) Get() *Ruleset {
	return v.value
}

func (v *NullableRuleset) Set(val *Ruleset) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleset) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleset(val *Ruleset) *NullableRuleset {
	return &NullableRuleset{value: val, isSet: true}
}

func (v NullableRuleset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


