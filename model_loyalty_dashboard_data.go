/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// LoyaltyDashboardData Datapoint for the graphs and cards on a loyalty program dashboard.
type LoyaltyDashboardData struct {
	// Date at which data point was collected.
	Date time.Time `json:"date"`
	// Total of active points for this loyalty program.
	TotalActivePoints float32 `json:"totalActivePoints"`
	// Total of pending points for this loyalty program.
	TotalPendingPoints float32 `json:"totalPendingPoints"`
	// Total of spent points for this loyalty program.
	TotalSpentPoints float32 `json:"totalSpentPoints"`
	// Total of expired points for this loyalty program.
	TotalExpiredPoints float32 `json:"totalExpiredPoints"`
	// Number of loyalty program members.
	TotalMembers float32 `json:"totalMembers"`
	// Number of members who joined on this day.
	NewMembers float32 `json:"newMembers"`
	SpentPoints LoyaltyDashboardPointsBreakdown `json:"spentPoints"`
	EarnedPoints LoyaltyDashboardPointsBreakdown `json:"earnedPoints"`
}

// NewLoyaltyDashboardData instantiates a new LoyaltyDashboardData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyDashboardData(date time.Time, totalActivePoints float32, totalPendingPoints float32, totalSpentPoints float32, totalExpiredPoints float32, totalMembers float32, newMembers float32, spentPoints LoyaltyDashboardPointsBreakdown, earnedPoints LoyaltyDashboardPointsBreakdown) *LoyaltyDashboardData {
	this := LoyaltyDashboardData{}
	this.Date = date
	this.TotalActivePoints = totalActivePoints
	this.TotalPendingPoints = totalPendingPoints
	this.TotalSpentPoints = totalSpentPoints
	this.TotalExpiredPoints = totalExpiredPoints
	this.TotalMembers = totalMembers
	this.NewMembers = newMembers
	this.SpentPoints = spentPoints
	this.EarnedPoints = earnedPoints
	return &this
}

// NewLoyaltyDashboardDataWithDefaults instantiates a new LoyaltyDashboardData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyDashboardDataWithDefaults() *LoyaltyDashboardData {
	this := LoyaltyDashboardData{}
	return &this
}

// GetDate returns the Date field value
func (o *LoyaltyDashboardData) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *LoyaltyDashboardData) SetDate(v time.Time) {
	o.Date = v
}

// GetTotalActivePoints returns the TotalActivePoints field value
func (o *LoyaltyDashboardData) GetTotalActivePoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalActivePoints
}

// GetTotalActivePointsOk returns a tuple with the TotalActivePoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetTotalActivePointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalActivePoints, true
}

// SetTotalActivePoints sets field value
func (o *LoyaltyDashboardData) SetTotalActivePoints(v float32) {
	o.TotalActivePoints = v
}

// GetTotalPendingPoints returns the TotalPendingPoints field value
func (o *LoyaltyDashboardData) GetTotalPendingPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPendingPoints
}

// GetTotalPendingPointsOk returns a tuple with the TotalPendingPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetTotalPendingPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPendingPoints, true
}

// SetTotalPendingPoints sets field value
func (o *LoyaltyDashboardData) SetTotalPendingPoints(v float32) {
	o.TotalPendingPoints = v
}

// GetTotalSpentPoints returns the TotalSpentPoints field value
func (o *LoyaltyDashboardData) GetTotalSpentPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalSpentPoints
}

// GetTotalSpentPointsOk returns a tuple with the TotalSpentPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetTotalSpentPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSpentPoints, true
}

// SetTotalSpentPoints sets field value
func (o *LoyaltyDashboardData) SetTotalSpentPoints(v float32) {
	o.TotalSpentPoints = v
}

// GetTotalExpiredPoints returns the TotalExpiredPoints field value
func (o *LoyaltyDashboardData) GetTotalExpiredPoints() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalExpiredPoints
}

// GetTotalExpiredPointsOk returns a tuple with the TotalExpiredPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetTotalExpiredPointsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalExpiredPoints, true
}

// SetTotalExpiredPoints sets field value
func (o *LoyaltyDashboardData) SetTotalExpiredPoints(v float32) {
	o.TotalExpiredPoints = v
}

// GetTotalMembers returns the TotalMembers field value
func (o *LoyaltyDashboardData) GetTotalMembers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalMembers
}

// GetTotalMembersOk returns a tuple with the TotalMembers field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetTotalMembersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalMembers, true
}

// SetTotalMembers sets field value
func (o *LoyaltyDashboardData) SetTotalMembers(v float32) {
	o.TotalMembers = v
}

// GetNewMembers returns the NewMembers field value
func (o *LoyaltyDashboardData) GetNewMembers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NewMembers
}

// GetNewMembersOk returns a tuple with the NewMembers field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetNewMembersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewMembers, true
}

// SetNewMembers sets field value
func (o *LoyaltyDashboardData) SetNewMembers(v float32) {
	o.NewMembers = v
}

// GetSpentPoints returns the SpentPoints field value
func (o *LoyaltyDashboardData) GetSpentPoints() LoyaltyDashboardPointsBreakdown {
	if o == nil {
		var ret LoyaltyDashboardPointsBreakdown
		return ret
	}

	return o.SpentPoints
}

// GetSpentPointsOk returns a tuple with the SpentPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetSpentPointsOk() (*LoyaltyDashboardPointsBreakdown, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpentPoints, true
}

// SetSpentPoints sets field value
func (o *LoyaltyDashboardData) SetSpentPoints(v LoyaltyDashboardPointsBreakdown) {
	o.SpentPoints = v
}

// GetEarnedPoints returns the EarnedPoints field value
func (o *LoyaltyDashboardData) GetEarnedPoints() LoyaltyDashboardPointsBreakdown {
	if o == nil {
		var ret LoyaltyDashboardPointsBreakdown
		return ret
	}

	return o.EarnedPoints
}

// GetEarnedPointsOk returns a tuple with the EarnedPoints field value
// and a boolean to check if the value has been set.
func (o *LoyaltyDashboardData) GetEarnedPointsOk() (*LoyaltyDashboardPointsBreakdown, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EarnedPoints, true
}

// SetEarnedPoints sets field value
func (o *LoyaltyDashboardData) SetEarnedPoints(v LoyaltyDashboardPointsBreakdown) {
	o.EarnedPoints = v
}

func (o LoyaltyDashboardData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["totalActivePoints"] = o.TotalActivePoints
	}
	if true {
		toSerialize["totalPendingPoints"] = o.TotalPendingPoints
	}
	if true {
		toSerialize["totalSpentPoints"] = o.TotalSpentPoints
	}
	if true {
		toSerialize["totalExpiredPoints"] = o.TotalExpiredPoints
	}
	if true {
		toSerialize["totalMembers"] = o.TotalMembers
	}
	if true {
		toSerialize["newMembers"] = o.NewMembers
	}
	if true {
		toSerialize["spentPoints"] = o.SpentPoints
	}
	if true {
		toSerialize["earnedPoints"] = o.EarnedPoints
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyDashboardData struct {
	value *LoyaltyDashboardData
	isSet bool
}

func (v NullableLoyaltyDashboardData) Get() *LoyaltyDashboardData {
	return v.value
}

func (v *NullableLoyaltyDashboardData) Set(val *LoyaltyDashboardData) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyDashboardData) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyDashboardData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyDashboardData(val *LoyaltyDashboardData) *NullableLoyaltyDashboardData {
	return &NullableLoyaltyDashboardData{value: val, isSet: true}
}

func (v NullableLoyaltyDashboardData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyDashboardData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


