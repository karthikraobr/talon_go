/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewReturn struct for NewReturn
type NewReturn struct {
	// List of cart items to be returned.
	ReturnedCartItems []ReturnedCartItem `json:"returnedCartItems"`
}

// NewNewReturn instantiates a new NewReturn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewReturn(returnedCartItems []ReturnedCartItem) *NewReturn {
	this := NewReturn{}
	this.ReturnedCartItems = returnedCartItems
	return &this
}

// NewNewReturnWithDefaults instantiates a new NewReturn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewReturnWithDefaults() *NewReturn {
	this := NewReturn{}
	return &this
}

// GetReturnedCartItems returns the ReturnedCartItems field value
func (o *NewReturn) GetReturnedCartItems() []ReturnedCartItem {
	if o == nil {
		var ret []ReturnedCartItem
		return ret
	}

	return o.ReturnedCartItems
}

// GetReturnedCartItemsOk returns a tuple with the ReturnedCartItems field value
// and a boolean to check if the value has been set.
func (o *NewReturn) GetReturnedCartItemsOk() ([]ReturnedCartItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnedCartItems, true
}

// SetReturnedCartItems sets field value
func (o *NewReturn) SetReturnedCartItems(v []ReturnedCartItem) {
	o.ReturnedCartItems = v
}

func (o NewReturn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["returnedCartItems"] = o.ReturnedCartItems
	}
	return json.Marshal(toSerialize)
}

type NullableNewReturn struct {
	value *NewReturn
	isSet bool
}

func (v NullableNewReturn) Get() *NewReturn {
	return v.value
}

func (v *NullableNewReturn) Set(val *NewReturn) {
	v.value = val
	v.isSet = true
}

func (v NullableNewReturn) IsSet() bool {
	return v.isSet
}

func (v *NullableNewReturn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewReturn(val *NewReturn) *NullableNewReturn {
	return &NullableNewReturn{value: val, isSet: true}
}

func (v NullableNewReturn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewReturn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


