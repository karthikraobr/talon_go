/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// LoyaltyLedger Ledger of Balance in Loyalty Program for a Customer.
type LoyaltyLedger struct {
	Ledger LoyaltySubLedger `json:"ledger"`
	// A map containing a list of all loyalty subledger balances.
	SubLedgers *map[string]LoyaltySubLedger `json:"subLedgers,omitempty"`
}

// NewLoyaltyLedger instantiates a new LoyaltyLedger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoyaltyLedger(ledger LoyaltySubLedger) *LoyaltyLedger {
	this := LoyaltyLedger{}
	this.Ledger = ledger
	return &this
}

// NewLoyaltyLedgerWithDefaults instantiates a new LoyaltyLedger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoyaltyLedgerWithDefaults() *LoyaltyLedger {
	this := LoyaltyLedger{}
	return &this
}

// GetLedger returns the Ledger field value
func (o *LoyaltyLedger) GetLedger() LoyaltySubLedger {
	if o == nil {
		var ret LoyaltySubLedger
		return ret
	}

	return o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value
// and a boolean to check if the value has been set.
func (o *LoyaltyLedger) GetLedgerOk() (*LoyaltySubLedger, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ledger, true
}

// SetLedger sets field value
func (o *LoyaltyLedger) SetLedger(v LoyaltySubLedger) {
	o.Ledger = v
}

// GetSubLedgers returns the SubLedgers field value if set, zero value otherwise.
func (o *LoyaltyLedger) GetSubLedgers() map[string]LoyaltySubLedger {
	if o == nil || o.SubLedgers == nil {
		var ret map[string]LoyaltySubLedger
		return ret
	}
	return *o.SubLedgers
}

// GetSubLedgersOk returns a tuple with the SubLedgers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoyaltyLedger) GetSubLedgersOk() (*map[string]LoyaltySubLedger, bool) {
	if o == nil || o.SubLedgers == nil {
		return nil, false
	}
	return o.SubLedgers, true
}

// HasSubLedgers returns a boolean if a field has been set.
func (o *LoyaltyLedger) HasSubLedgers() bool {
	if o != nil && o.SubLedgers != nil {
		return true
	}

	return false
}

// SetSubLedgers gets a reference to the given map[string]LoyaltySubLedger and assigns it to the SubLedgers field.
func (o *LoyaltyLedger) SetSubLedgers(v map[string]LoyaltySubLedger) {
	o.SubLedgers = &v
}

func (o LoyaltyLedger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ledger"] = o.Ledger
	}
	if o.SubLedgers != nil {
		toSerialize["subLedgers"] = o.SubLedgers
	}
	return json.Marshal(toSerialize)
}

type NullableLoyaltyLedger struct {
	value *LoyaltyLedger
	isSet bool
}

func (v NullableLoyaltyLedger) Get() *LoyaltyLedger {
	return v.value
}

func (v *NullableLoyaltyLedger) Set(val *LoyaltyLedger) {
	v.value = val
	v.isSet = true
}

func (v NullableLoyaltyLedger) IsSet() bool {
	return v.isSet
}

func (v *NullableLoyaltyLedger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoyaltyLedger(val *LoyaltyLedger) *NullableLoyaltyLedger {
	return &NullableLoyaltyLedger{value: val, isSet: true}
}

func (v NullableLoyaltyLedger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoyaltyLedger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


