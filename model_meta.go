/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// Meta struct for Meta
type Meta struct {
	// Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted.
	Campaigns map[string]interface{} `json:"campaigns,omitempty"`
	// Maps the coupon value to a key-value list of that coupons attributes.
	Coupons map[string]interface{} `json:"coupons,omitempty"`
	CouponRejectionReason *CouponRejectionReason `json:"couponRejectionReason,omitempty"`
	ReferralRejectionReason *ReferralRejectionReason `json:"referralRejectionReason,omitempty"`
	// Contains warnings about possible misuse.
	Warnings map[string]interface{} `json:"warnings,omitempty"`
}

// NewMeta instantiates a new Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeta() *Meta {
	this := Meta{}
	return &this
}

// NewMetaWithDefaults instantiates a new Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaWithDefaults() *Meta {
	this := Meta{}
	return &this
}

// GetCampaigns returns the Campaigns field value if set, zero value otherwise.
func (o *Meta) GetCampaigns() map[string]interface{} {
	if o == nil || o.Campaigns == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Campaigns
}

// GetCampaignsOk returns a tuple with the Campaigns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetCampaignsOk() (map[string]interface{}, bool) {
	if o == nil || o.Campaigns == nil {
		return nil, false
	}
	return o.Campaigns, true
}

// HasCampaigns returns a boolean if a field has been set.
func (o *Meta) HasCampaigns() bool {
	if o != nil && o.Campaigns != nil {
		return true
	}

	return false
}

// SetCampaigns gets a reference to the given map[string]interface{} and assigns it to the Campaigns field.
func (o *Meta) SetCampaigns(v map[string]interface{}) {
	o.Campaigns = v
}

// GetCoupons returns the Coupons field value if set, zero value otherwise.
func (o *Meta) GetCoupons() map[string]interface{} {
	if o == nil || o.Coupons == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Coupons
}

// GetCouponsOk returns a tuple with the Coupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetCouponsOk() (map[string]interface{}, bool) {
	if o == nil || o.Coupons == nil {
		return nil, false
	}
	return o.Coupons, true
}

// HasCoupons returns a boolean if a field has been set.
func (o *Meta) HasCoupons() bool {
	if o != nil && o.Coupons != nil {
		return true
	}

	return false
}

// SetCoupons gets a reference to the given map[string]interface{} and assigns it to the Coupons field.
func (o *Meta) SetCoupons(v map[string]interface{}) {
	o.Coupons = v
}

// GetCouponRejectionReason returns the CouponRejectionReason field value if set, zero value otherwise.
func (o *Meta) GetCouponRejectionReason() CouponRejectionReason {
	if o == nil || o.CouponRejectionReason == nil {
		var ret CouponRejectionReason
		return ret
	}
	return *o.CouponRejectionReason
}

// GetCouponRejectionReasonOk returns a tuple with the CouponRejectionReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetCouponRejectionReasonOk() (*CouponRejectionReason, bool) {
	if o == nil || o.CouponRejectionReason == nil {
		return nil, false
	}
	return o.CouponRejectionReason, true
}

// HasCouponRejectionReason returns a boolean if a field has been set.
func (o *Meta) HasCouponRejectionReason() bool {
	if o != nil && o.CouponRejectionReason != nil {
		return true
	}

	return false
}

// SetCouponRejectionReason gets a reference to the given CouponRejectionReason and assigns it to the CouponRejectionReason field.
func (o *Meta) SetCouponRejectionReason(v CouponRejectionReason) {
	o.CouponRejectionReason = &v
}

// GetReferralRejectionReason returns the ReferralRejectionReason field value if set, zero value otherwise.
func (o *Meta) GetReferralRejectionReason() ReferralRejectionReason {
	if o == nil || o.ReferralRejectionReason == nil {
		var ret ReferralRejectionReason
		return ret
	}
	return *o.ReferralRejectionReason
}

// GetReferralRejectionReasonOk returns a tuple with the ReferralRejectionReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetReferralRejectionReasonOk() (*ReferralRejectionReason, bool) {
	if o == nil || o.ReferralRejectionReason == nil {
		return nil, false
	}
	return o.ReferralRejectionReason, true
}

// HasReferralRejectionReason returns a boolean if a field has been set.
func (o *Meta) HasReferralRejectionReason() bool {
	if o != nil && o.ReferralRejectionReason != nil {
		return true
	}

	return false
}

// SetReferralRejectionReason gets a reference to the given ReferralRejectionReason and assigns it to the ReferralRejectionReason field.
func (o *Meta) SetReferralRejectionReason(v ReferralRejectionReason) {
	o.ReferralRejectionReason = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Meta) GetWarnings() map[string]interface{} {
	if o == nil || o.Warnings == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetWarningsOk() (map[string]interface{}, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Meta) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given map[string]interface{} and assigns it to the Warnings field.
func (o *Meta) SetWarnings(v map[string]interface{}) {
	o.Warnings = v
}

func (o Meta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Campaigns != nil {
		toSerialize["campaigns"] = o.Campaigns
	}
	if o.Coupons != nil {
		toSerialize["coupons"] = o.Coupons
	}
	if o.CouponRejectionReason != nil {
		toSerialize["couponRejectionReason"] = o.CouponRejectionReason
	}
	if o.ReferralRejectionReason != nil {
		toSerialize["referralRejectionReason"] = o.ReferralRejectionReason
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableMeta struct {
	value *Meta
	isSet bool
}

func (v NullableMeta) Get() *Meta {
	return v.value
}

func (v *NullableMeta) Set(val *Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeta(val *Meta) *NullableMeta {
	return &NullableMeta{value: val, isSet: true}
}

func (v NullableMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


