/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CatalogActionFilter The properties for a single filtering condition in a catalog sync action.
type CatalogActionFilter struct {
	// The name of the attribute to filter on.
	Attr string `json:"attr"`
	// The filtering operator.
	Op string `json:"op"`
	// The value to filter for.
	Value map[string]interface{} `json:"value"`
}

// NewCatalogActionFilter instantiates a new CatalogActionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogActionFilter(attr string, op string, value map[string]interface{}) *CatalogActionFilter {
	this := CatalogActionFilter{}
	this.Attr = attr
	this.Op = op
	this.Value = value
	return &this
}

// NewCatalogActionFilterWithDefaults instantiates a new CatalogActionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogActionFilterWithDefaults() *CatalogActionFilter {
	this := CatalogActionFilter{}
	return &this
}

// GetAttr returns the Attr field value
func (o *CatalogActionFilter) GetAttr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attr
}

// GetAttrOk returns a tuple with the Attr field value
// and a boolean to check if the value has been set.
func (o *CatalogActionFilter) GetAttrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attr, true
}

// SetAttr sets field value
func (o *CatalogActionFilter) SetAttr(v string) {
	o.Attr = v
}

// GetOp returns the Op field value
func (o *CatalogActionFilter) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *CatalogActionFilter) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *CatalogActionFilter) SetOp(v string) {
	o.Op = v
}

// GetValue returns the Value field value
func (o *CatalogActionFilter) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CatalogActionFilter) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *CatalogActionFilter) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o CatalogActionFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attr"] = o.Attr
	}
	if true {
		toSerialize["op"] = o.Op
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogActionFilter struct {
	value *CatalogActionFilter
	isSet bool
}

func (v NullableCatalogActionFilter) Get() *CatalogActionFilter {
	return v.value
}

func (v *NullableCatalogActionFilter) Set(val *CatalogActionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogActionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogActionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogActionFilter(val *CatalogActionFilter) *NullableCatalogActionFilter {
	return &NullableCatalogActionFilter{value: val, isSet: true}
}

func (v NullableCatalogActionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogActionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


