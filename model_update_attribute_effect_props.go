/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// UpdateAttributeEffectProps The properties specific to the \"updateAttribute\" effect. This gets triggered whenever a validated rule contained an \"update an attribute\" effect.
type UpdateAttributeEffectProps struct {
	// The exact path of the attribute that was updated.
	Path string `json:"path"`
	// The new value of this attribute. The value can be of the following types: - boolean - location - number - string - time - list of any of those types 
	Value map[string]interface{} `json:"value"`
}

// NewUpdateAttributeEffectProps instantiates a new UpdateAttributeEffectProps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAttributeEffectProps(path string, value map[string]interface{}) *UpdateAttributeEffectProps {
	this := UpdateAttributeEffectProps{}
	this.Path = path
	this.Value = value
	return &this
}

// NewUpdateAttributeEffectPropsWithDefaults instantiates a new UpdateAttributeEffectProps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAttributeEffectPropsWithDefaults() *UpdateAttributeEffectProps {
	this := UpdateAttributeEffectProps{}
	return &this
}

// GetPath returns the Path field value
func (o *UpdateAttributeEffectProps) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *UpdateAttributeEffectProps) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *UpdateAttributeEffectProps) SetPath(v string) {
	o.Path = v
}

// GetValue returns the Value field value
func (o *UpdateAttributeEffectProps) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UpdateAttributeEffectProps) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *UpdateAttributeEffectProps) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o UpdateAttributeEffectProps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAttributeEffectProps struct {
	value *UpdateAttributeEffectProps
	isSet bool
}

func (v NullableUpdateAttributeEffectProps) Get() *UpdateAttributeEffectProps {
	return v.value
}

func (v *NullableUpdateAttributeEffectProps) Set(val *UpdateAttributeEffectProps) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAttributeEffectProps) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAttributeEffectProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAttributeEffectProps(val *UpdateAttributeEffectProps) *NullableUpdateAttributeEffectProps {
	return &NullableUpdateAttributeEffectProps{value: val, isSet: true}
}

func (v NullableUpdateAttributeEffectProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAttributeEffectProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


