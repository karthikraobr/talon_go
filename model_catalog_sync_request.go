/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// CatalogSyncRequest struct for CatalogSyncRequest
type CatalogSyncRequest struct {
	Actions []CatalogAction `json:"actions"`
	// The version number of the catalog to apply the actions on.
	Version *int32 `json:"version,omitempty"`
}

// NewCatalogSyncRequest instantiates a new CatalogSyncRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogSyncRequest(actions []CatalogAction) *CatalogSyncRequest {
	this := CatalogSyncRequest{}
	this.Actions = actions
	return &this
}

// NewCatalogSyncRequestWithDefaults instantiates a new CatalogSyncRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogSyncRequestWithDefaults() *CatalogSyncRequest {
	this := CatalogSyncRequest{}
	return &this
}

// GetActions returns the Actions field value
func (o *CatalogSyncRequest) GetActions() []CatalogAction {
	if o == nil {
		var ret []CatalogAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *CatalogSyncRequest) GetActionsOk() ([]CatalogAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *CatalogSyncRequest) SetActions(v []CatalogAction) {
	o.Actions = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CatalogSyncRequest) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSyncRequest) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CatalogSyncRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *CatalogSyncRequest) SetVersion(v int32) {
	o.Version = &v
}

func (o CatalogSyncRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["actions"] = o.Actions
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogSyncRequest struct {
	value *CatalogSyncRequest
	isSet bool
}

func (v NullableCatalogSyncRequest) Get() *CatalogSyncRequest {
	return v.value
}

func (v *NullableCatalogSyncRequest) Set(val *CatalogSyncRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogSyncRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogSyncRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogSyncRequest(val *CatalogSyncRequest) *NullableCatalogSyncRequest {
	return &NullableCatalogSyncRequest{value: val, isSet: true}
}

func (v NullableCatalogSyncRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogSyncRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


