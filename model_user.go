/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
	"time"
)

// User 
type User struct {
	// Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
	Id int32 `json:"id"`
	// The exact moment this entity was created.
	Created time.Time `json:"created"`
	// The exact moment this entity was last modified.
	Modified time.Time `json:"modified"`
	// The email address associated with your account.
	Email string `json:"email"`
	// The ID of the account that owns this entity.
	AccountId int32 `json:"accountId"`
	// Invite token, empty if the user as already accepted their invite.
	InviteToken string `json:"inviteToken"`
	// Current user state.
	State string `json:"state"`
	// Full name
	Name string `json:"name"`
	// User ACL Policy
	Policy map[string]interface{} `json:"policy"`
	// Latest timestamp the user has been notified for feed.
	LatestFeedTimestamp *time.Time `json:"latestFeedTimestamp,omitempty"`
	// Contains a list of all roles the user is a member of.
	Roles []int32 `json:"roles,omitempty"`
	ApplicationNotificationSubscriptions map[string]interface{} `json:"applicationNotificationSubscriptions,omitempty"`
	// The Authentication method for this user.
	AuthMethod *string `json:"authMethod,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id int32, created time.Time, modified time.Time, email string, accountId int32, inviteToken string, state string, name string, policy map[string]interface{}) *User {
	this := User{}
	this.Id = id
	this.Created = created
	this.Modified = modified
	this.Email = email
	this.AccountId = accountId
	this.InviteToken = inviteToken
	this.State = state
	this.Name = name
	this.Policy = policy
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *User) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *User) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *User) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *User) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *User) SetModified(v time.Time) {
	o.Modified = v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetAccountId returns the AccountId field value
func (o *User) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *User) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *User) SetAccountId(v int32) {
	o.AccountId = v
}

// GetInviteToken returns the InviteToken field value
func (o *User) GetInviteToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InviteToken
}

// GetInviteTokenOk returns a tuple with the InviteToken field value
// and a boolean to check if the value has been set.
func (o *User) GetInviteTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InviteToken, true
}

// SetInviteToken sets field value
func (o *User) SetInviteToken(v string) {
	o.InviteToken = v
}

// GetState returns the State field value
func (o *User) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *User) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *User) SetState(v string) {
	o.State = v
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User) SetName(v string) {
	o.Name = v
}

// GetPolicy returns the Policy field value
func (o *User) GetPolicy() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *User) GetPolicyOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policy, true
}

// SetPolicy sets field value
func (o *User) SetPolicy(v map[string]interface{}) {
	o.Policy = v
}

// GetLatestFeedTimestamp returns the LatestFeedTimestamp field value if set, zero value otherwise.
func (o *User) GetLatestFeedTimestamp() time.Time {
	if o == nil || o.LatestFeedTimestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.LatestFeedTimestamp
}

// GetLatestFeedTimestampOk returns a tuple with the LatestFeedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLatestFeedTimestampOk() (*time.Time, bool) {
	if o == nil || o.LatestFeedTimestamp == nil {
		return nil, false
	}
	return o.LatestFeedTimestamp, true
}

// HasLatestFeedTimestamp returns a boolean if a field has been set.
func (o *User) HasLatestFeedTimestamp() bool {
	if o != nil && o.LatestFeedTimestamp != nil {
		return true
	}

	return false
}

// SetLatestFeedTimestamp gets a reference to the given time.Time and assigns it to the LatestFeedTimestamp field.
func (o *User) SetLatestFeedTimestamp(v time.Time) {
	o.LatestFeedTimestamp = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *User) GetRoles() []int32 {
	if o == nil || o.Roles == nil {
		var ret []int32
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRolesOk() ([]int32, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *User) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []int32 and assigns it to the Roles field.
func (o *User) SetRoles(v []int32) {
	o.Roles = v
}

// GetApplicationNotificationSubscriptions returns the ApplicationNotificationSubscriptions field value if set, zero value otherwise.
func (o *User) GetApplicationNotificationSubscriptions() map[string]interface{} {
	if o == nil || o.ApplicationNotificationSubscriptions == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ApplicationNotificationSubscriptions
}

// GetApplicationNotificationSubscriptionsOk returns a tuple with the ApplicationNotificationSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetApplicationNotificationSubscriptionsOk() (map[string]interface{}, bool) {
	if o == nil || o.ApplicationNotificationSubscriptions == nil {
		return nil, false
	}
	return o.ApplicationNotificationSubscriptions, true
}

// HasApplicationNotificationSubscriptions returns a boolean if a field has been set.
func (o *User) HasApplicationNotificationSubscriptions() bool {
	if o != nil && o.ApplicationNotificationSubscriptions != nil {
		return true
	}

	return false
}

// SetApplicationNotificationSubscriptions gets a reference to the given map[string]interface{} and assigns it to the ApplicationNotificationSubscriptions field.
func (o *User) SetApplicationNotificationSubscriptions(v map[string]interface{}) {
	o.ApplicationNotificationSubscriptions = v
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *User) GetAuthMethod() string {
	if o == nil || o.AuthMethod == nil {
		var ret string
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAuthMethodOk() (*string, bool) {
	if o == nil || o.AuthMethod == nil {
		return nil, false
	}
	return o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *User) HasAuthMethod() bool {
	if o != nil && o.AuthMethod != nil {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given string and assigns it to the AuthMethod field.
func (o *User) SetAuthMethod(v string) {
	o.AuthMethod = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["modified"] = o.Modified
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["inviteToken"] = o.InviteToken
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["policy"] = o.Policy
	}
	if o.LatestFeedTimestamp != nil {
		toSerialize["latestFeedTimestamp"] = o.LatestFeedTimestamp
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.ApplicationNotificationSubscriptions != nil {
		toSerialize["applicationNotificationSubscriptions"] = o.ApplicationNotificationSubscriptions
	}
	if o.AuthMethod != nil {
		toSerialize["authMethod"] = o.AuthMethod
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


