/*
Integration API reference docs

Use the Integration API to push data to and retrieve data from Talon.One in real time. For more background information about this API, see [Integration API overview](/docs/dev/integration-api/overview)  For example, use this API to share shopping cart information as a session with Talon.One and evaluate promotion rules. You can also create custom events to track specific actions that do not fit into the session data model.  Ensure you [authenticate](#section/Authentication) to make requests to the API.  <div class=\"redoc-section\">   <p class=\"title\">Are you looking for a different API?</p>    If you need the API to:    - Interact with the Campaign Manager for backoffice operations, see [the Management API reference docs](https://docs.talon.one/management-api).   - Integrate with Talon.One from a CEP or CDP platform, see [the Third-party API reference docs](https://docs.talon.one/third-party-api).  </div>  # Authentication  <SecurityDefinitions /> 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package talon

import (
	"encoding/json"
)

// NewLoyaltyProgram 
type NewLoyaltyProgram struct {
	// The display title for the Loyalty Program.
	Title string `json:"title"`
	// Description of our Loyalty Program.
	Description *string `json:"description,omitempty"`
	// A list containing the IDs of all applications that are subscribed to this Loyalty Program.
	SubscribedApplications []int32 `json:"subscribedApplications,omitempty"`
	// Indicates the default duration after which new loyalty points should expire. The format is a number, followed by one letter indicating the unit; like '1h' or '40m'.
	DefaultValidity string `json:"defaultValidity"`
	// Indicates the default duration for the pending time, after which points will be valid. The format is a number followed by a duration unit, like '1h' or '40m'.
	DefaultPending string `json:"defaultPending"`
	// Indicates if this program supports subledgers inside the program.
	AllowSubledger bool `json:"allowSubledger"`
	// The max amount of user profiles with whom a card can be shared. This can be set to 0 for no limit. This property is only used when `cardBased` is `true`. 
	UsersPerCardLimit *int32 `json:"usersPerCardLimit,omitempty"`
	// The internal name for the Loyalty Program. This is an immutable value.
	Name string `json:"name"`
	// The tiers in this loyalty program.
	Tiers []NewLoyaltyTier `json:"tiers,omitempty"`
	// A string containing an IANA timezone descriptor.
	Timezone string `json:"timezone"`
	// Defines the type of loyalty program: - `true`: the program is a card-based. - `false`: the program is profile-based. 
	CardBased bool `json:"cardBased"`
}

// NewNewLoyaltyProgram instantiates a new NewLoyaltyProgram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewLoyaltyProgram(title string, defaultValidity string, defaultPending string, allowSubledger bool, name string, timezone string, cardBased bool) *NewLoyaltyProgram {
	this := NewLoyaltyProgram{}
	this.Title = title
	this.DefaultValidity = defaultValidity
	this.DefaultPending = defaultPending
	this.AllowSubledger = allowSubledger
	this.Name = name
	this.Timezone = timezone
	this.CardBased = cardBased
	return &this
}

// NewNewLoyaltyProgramWithDefaults instantiates a new NewLoyaltyProgram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewLoyaltyProgramWithDefaults() *NewLoyaltyProgram {
	this := NewLoyaltyProgram{}
	var cardBased bool = false
	this.CardBased = cardBased
	return &this
}

// GetTitle returns the Title field value
func (o *NewLoyaltyProgram) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NewLoyaltyProgram) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NewLoyaltyProgram) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NewLoyaltyProgram) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NewLoyaltyProgram) SetDescription(v string) {
	o.Description = &v
}

// GetSubscribedApplications returns the SubscribedApplications field value if set, zero value otherwise.
func (o *NewLoyaltyProgram) GetSubscribedApplications() []int32 {
	if o == nil || o.SubscribedApplications == nil {
		var ret []int32
		return ret
	}
	return o.SubscribedApplications
}

// GetSubscribedApplicationsOk returns a tuple with the SubscribedApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetSubscribedApplicationsOk() ([]int32, bool) {
	if o == nil || o.SubscribedApplications == nil {
		return nil, false
	}
	return o.SubscribedApplications, true
}

// HasSubscribedApplications returns a boolean if a field has been set.
func (o *NewLoyaltyProgram) HasSubscribedApplications() bool {
	if o != nil && o.SubscribedApplications != nil {
		return true
	}

	return false
}

// SetSubscribedApplications gets a reference to the given []int32 and assigns it to the SubscribedApplications field.
func (o *NewLoyaltyProgram) SetSubscribedApplications(v []int32) {
	o.SubscribedApplications = v
}

// GetDefaultValidity returns the DefaultValidity field value
func (o *NewLoyaltyProgram) GetDefaultValidity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultValidity
}

// GetDefaultValidityOk returns a tuple with the DefaultValidity field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetDefaultValidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultValidity, true
}

// SetDefaultValidity sets field value
func (o *NewLoyaltyProgram) SetDefaultValidity(v string) {
	o.DefaultValidity = v
}

// GetDefaultPending returns the DefaultPending field value
func (o *NewLoyaltyProgram) GetDefaultPending() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultPending
}

// GetDefaultPendingOk returns a tuple with the DefaultPending field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetDefaultPendingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultPending, true
}

// SetDefaultPending sets field value
func (o *NewLoyaltyProgram) SetDefaultPending(v string) {
	o.DefaultPending = v
}

// GetAllowSubledger returns the AllowSubledger field value
func (o *NewLoyaltyProgram) GetAllowSubledger() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowSubledger
}

// GetAllowSubledgerOk returns a tuple with the AllowSubledger field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetAllowSubledgerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowSubledger, true
}

// SetAllowSubledger sets field value
func (o *NewLoyaltyProgram) SetAllowSubledger(v bool) {
	o.AllowSubledger = v
}

// GetUsersPerCardLimit returns the UsersPerCardLimit field value if set, zero value otherwise.
func (o *NewLoyaltyProgram) GetUsersPerCardLimit() int32 {
	if o == nil || o.UsersPerCardLimit == nil {
		var ret int32
		return ret
	}
	return *o.UsersPerCardLimit
}

// GetUsersPerCardLimitOk returns a tuple with the UsersPerCardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetUsersPerCardLimitOk() (*int32, bool) {
	if o == nil || o.UsersPerCardLimit == nil {
		return nil, false
	}
	return o.UsersPerCardLimit, true
}

// HasUsersPerCardLimit returns a boolean if a field has been set.
func (o *NewLoyaltyProgram) HasUsersPerCardLimit() bool {
	if o != nil && o.UsersPerCardLimit != nil {
		return true
	}

	return false
}

// SetUsersPerCardLimit gets a reference to the given int32 and assigns it to the UsersPerCardLimit field.
func (o *NewLoyaltyProgram) SetUsersPerCardLimit(v int32) {
	o.UsersPerCardLimit = &v
}

// GetName returns the Name field value
func (o *NewLoyaltyProgram) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewLoyaltyProgram) SetName(v string) {
	o.Name = v
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *NewLoyaltyProgram) GetTiers() []NewLoyaltyTier {
	if o == nil || o.Tiers == nil {
		var ret []NewLoyaltyTier
		return ret
	}
	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetTiersOk() ([]NewLoyaltyTier, bool) {
	if o == nil || o.Tiers == nil {
		return nil, false
	}
	return o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *NewLoyaltyProgram) HasTiers() bool {
	if o != nil && o.Tiers != nil {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []NewLoyaltyTier and assigns it to the Tiers field.
func (o *NewLoyaltyProgram) SetTiers(v []NewLoyaltyTier) {
	o.Tiers = v
}

// GetTimezone returns the Timezone field value
func (o *NewLoyaltyProgram) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *NewLoyaltyProgram) SetTimezone(v string) {
	o.Timezone = v
}

// GetCardBased returns the CardBased field value
func (o *NewLoyaltyProgram) GetCardBased() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CardBased
}

// GetCardBasedOk returns a tuple with the CardBased field value
// and a boolean to check if the value has been set.
func (o *NewLoyaltyProgram) GetCardBasedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardBased, true
}

// SetCardBased sets field value
func (o *NewLoyaltyProgram) SetCardBased(v bool) {
	o.CardBased = v
}

func (o NewLoyaltyProgram) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SubscribedApplications != nil {
		toSerialize["subscribedApplications"] = o.SubscribedApplications
	}
	if true {
		toSerialize["defaultValidity"] = o.DefaultValidity
	}
	if true {
		toSerialize["defaultPending"] = o.DefaultPending
	}
	if true {
		toSerialize["allowSubledger"] = o.AllowSubledger
	}
	if o.UsersPerCardLimit != nil {
		toSerialize["usersPerCardLimit"] = o.UsersPerCardLimit
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Tiers != nil {
		toSerialize["tiers"] = o.Tiers
	}
	if true {
		toSerialize["timezone"] = o.Timezone
	}
	if true {
		toSerialize["cardBased"] = o.CardBased
	}
	return json.Marshal(toSerialize)
}

type NullableNewLoyaltyProgram struct {
	value *NewLoyaltyProgram
	isSet bool
}

func (v NullableNewLoyaltyProgram) Get() *NewLoyaltyProgram {
	return v.value
}

func (v *NullableNewLoyaltyProgram) Set(val *NewLoyaltyProgram) {
	v.value = val
	v.isSet = true
}

func (v NullableNewLoyaltyProgram) IsSet() bool {
	return v.isSet
}

func (v *NullableNewLoyaltyProgram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewLoyaltyProgram(val *NewLoyaltyProgram) *NullableNewLoyaltyProgram {
	return &NullableNewLoyaltyProgram{value: val, isSet: true}
}

func (v NullableNewLoyaltyProgram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewLoyaltyProgram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


